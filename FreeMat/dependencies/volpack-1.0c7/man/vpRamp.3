.\" Copyright (c) 1995-2008, Stanford University
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in the
.\"       documentation and/or other materials provided with the distribution.
.\"     * Neither the name of Stanford University nor the
.\"       names of its contributors may be used to endorse or promote products
.\"       derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ''AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Author:
.\"    Phil Lacroute
.\"    Computer Systems Laboratory
.\"    Electrical Engineering Dept.
.\"    Stanford University
.\" 
.\" Macros
.\" .FS <type>  --  function start
.\"     <type> is return type of function
.\"     name and arguments follow on next line
.de FS
.PD 0v
.PP
\\$1
.HP 8
..
.\" .FA  --  function arguments
.\"     one argument declaration follows on next line
.de FA
.IP " " 4
..
.\" .FE  --  function end
.\"     end of function declaration
.de FE
.PD
..
.\" .DS  --  display start
.de DS
.IP " " 4
..
.\" .DE  --  display done
.de DE
.LP
..
.TH vpRamp 3 "" VolPack
.SH NAME
vpRamp \- initialize an array with a piecewise-linear ramp
.SH SYNOPSIS
#include <volpack.h>
.sp
.FS vpResult
\fBvpRamp(\fIarray, stride, num_points, ramp_x, ramp_y\fB)\fR
.FA
float *\fIarray;\fR
.FA
int \fIstride;\fR
.FA
int \fInum_points;\fR
.FA
int *\fIramp_x;\fR
.FA
float *\fIramp_y;\fR
.FE
.SH ARGUMENTS
.IP \fIarray\fR
Output array.
.IP \fIstride\fR
Stride from one array element to the next, in bytes.
.IP \fInum_points\fR
Number of entries in the input arrays (\fIramp_x\fR and \fIramp_y\fR).
.IP \fIramp_x\fR
Input array containing indices into \fIarray\fR.
.IP \fIramp_y\fR
Input array containing values to store into \fIarray\fR.
.SH DESCRIPTION
\fBvpRamp\fR is a utility routine for initializing linear arrays of
floating-point numbers with piecewise-linear ramps.  A ramp is defined
by a set of (x, y) pairs.  The X coordinates are integers that index
entries in the \fIarray\fR argument, and the Y coordinates are
floating-point values to store into the array.  Linearly-interpolated Y
values are stored in array elements with indexes in between two of the
X values.
.PP
The values in \fIramp_x\fR most be strictly increasing.  The
\fIstride\fR argument may be used to skip array elements or to
initialize arrays with a non-standard stride.  If the output array is
a simple linear array of type float then the stride should be
sizeof(float).
.PP
This function is useful for creating lookup tables used for opacity
transfer functions (see vpSetClassifierTable(3)) and shading functions (see
vpSetLookupShader(3)).
.SH ERRORS
The normal return value is VP_OK.  The following error return value
is possible:
.IP VPERROR_BAD_VALUE
The number of points is less than one or the X values are not strictly
increasing.
.SH SEE ALSO
VolPack(3)
