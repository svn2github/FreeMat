.\" Copyright (c) 1995-2008, Stanford University
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in the
.\"       documentation and/or other materials provided with the distribution.
.\"     * Neither the name of Stanford University nor the
.\"       names of its contributors may be used to endorse or promote products
.\"       derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ''AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Author:
.\"    Phil Lacroute
.\"    Computer Systems Laboratory
.\"    Electrical Engineering Dept.
.\"    Stanford University
.\"
.\" Macros
.\" .FS <type>  --  function start
.\"     <type> is return type of function
.\"     name and arguments follow on next line
.de FS
.PD 0v
.PP
\\$1
.HP 8
..
.\" .FA  --  function arguments
.\"     one argument declaration follows on next line
.de FA
.IP " " 4
..
.\" .FE  --  function end
.\"     end of function declaration
.de FE
.PD
..
.\" .DS  --  display start
.de DS
.IP " " 4
..
.\" .DE  --  display done
.de DE
.LP
..
.TH vpStoreRawVolume 3 "" VolPack
.SH NAME
vpStoreRawVolume, vpStoreMinMaxOctree, vpStoreClassifiedVolume,
vpStoreContext \- store volume data structures to a file
.SH SYNOPSIS
#include <volpack.h>
.sp
.FS vpResult
\fBvpStoreRawVolume(\fIvpc, fd\fB)\fR
.FA
vpContext *\fIvpc;\fR
.FA
int \fIfd;\fR
.FE
.sp
.FS vpResult
\fBvpStoreMinMaxOctree(\fIvpc, fd\fB)\fR
.FA
vpContext *\fIvpc;\fR
.FA
int \fIfd;\fR
.FE
.sp
.FS vpResult
\fBvpStoreClassifiedVolume(\fIvpc, fd\fB)\fR
.FA
vpContext *\fIvpc;\fR
.FA
int \fIfd;\fR
.FE
.sp
.FS vpResult
\fBvpStoreContext(\fIvpc, fd\fB)\fR
.FA
vpContext *\fIvpc;\fR
.FA
int \fIfd;\fR
.FE
.SH ARGUMENTS
.IP \fIvpc\fR
VolPack context from \fBvpCreateContext.\fR
.IP \fIfd\fR
File descriptor from \fBopen\fR(2), open for writing.
.SH DESCRIPTION
These functions are used to store volume data structures from a
rendering context into files in the format read by the VolPack file
reading routines (see vpLoadRawVolume(3)).
.PP
\fBvpStoreRawVolume\fR creates a 3D voxel array file.  The file
includes information about the size of the volume and the layout of
the voxels as well as the volume data itself.
.PP
\fBvpStoreMinMaxOctree\fR creates a min-max octree file.  The file
includes information about the size of the volume and the layout of
the voxels as well as the octree itself.
.PP
\fBvpStoreClassifiedVolume\fR creates a preclassified volume data
file.  The file includes information about the size of the volume and the
layout of the voxels as well as the volume data itself.
.PP
\fBvpStoreContext\fR creates a rendering context file.  The file
includes all rendering parameters except volume data and callback
functions.  The contents of any lookup tables for shading and
classification are also stored.
.PP
The function used to write data to the files can be set by calling
\fBvpSetCallback\fR with the VP_WRITE_FUNC option.  This could be used
to implement a file-compression system, for example.
.SH "STATE VARIABLES"
The current file I/O parameters can be retrieved with the following
state variable codes (see vpGeti(3)): VP_WRITE_FUNC.
.SH ERRORS
The normal return value is VP_OK.  The following error return values
are possible:
.IP VPERROR_IO
The file writing function returned an error value (in which case the
external variable \fBerrno\fR should contain an operating-system
specific error code), or the file system is full.
.IP VPERROR_BAD_VOLUME
The volume dimensions are invalid, or there is no voxel data in the
context.
.IP VPERROR_BAD_SIZE
There is no min-max octree in the volume (\fBvpStoreMinMaxOctree\fR only).
.IP VPERROR_BAD_VOXEL
The voxel fields in the rendering context have not been properly defined.
.SH SEE ALSO
VolPack(3), vpCreateContext(3), vpLoadRawVolume(3)
