.\" Copyright (c) 1995-2008, Stanford University
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in the
.\"       documentation and/or other materials provided with the distribution.
.\"     * Neither the name of Stanford University nor the
.\"       names of its contributors may be used to endorse or promote products
.\"       derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ''AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Author:
.\"    Phil Lacroute
.\"    Computer Systems Laboratory
.\"    Electrical Engineering Dept.
.\"    Stanford University
.\" 
.\" Macros
.\" .FS <type>  --  function start
.\"     <type> is return type of function
.\"     name and arguments follow on next line
.de FS
.PD 0v
.PP
\\$1
.HP 8
..
.\" .FA  --  function arguments
.\"     one argument declaration follows on next line
.de FA
.IP " " 4
..
.\" .FE  --  function end
.\"     end of function declaration
.de FE
.PD
..
.\" .DS  --  display start
.de DS
.IP " " 4
..
.\" .DE  --  display done
.de DE
.LP
..
.TH vpTranslate 3 "" VolPack
.SH NAME
vpTranslate \- multiply the current transformation matrix by a
translation matrix
.SH SYNOPSIS
#include <volpack.h>
.sp
.FS vpResult
\fBvpTranslate(\fIvpc, tx, ty, tz\fB)\fR
.FA
vpContext \fI*vpc;\fR
.FA
double *\fItx,\fR *\fIty,\fR *\fItz;\fR
.FE
.SH ARGUMENTS
.IP \fIvpc\fR
VolPack context from \fBvpCreateContext.\fR
.IP \fItx\fR
X component of translation vector.
.IP \fIty\fR
Y component of translation vector.
.IP \fItz\fR
Z component of translation vector.
.SH DESCRIPTION
\fBvpTranslate\fR is used to multiply the current transformation
matrix by a 4-by-4 translation matrix.  The translation matrix is:
.DS
.ta 2C 6C 10C 14C
	1	0	0	tx
.br
	0	1	0	ty
.br
	0	0	1	tz
.br
	0	0	0	1
.DE
.PP
Use \fBvpCurrentMatrix\fR to
set the current transformation matrix.  By default, the transformation
matrix is post-multiplied (M = M*T where M is the current matrix and T
is the translation matrix).  The VP_CONCAT_MODE option to \fBvpSeti\fR
can be used to select pre-multiplication.
.SH "STATE VARIABLES"
The current matrix concatenation parameters can be retrieved with the
following state variable codes (see vpGeti(3)): VP_CURRENT_MATRIX,
VP_CONCAT_MODE.
.SH ERRORS
The return value is always VP_OK.
.SH SEE ALSO
VolPack(3), vpCreateContext(3), vpCurrentMatrix(3)
