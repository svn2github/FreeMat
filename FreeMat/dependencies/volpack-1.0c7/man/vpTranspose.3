.\" Copyright (c) 1995-2008, Stanford University
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions are met:
.\"     * Redistributions of source code must retain the above copyright
.\"       notice, this list of conditions and the following disclaimer.
.\"     * Redistributions in binary form must reproduce the above copyright
.\"       notice, this list of conditions and the following disclaimer in the
.\"       documentation and/or other materials provided with the distribution.
.\"     * Neither the name of Stanford University nor the
.\"       names of its contributors may be used to endorse or promote products
.\"       derived from this software without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY STANFORD UNIVERSITY ''AS IS'' AND ANY
.\" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\" DISCLAIMED. IN NO EVENT SHALL STANFORD UNIVERSITY BE LIABLE FOR ANY
.\" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\" 
.\" Author:
.\"    Phil Lacroute
.\"    Computer Systems Laboratory
.\"    Electrical Engineering Dept.
.\"    Stanford University
.\" 
.\" Macros
.\" .FS <type>  --  function start
.\"     <type> is return type of function
.\"     name and arguments follow on next line
.de FS
.PD 0v
.PP
\\$1
.HP 8
..
.\" .FA  --  function arguments
.\"     one argument declaration follows on next line
.de FA
.IP " " 4
..
.\" .FE  --  function end
.\"     end of function declaration
.de FE
.PD
..
.\" .DS  --  display start
.de DS
.IP " " 4
..
.\" .DE  --  display done
.de DE
.LP
..
.TH vpTranspose 3 "" VolPack
.SH NAME
vpTranspose \- transpose a volume
.SH SYNOPSIS
#include <volpack.h>
.sp
.FS vpResult
\fBvpTranspose(\fIvpc, axis\fB)\fR
.FA
vpContext *\fIvpc;\fR
.FA
int \fIaxis;\fR
.FE
.SH ARGUMENTS
.IP \fIvpc\fR
VolPack context from \fBvpCreateContext.\fR
.IP \fIaxis\fR
Axis which should have the smallest stride after transposing
(VP_X_AXIS, VP_Y_AXIS or VP_Z_AXIS).
.SH DESCRIPTION
\fBvpTranspose\fR is used to transpose the 3D voxel array to optimize
the memory stride for a particular principal viewing axis.  The
intended way to use this function is to set the viewing
transformation, call \fBvpGeti\fR with the VP_VIEW_AXIS argument to
find the corresponding viewing axis, and then call \fBvpTranspose\fR
with that axis.  Transposing the data changes the arrangement of the
data stored in the 3D voxel array.  The voxel stride state variables
are updated to reflect this change, so the viewing transformation does
not need to be changed after transposing.  If the volume is already
transposed for the requested axis then it returns immediately without
modifying the voxel array.
.PP
This function is useful only for rendering large 3D voxel
arrays.  This function has no affect on the preclassified volume data.
.SH "STATE VARIABLES"
Relevant variables may be retrieved with the following state variable
codes (see vpGeti(3)): VP_VIEW_AXIS, VP_VOXEL_XSTRIDE, VP_VOXEL_YSTRIDE,
VP_VOXEL_ZSTRIDE.
.SH ERRORS
The normal return value is VP_OK.  The following error return values
are possible:
.IP VPERROR_BAD_OPTION
The \fIaxis\fR argument is invalid.
.IP VPERROR_BAD_VOLUME
The 3D voxel array is missing or invalid.
.IP VPERROR_BAD_VOXEL
The voxel fields are incorrectly specified.
.SH SEE ALSO
VolPack(3), vpCreateContext(3)
