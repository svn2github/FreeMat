Consider the vector versus scalar issue.  An assignment like:

LHS = RHS

Must always be single valued.  The only time a multivalued assignment can
be made is 

[LHS] = RHS

in which case the RHS can return multiple values.  It would seem as though
it is reasonable to have two seperate paths for these expressions.

The performance bottleneck for expressions like A(i,j) = B(j,i) is the complexity
of the assign and subsref


Performance is much better now.  I will make a release soon.  I still want to 
complete the editor/debugger integration.

Problems:
  - close all causes Xlib to bork - fixed (disabled OpenGL renderer)
  - there is some type of leak in the plot code (when hold is used) - not verified
  - having a variable as the only thing on a line doesn't work right - fixed
  - sscanf is missing - fixed
  - variables tool shows wrong values...- fixed
  - 64 bit quantities do not show up correctly - fixed
  - clear libs does not release imported functions - fixed

  - backwards compatibility for native-format data files and 64 bit types

p*o = [4 1 2 3]x
      [1 4 2 3]x 
      [1 2 4 3]x
      [1 2 3 4]

- Fix unterminated strings... - done

- replacement for libMatIO is nearly complete.

64 bit - 
	Analyze.cpp - done
	Cast.cpp - done
	Constructors.cpp - done
	Inspect.cpp - done
	IO.cpp - done
	MatIO.cpp - done
	Misc.cpp - done
	MPIWrap.cpp - done
	Random.cpp - done
	Array.cpp - done
	Class.cpp - done
	FunctionDef.cpp - done
	LUDecompose.cpp - done
	Math.cpp
	Print.cpp - done
	Serialize.cpp - 
	Sparse.cpp 
	HandleCommands.cpp
	HandleProperty.cpp
	MexInterface.cpp
	mxArray.cpp
	VariablesTool.cpp - done

Still To Do (possibly for 2.1 release):

1.  Packaging issues - Need to remember where I left this.
2.  libMatIO replacement
3.  Debugger/Editor integration
4.  GUI documentation

Threading issues...
A.  GUI calls into main thread
B.  Prompt and main routine... how does this work? - seems to work ok
C.  Debug cycles

GUI calls that cause errors... these need to be relayed to the 
interpreter.

Debug cycles... how does this work?

    Completion introduces a race condition... We need to put a mutex
to protect the context.

helpgen - Done
Completion - Done
Context stuff - Done
history widget - feedback into command line history - Done
Workspace widget - Done
files widget - Done
pcode - Done
getline - Done
Initial terminal width. - Done
Stack trace - Done
Continuations - Done
Breakpoints
	- General bps seem to work. - Done
	- check bps on scripts - Done
	- dbstep beyond end of function - Done
	- bp outside valid line range - Done
	- simplify interface? - Done
Quit - Done

OK - 2.0 release is done.  Next steps.

1.  Implement the regression test code
2.  Add more regression tests
3.  Implement GUI objects
4.  Implement more functions
5.  String output wrapping

Continuation and array definition

The new parser/scanner are now set in place, with nearly all of the functionality working.
Some remaining items:
1.  Continuations
2.  Debugger

semilog, loglog
isequal
output autoformatting

2. Check icon for various platforms
3. Update build number in WalkTree.cpp
5. Make check

Current state:

Platform/target     all      help      package     install     dist     check
Linux              done     done        done       done        done     untest
Mac OS X           done     untested   broken(*)   n/a         n/a      untest
Win32              done     untested   untested    n/a         n/a      untest


* Icon doesn't work
build instructions from SVN:
- bootstrap
- make
- make help
- make distcheck


- prod with complex args returns 0
- plot axis rounding
- blas tuning
- for loop speed
- Check build on mac os X
- Add regression tests to make check target
- Fix "install" target on linux.
- csvread, csvwrite

- ls/dir system doesn't work right
- Need to verify system function on Win32
- win32 build of matio
- matio wierdness

- Source build appears to work on Linux...  

Before release:
- JPG plugins (Win32)
- Handle docs
- about dialog
- Mac
- Save restore state of main window & help window.
- Enable function mode (-f "code") in gui versions.
- paste, ctrl-c/z
- Test packaging
- global/persistent

What is the deal with the source release?
  1. Dependency on ATLAS? There appear to be several BLAS options:
       A. Use a prebuilt ATLAS BLAS
       B. Use a custom ATLAS BLAS
       C. Use the system BLAS
       D. Use the reference BLAS
  2. UMFPACK/AMD/UFconfig - Just build these, I think
  3. LAPACK
       A. Use the system LAPACK
       B. Use the included LAPACK
  4. FFCall
       A. Use the system ffcall
       B. Use the included ffcall
  5. FFTW
       A. Use the system fftw
       B. Use the included fftw
  6. Fortran compiler identification (g77 versus gfortran)
       A. Use gfortran
       B. Use g77
  7. Fortran linking (libg2c versus libgfortran)


So we need a configure interface that will handle these various options.

Installer:
  Win   - nsis script done & works
  Mac   - essentially done & works
  Linux - essentially done & works
  Source - needs work


Done:
- Add license.mpp file
- What about the help compiler?  I could just include it in FreeMat...
- Locks up after command appears in history window
- Need finite command recall window
- Save restore state of main window & help window.
- Mac
- Enable function mode (-f "code") in gui versions.
- Closing of only figure window
  GPL 
  BLAS setup (override)
  Quit signaling
  Finish editor
  GUI Console + completions
  colormap wrapping for images
  Installer & packaging
  Source release
  xlabels under linux
  Title text
  Non-X11 version
  non-gui version - with "x" click
  Icons
  Missing quads?
  point function?
  setpath
  tab completion

  framework...

  100% CPU problem on Win32

FreeMat will be distributed as a bundle.  A bundle contains the following directory structure:

freemat
   \
    bin
    libs
    help
    mfiles

On Mac OS X, the bundle structure is
freemat
   \
    Contents
    \
    Frameworks
    MacOS
    Resources
    PlugIns

We can use a common structure via:

freemat
  \
  Contents
   \
   bin
   lib
   Resources
    \
     mfiles
     help
       \
        html
        pdf
	text
   PlugIns

This means that on any platform, the path to system-included mfiles is
appDir+"../Resources/mfiles"
and that the path to system-included help is
appDir+"../Resources/help"

I like it.

extern dependencies:
  ffcall
  lapack
  atlas
  mkl
  

With Help - 
  Icons

packaging
handle documentation

1. Printing
2. SVD
3. Off-by-one errors in axis drawing
4. Ditto in bitmap painting.
5. Need axis command
sca
colorbar
integer limits  
Legend
handleobjects deletion
zoom
.m file help


1.  Finish properties for surface plots - markers & texture mapping?
ACTIVE

IDEAS - auto tick calculation --> paint code
wierdness with plots drawing

4.  Rewrite legend function to use multiple axes
6.  Fix axis limits so that objects aren't truncated...
7.  view - command doesn't work right (also, camera target mode/etc.)
8.  axis annotation for view 2
10. Handle graphics documentation/class documentation
11. prebuilt packaging
15. What about rotation buttons
16. User control of figure sizes
19. Colormap
20. Colorbar
21. Clim
22. Surf/Surfc, imagesc
23. Printing
27. builtin function masking (ala surface.m, for example)
29. Surface gaps
30. Handle axis packing

CLOSED
24. Tick counts
1.  Finish properties for surface plots - markers & texture mapping?
23. subplot --> area of intersection
12. prod(svd(rand(3))) --> core dump
14. plot3
18. OpenGL activation
25. Close notification for figures
26. Raise/show/activate figures
13. Need refresh on set
17. Image sizes
28. Spacing aroung figure


A few notes on what needs to still be fixed:

Replace XERBLA
Fix problems with workspace calculations in DGESDD

Default ticklen is [0.01, 0.025]
Default position is [0.13,0.11,0.775,0.815]


Postscript printing with symbols and super/subscript...
- super and subscript works fine
- postscript printing maps the symbols to unicode
 
set(gca,'xtick',[vec]) 
set(gca,'xlabel',string)
set(gca,'xdir','reverse')


Additional functions that would useful to have:
clf
hot
image args --> MATLAB
set(gca, 'xtick', [], 'ytick', [1 n2])
text(1, 1.04*(n2+0.5), '1', ...
	'horizontalalign', 'left', ...
	'verticalalign', 'top')
text(n1, 1.04*(n2+0.5), num2str(n1), ...
	'horizontalalign', 'right', ...
	'verticalalign', 'top')
axis xy
texts
set(hh, 'CDataMapping', 'direct')
set(gca, 'CLim', clim)
set(gca, 'CLimMode', 'auto')
set(gca, 'TickDir', 'out')
drawnow
if isxy, axis xy, end  <- why doesn't this parse right?


Redraw - under some circumstances plots do not refresh
Broken lines
0 --> 1e-18
image --> causes a figure resize (even when zoom = -1)
svd --> causes a seg fault

P N   Desc
Capital Letters?


Graphics issues:
//copy
//print
//resize
flicker
//point function
drag(?)
//close & new figure numbering

H 21. Online Help
H 20. Application Icon
H 25. Port to ATLAS?

Test "While with break/continue/retall/return/quit"
Test "for with break/continue/retall/return/quit"

M ??. "who" function should indicate type for an object
M ??. "subsindex"
H 23. Hanging Chads
H 24. Colorbar
H 25. Test copy of plots without background clearing.
H 22. Need to finish terminal code. 
H 22. Fix hanging menus on Win32
H 23. PS printing on Mac OS X
H 24. Build system should be debug/release aware on Win32.

M 3.  Plotting code needs to be moved into the FreeMat regime.
M 5.  MPIFreeMat needs to be re-enabled
L 7.  libffi --> upgraded
L 15. Migrate System call -->Qt
L 16. Migrate DynLib --> Qt

H **8.  Lapack bug workarounds enabled
H 2.  The printing mechanism needs to be fixed.
M 4.  Postscript generation --> Qt?
H 1.  Rotated text needs to be fixed.
H 6.  Dumbterminal needs to be re-enabled
H 9.  Re-enable interrupts in GUI code
H 17. Fix build system!
H 11. Save of text in GUI mode
H 10. Copy/paste of text in GUI code
H 21  Double buffer text window?
H 12. Change Font in GUI mode
H 19. Text width does not seem to work right
H 14. Copy/Paste of figures
H 18. fft(rand(1,4)) produces no output in GUI version
H 21. Re-enable debugging - what happens to break points when file is reparsed - and what about subfunctions?
H 22. What about the "point()" function?

Some observations:
[a,b,c] = [2,3,4] --> too many output arguments
[a,b,c] = {1,2,3} --> too many output arguments
q = {1,2,3};
[a,b,c] = q{:}    --> works
[z,a,w] = xargs(3) --> 1,3
clear all
[a{1:2},b] = xargs(3) --> 1,3
[a{1:2},b] = q{:} --> works
[g.foo{1:2},h.hi] = q{:}
clear all
[g.foo{1:2},h.hi] = xargs(3) --> 1,3
clear all
a(1).foo = 1;
a(2).foo = 2;
a(3).foo = 3;
[z,v,w] = a.foo; --> works
[a.foo] = xargs(3) --> works
xargs(a.foo) --> 3,0

Time in ArrayVector:
	5.5+4.5+4.4+3.9+3.4+2.5+2.28+1.6+1.4+1.2+1.2+1.11 ~= 33%

So the time could be 1.561 seconds for matcopy3 instead of 2.38 seconds.

bugs
- plot selection for zoom/pan tools is wrong (when used with subplot)
- variables created during dbstep do not show up in variable tool
- dbstep does not step into function calls
- after "return", IP should go away

- should have code to zoom editor window to current IP line
- need controls "step", etc on editor and main window.

fixed
- "toggle" of breakpoints does not work
- dbdelete should refresh bp's
- "step out" works properly
- should be able to set a bp on a "for" statement


comments - 
- breakpoints work fine.
- dbstep still does not work right.
- dbstep(n) should be defined as the line number changing?
-  Consider this case: 

     for i = 1:100, j = j + i; end

- does a single dbstep go over this?
- It seems there are two levels of granularity:

1. dbstep - continue execution until the current line number changes
2. dbtrace - continue execution until the next statement is executed

Also, dbtrace should be _insensitive_ to function call context, while
dbstep is _sensitive_ to function call context.  That means that
in a function call, the dbstep state will need to be saved and restored.


- OK dbstep works correctly now...  dbtrace still needs work.

- Selections in the editor
- Ensure the current line is in the window.

- Time in ArrayVector:
- 2.39+1.72+1.54+1.34+1.3+1.23+1.2+1.2+1.19+1.14+0.98+0.97+0.95+0.86+0.86+0.85+...

The performance differences may have something to do with GCC also.  

For the 3.0 release:
  - backwards compatibility for native-format data files and 64 bit types - done
  - gui documentation


- Win32 build works
- Linux source build works
- Linux binary package


RPMS for ffcall:
http://dries.ulyssis.org/apt/packages/ffcall/info.html

RPMS for ARPACK:
http://dl.atrpms.net/all/arpack-devel-2.1-5.fc6.at.i386.rpm

<<<<<<< .mine

- Only 2 ways to increase the speed of mmtran further:

1.  Cache lookups into Context
2.  Special case 

Status:

Win32 Cross Build
Linux Straight Build
Linux distcheck Build
Linux RPM Build

- Win32 build -->
- Linux build --> done
- Mac build



Linux
- make                        - ok
- make help                   - ok
- make dist                   - ok
- make distcheck              - ok
- install-tool --freemat      - ok
- install-tool --xwin-freemat - ok
- rpmbuild -ba                - ok

Mac PPC
- install-tool --mac-freemat  - ok

Mac Intel
- install-tool --mac-freemat  - ok
- Merge bundles 

Window
- test install --             - ok 


All of this could be put inside a single script and run from one machine.


Threading in FreeMat:
How is threading going to work?  A function like:

"id = threadstart(function,args)"

Likewise, the function 

"id = threadid"

will return the thread id of the current thread.

Would launch a new thread that executes the given function.

"threadstop(id)"

Stops execution of the given thread.

"threadpause(id)"

Suspends execution of the given thread.

"threadresume(id)"

Resume execution of the given thread

Check to see if the thread returned

"isthreadfinished(id)"

We can retrieve the value of the function with

"[a,b,c,d] = threadreturn(id)"

We can wait for the thread to finish with

"threadwait(id)"

We can free up a thread by calling

"threadfree(id)"

This will require the use of thread local storage to hold the resulting variables.

Some simple rules for thread programming:

1.  Global variables are protected with mutexes
2.  Most FreeMat functions are re-entrant.  Need to look for those that are not.  Msgbuffer-related code is generally static.  Also some concern about the RN generation routines.  Can use Mutex to protect those.
3.  To provide support for wait conditions, we need a function like this:

"wait(global variable)"

and

"wakeone(global variable)"

and

"wakeall(global variable)"

4.  Sleep functions:
"sleep, msleep, usleep"

Dispatching of things like graphics calls and the like will need to be thread matched (in MainApp).  


Goals:

1. Threads          - DONE - still need to eliminate msgbuffers...
2. Searching help
3. RPC              - DONE
4. Regression testing
5. Eliminate C-style strings.
6. Better treatment of the system call.
7. Contour plots
8. static threading
9. TCP rework

#3 is almost done.  I'll start with that one.  
For the threads - we need a mechanism to protect 
shared variables (which will be all global variables). 
Also need to support exceptions for when the thread 
   function causes an exception to occur.

#4 For this one, I want to have each of the tests run by
the help system generate a black blox test.  


****************************************
*  Test Summary                        *
****************************************
 
Number of tests: 742
Failed tests: 17
   Test wbtest_acosd_2.m failed
   Test wbtest_acsc_1.m failed
   Test wbtest_acsc_4.m failed
   Test wbtest_acscd_1.m failed
   Test wbtest_acscd_3.m failed
   Test wbtest_acscd_4.m failed
   Test wbtest_asecd_1.m failed
   Test wbtest_asind_3.m failed
   Test wbtest_atanh_3.m failed



ToDo:

1. Fix remaining wbtests
2. Remove Win32 defines from various places - replace with Qt code
3. Refresh on drawnow only
     - The problem with this is that when a repaint shows up,
       we need to show the _old_ plot, not the _new_ plot.
     - Added backing store to do explicit double-buffering.


Number of tests: 742
Failed tests: 21
   Test bbtest_eigs.m failed
   Test bbtest_rand.m failed
   Test bbtest_randn.m failed
   Test bbtest_source.m failed
   Test wbtest_acosd_2.m failed
   Test wbtest_acsc_1.m failed
   Test wbtest_acsc_4.m failed
   Test wbtest_acscd_1.m failed
   Test wbtest_acscd_3.m failed
   Test wbtest_acscd_4.m failed
   Test wbtest_asecd_1.m failed
   Test wbtest_asind_3.m failed
   Test wbtest_atanh_3.m failed
   Test wbtest_conv_1.m failed
   Test wbtest_conv_2.m failed
   Test test_exist2.m failed
   Test test_image1.m failed
   Test test_newind1.m failed
   Test test_newind2.m failed
   Test test_persistent2.m failed
   Test test_source.m failed


if (~strcomp(typeof(type),'string'))
  error('type argument to isa must be a string');
end
y = strcomp(class(x),type);


To Do for 3.1 release:

<<<<<<< .mine
2.  Contour plots
3.  inline - automagic
=======
2. Contour plots
Why doesn't  regexp('Time is a True Test','(\bT\w*\b)','tokens'){:} work?
The following is roughly equivalent to symvar
b = regexp(a,'(\b[a-zA-Z]\w*\b)(?!\s*\()','tokens'); b{:}
help<tab> doesn't show
