AC_INIT(src/main.cpp)

AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(FreeMat, 2.0RC2)

AC_PROG_CC
AC_PROG_CXX
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_RANLIB
	
dnl Check for AWT related Qt4
PKG_CHECK_MODULES(QT, QtCore QtGui QtOpenGL >= 4.1.0, HAVE_QT4="yes", HAVE_QT4="no")
foo=`echo $QT_LIBS | sed -e 's/-L/-Wl,-rpath,/g'`

if test "x$HAVE_QT4" = "xyes"; then
   dnl Check needed because in some cases the QtGui includedir
   dnl doesn't contain the subsystem dir.
   QT_INCLUDE_DIR=$($PKG_CONFIG --variable=includedir QtGui)
   EXTRA_QT_INCLUDE_DIR="$QT_INCLUDE_DIR/Qt"
   AC_CHECK_FILE([$QT_INCLUDE_DIR/QWidget],
   AC_MSG_NOTICE([No extra QT_INCLUDE_DIR needed]),
   AC_CHECK_FILE([$EXTRA_QT_INCLUDE_DIR/QWidget],
   QT_CFLAGS="$QT_CFLAGS -I$EXTRA_QT_INCLUDE_DIR",
   AC_MSG_WARN([QWidget not found])))
   AC_CHECK_PROG(QT_MOC, [moc], [moc])
   AC_CHECK_PROG(QT_RCC, [rcc], [rcc])
fi

AC_ARG_WITH([qt4dir],
	     [AC_HELP_STRING([--with-qt4dir=DIR],
	     [Qt4 installation directory used for OS-X or Win32.
	      For other systems use pkg-config.])],
	      [QT4DIR=$withval]
	      )

AC_ARG_ENABLE([stdbuild],
	      [AC_HELP_STRING([--enable-stdbuild],
	      [Do not allow configure to download and build any missing
	      dependencies.])],[AUTOBUILD="no"],[AUTOBUILD="yes"])

help_target="help-unix"
is_win32="false"

case "$host_os" in
     mingw*)
      is_win32="true"
      ;;
esac     

if test "x$HAVE_QT4" = "xno"; then
   AC_MSG_NOTICE([Looking for QT_CFLAGS and QT_LIBS without pkg-config])
   if test x"$QT4DIR" = x ; then
      AC_MSG_ERROR([*** No path for Qt4 --with-qt4dir option given])
   fi
   AC_CHECK_PROG(QT_MOC, [moc], [$QT4DIR/bin/moc], [], $QT4DIR/bin)
   if test x"$QT_MOC" = x; then
      AC_MSG_ERROR([*** This is not the right Qt installation])
   fi
   AC_CHECK_PROG(QT_RCC, [rcc], [$QT4DIR/bin/rcc], [], $QT4DIR/bin)
   if test x"$QT_RCC" = x; then
      AC_MSG_ERROR([*** This is not the right Qt installation])
   fi
   case "$host_os" in
    mingw*)
      QT_CFLAGS="-I$QT4DIR/include -I$QT4DIR/include/QtCore -I$QT4DIR/include/QtGui -I$QT4DIR/include/QtNetwork -I$QT4DIR/include/QtOpenGL"
      QT_LIBS="-L$QT4DIR/lib -lQtGui4 -lQtCore4 -lQtNetwork4 -lQtOpenGL4 -lopengl32 -lglu32 -lgdi32 -luser32 -lqtmain -lwsock32"
      LDFLAGS="$LDFLAGS -mthreads -Wl,-enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-s -Wl,-s -Wl,-subsystem,windows"
      AC_SUBST(QT4DIR)
      help_target="help-mingw"
      AC_CHECK_PROG(QT_RCC, [rcc], [$QT4DIR/bin/rcc], [], $QT4DIR/bin)
      if test x"$QT_RCC" = x; then
	 AC_MSG_ERROR([*** This is not the right Qt installation])
      fi
      AC_CHECK_PROG(WINDRES, [windres], [windres], [])
      if test x"$WINDRES" = x; then
	 AC_MSG_ERROR([*** Unable to find windres - please try reinstalling msys and mingw])
      fi
      ;;
    darwin*)
      QT_CFLAGS="-F$QT4DIR/lib -I$QT4DIR/lib/QtCore.framework/Headers"
      QT_CFLAGS="$QT_CFLAGS -I$QT4DIR/lib/QtGui.framework/Headers"
      QT_CFLAGS="$QT_CFLAGS -I$QT4DIR/lib/QtOpenGL.framework/Headers"
      QT_LIBS="-Xlinker -F$QT4DIR/lib -Xlinker -framework -Xlinker QtCore"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker QtGui"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker QtOpenGL"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker OpenGL"
      ;;
    *)
      AC_MSG_ERROR([*** Please check PKG_CONFIG_PATH or the version
      of your installed Qt4 installation.])
      ;;
  esac
fi
AC_MSG_NOTICE([Set QT_CFLAGS... $QT_CFLAGS])

AC_MSG_NOTICE([Win32 flag is $is_win32])
AM_CONDITIONAL(WIN32, test x"$is_win32" = x"true")

AC_SUBST(help_target)
AC_SUBST(QT_CFLAGS)
AC_SUBST(QT_LIBS)
AC_SUBST(QT_MOC)
AC_SUBST(QT_RCC)

AC_PROG_F77

case "$host_os" in
     darwin*)
	LDFLAGS="-L/sw/lib"
	FLIBS="-lg2c"
        ;;
     *)
        AC_F77_LIBRARY_LDFLAGS
        ;;
esac

dnl LIBS="$LIBS $FLIBS"

if test x"${QT_LIBS}" = x; then
   echo ""
   AC_MSG_ERROR([Qt4 is required.  If you have Qt installed see --help for more options])
   echo ""
fi
cdir=`pwd`
CFLAGS="$CFLAGS -I$cdir/extern/Root/include"
CXXFLAGS="$CXXFLAGS -I$cdir/extern/Root/include"
CPPFLAGS="$CPPFLAGS -I$cdir/extern/Root/include"
FOO=`echo $QT_LIBS | sed -e 's/-L/-Wl,-rpath,/g' | sed -e 's/-l\w*//g'`
AC_MSG_NOTICE([Extra lib flags added $FOO])
LDFLAGS="$LDFLAGS -L$cdir/extern/Root/lib $FOO"

dnl Check external dependencies
dnl   Fail?
dnl     If any are missing, check for CURL
dnl     If no CURL - quit
dnl     If no TAR - quit
dnl     If no GUNZIP - quit
dnl     If no ZIP - quit
dnl     Write the external build script
dnl     Try to run the external build script
dnl     Recheck external dependencies
dnl        Fail? --> abort

ac_save_libs=$LIBS

AC_LIB_FREEMAT_CHECK


if test x"$need_extern" != xno; then
echo \
"**********************************************************************
One or more of the following external dependencies was not
found:
  AVCALL                    ${found_avcall}
  AMD                       ${found_amd}
  UMFPACK                   ${found_umfpack}
  FFTW3 (Single Precision)  ${found_fftw3f}
  FFTW3 (Double Precision)  ${found_fftw3}
  BLAS                      ${found_blas}
  LAPACK                    ${found_lapack}
  ARPACK                    ${found_arpack}
  ZLIB                      ${found_z}
  MATIO                     ${found_matio}
**********************************************************************"

if test x"$AUTOBUILD" != xyes; then
   AC_MSG_ERROR([*** This is a fatal configuration problem.  However, the configure script supports the option --enable-autobuild, which will attempt to download the missing packages and build them.  Please rerun configure with --enable-autobuild.])
fi

echo \
"The configure script build will attempt to build these missing
dependencies.  The following steps are highly experimental. If
the script fails, please check the installation instructions."

AC_CHECK_PROG(CURL, [curl], [curl])
AC_CHECK_PROG(TAR, [tar], [tar])
AC_CHECK_PROG(GUNZIP, [gunzip], [gunzip])
AC_CHECK_PROG(ZIP, [zip], [zip])

AC_OUTPUT([tools/disttool/builddeps])
chmod +x tools/disttool/builddeps

tools/disttool/builddeps $extern_flags

dnl clear the cache variables
unset ac_cv_lib_amd_amd_postorder
unset ac_cv_lib_arpack__znaupd
unset ac_cv_lib_arpack_znaupd
unset ac_cv_lib_arpack_znaupd_
unset ac_cv_lib_atlas_ATL_xerbla
unset ac_cv_lib_avcall___structcpy
unset ac_cv_lib_blas_sgemm_
unset ac_cv_lib_complib_sgimath_sgemm_
unset ac_cv_lib_cxml_sgemm_
unset ac_cv_lib_dxml_sgemm_
unset ac_cv_lib_fftw3_fftw_malloc
unset ac_cv_lib_fftw3f_fftwf_malloc
unset ac_cv_lib_m_sgemm_
unset ac_cv_lib_matio_Mat_Open
unset ac_cv_lib_scs_sgemm_
unset ac_cv_lib_umfpack_umfpack_zl_solve
unset ac_cv_lib_z_inflate

LIBS=$ac_save_libs

AC_LIB_FREEMAT_CHECK

if test x"$need_extern" != xno; then
echo \
"**********************************************************************
One or more of the following external dependencies was not
found and could not be built
  AVCALL                    ${found_avcall}
  AMD                       ${found_amd}
  UMFPACK                   ${found_umfpack}
  FFTW3 (Single Precision)  ${found_fftw3f}
  FFTW3 (Double Precision)  ${found_fftw3}
  BLAS                      ${found_blas}
  LAPACK                    ${found_lapack}
  ARPACK                    ${found_arpack}
  ZLIB                      ${found_z}
  MATIO                     ${found_matio}
Please check the installation instructions for manual installation
instructions."
   AC_MSG_ERROR([*** Unable to build required external dependencies.  Consult the installation instructions in the manual for more information. ***])
fi

fi

AM_CONDITIONAL(USECLI, test x$ismingw = xfalse)

MP_WITH_CURSES

LIBS="$LIBS $CURSES_LIB"

echo \
"**********************************************************************
All external dependencies satisfied.  Generating makefiles.
**********************************************************************"
AC_OUTPUT([Makefile src/Makefile libs/Makefile libs/libFreeMat/Makefile
		    libs/libCore/Makefile libs/libFN/Makefile
		    libs/libMex/Makefile libs/libXP/Makefile 
		    libs/libGraphics/Makefile images/Makefile
		    tools/Makefile tools/helpgen/Makefile 
		    tools/disttool/makepkg])

chmod +x tools/disttool/makepkg

