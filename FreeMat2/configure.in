AC_INIT(src/main.cpp)

AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(FreeMat, 2.0RC2)

AC_PROG_CC
AC_PROG_CXX
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_RANLIB

AC_MSG_CHECKING(system name)
uname=`uname`
uversion=`uname -r | sed -e '1,$s/[[^0-9]]//g'`
if test "x$uname" = xIRIX64; then
    uname="IRIX"
fi
AC_MSG_RESULT([$uname])

AC_MSG_CHECKING(for msys)
ismingw="no"
case $uname in 
     MINGW*)
       ismingw="yes"
       ;;
esac
AC_MSG_RESULT([$ismingw])

if test x"$ismingw" = x"yes"; then
   AC_MSG_CHECKING(for Qt4)
   QT_CXXFLAGS="-I/c/Qt/4.1.0/include -I/c/Qt/4.1.0/include/QtCore -I/c/Qt/4.1.0/include/QtGui -I/c/Qt/4.1.0/include/QtNetwork -I/c/Qt/4.1.0/include/QtOpenGL"
   QT_DIR="/c/Qt/4.1.0"
   QT_LIBS="-L/c/Qt/4.1.0/lib -lQtGui4 -lQtCore4 -lQtNetwork4 -lQtOpenGL4 -lopengl32 -lglu32 -lgdi32 -luser32 -lqtmain -lwsock32"
   LDFLAGS="$LDFLAGS -mthreads -Wl,-enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc -Wl,-s -Wl,-s -Wl,-subsystem,windows"
   QT_MOC="/c/Qt/4.1.0/bin/moc"
   QT_RCC="/c/Qt/4.1.0/bin/rcc"
   bnv_is_qt4="yes"
   AC_MSG_RESULT([yes:
   QT_CXXFLAGS=$QT_CXXFLAGS
   QT_DIR=$QT_DIR
   QT_LIBS=$QT_LIBS
   QT_UIC=$QT_UIC
   QT_MOC=$QT_MOC])
fi
#else
#
#    KSW_IS_OSX
#    if test x"$is_osx" = xyes; then
#       QT_CXXFLAGS="-F/usr/local/Trolltech/Qt-4.1.1/lib -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -DQT_OPENGL_LIB -I/usr/local/Trolltech/Qt-4.1.1/lib/QtCore.framework/Versions/4.0/Headers -I/usr/local/Trolltech/Qt-4.1.1/include/QtCore -I/usr/local/Trolltech/Qt-4.1.1/lib/QtGui.framework/Versions/4.0/Headers -I/usr/local/Trolltech/Qt-4.1.1/include/QtGui -I/usr/local/Trolltech/Qt-4.1.1/lib/QtOpenGL.framework/Versions/4.0/Headers -I/usr/local/Trolltech/Qt-4.1.1/include/QtOpenGL -I/usr/local/Trolltech/Qt-4.1.1/include -I/System/Library/Frameworks/OpenGL.framework/Versions/A/Headers -I/System/Library/Frameworks/AGL.framework/Headers"
#       QT_DIR="/usr/local/Trolltech/Qt-4.1.1"
#       QT_LIBS="-F/usr/local/Trolltech/Qt-4.1.1/lib -L/usr/local/Trolltech/Qt-4.1.1/lib -framework QtOpenGL -F/Users/samitbasu/Dev/qt-mac-opensource-src-4.1.1/lib -L/Users/samitbasu/Dev/qt-mac-opensource-src-4.1.1/lib -framework QtGui -framework Carbon -framework QuickTime -framework QtCore -lz -lm -framework ApplicationServices -framework OpenGL -framework AGL"
#       QT_UIC="/usr/local/Trolltech/Qt-4.1.1/bin/uic"
#       QT_MOC="/usr/local/Trolltech/Qt-4.1.1/bin/moc"
#       QT_RCC="/usr/local/Trolltech/Qt-4.1.1/bin/rcc"
#       bnv_is_qt4=yes
#   AC_MSG_RESULT([yes:
#   QT_CXXFLAGS=$QT_CXXFLAGS
#   QT_DIR=$QT_DIR
#   QT_LIBS=$QT_LIBS
#   QT_UIC=$QT_UIC
#   QT_MOC=$QT_MOC])
#    else
#       BNV_HAVE_QT
#    fi
#     PKG_CHECK_MODULES(QT, QtGUI >= 4.1.0)
#fi
	
dnl Check for AWT related Qt4
PKG_CHECK_MODULES(QT, QtCore QtGui QtOpenGL >= 4.1.0, HAVE_QT4="yes", HAVE_QT4="no")
if test "x$HAVE_QT4" = "xyes"; then
   dnl Check needed because in some cases the QtGui includedir
   dnl doesn't contain the subsystem dir.
   QT_INCLUDE_DIR=$($PKG_CONFIG --variable=includedir QtGui)
   EXTRA_QT_INCLUDE_DIR="$QT_INCLUDE_DIR/Qt"
   AC_CHECK_FILE([$QT_INCLUDE_DIR/QWidget],
   AC_MSG_NOTICE([No extra QT_INCLUDE_DIR needed]),
   AC_CHECK_FILE([$EXTRA_QT_INCLUDE_DIR/QWidget],
   QT_CFLAGS="$QT_CFLAGS -I$EXTRA_QT_INCLUDE_DIR",
   AC_MSG_WARN([QWidget not found])))
   AC_CHECK_PROG(QT_MOC, [moc], [moc])
   AC_CHECK_PROG(QT_RCC, [rcc], [rcc])
fi

if test "x$HAVE_QT4" = "xno"; then
   AC_MSG_NOTICE([Looking for QT_CFLAGS and QT_LIBS without pkg-config])
   case "$host_os" in
    darwin*)
      AC_ARG_WITH([qt4dir],
        [AS_HELP_STRING([--with-qt4dir=DIR],
        [Qt4 installation directory used for OS-X.
        For other systems use pkg-config.])],
        [QT4DIR=$withval]
        )
      if test x"$QT4DIR" = x ; then
        AC_MSG_ERROR([*** No path for Qt4 --with-qt4dir option given])
      fi
      AC_MSG_RESULT([QT4DIR... $QT4DIR])
      AC_CHECK_PROG(QT_MOC, [moc], [$QT4DIR/bin/moc], [], $QT4DIR/bin)
      if test x"$QT_MOC" = x; then
        AC_MSG_ERROR([*** This is not the right Qt installation])
      fi
      QT_CFLAGS="-F$QT4DIR/lib -I$QT4DIR/lib/QtCore.framework/Headers"
      QT_CFLAGS="$QT_CFLAGS -I$QT4DIR/lib/QtGui.framework/Headers"
      QT_CFLAGS="$QT_CFLAGS -I$QT4DIR/lib/QtOpenGL.framework/Headers"
      QT_LIBS="-Xlinker -F$QT4DIR/lib -Xlinker -framework -Xlinker QtCore"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker QtGui"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker QtOpenGL"
      QT_LIBS="$QT_LIBS -Xlinker -framework -Xlinker OpenGL"
      ;;
    *)
      AC_MSG_ERROR([*** Please check PKG_CONFIG_PATH or the version
      of your installed Qt4 installation.])
      ;;
  esac
fi
AC_MSG_NOTICE([Set QT_CFLAGS... $QT_CFLAGS])

AC_SUBST(QT_CFLAGS)
AC_SUBST(QT_LIBS)
AC_SUBST(QT_MOC)
AC_SUBST(QT_RCC)

AC_PROG_F77

case "$host_os" in
     darwin*)
	LDFLAGS="-L/sw/lib"
	FLIBS="-lg2c"
        ;;
     *)
        AC_F77_LIBRARY_LDFLAGS
        ;;
esac

LIBS="$LIBS $FLIBS"

if test x"${QT_LIBS}" = x; then
   echo ""
   AC_MSG_ERROR([Qt4 is required.  If you have Qt installed see --help for more options])
   echo ""
fi

LIBS="$LIBS $FLIBS"
cdir=`pwd`
CFLAGS="$CFLAGS -I$cdir/extern/Root/include"
CXXFLAGS="$CXXFLAGS -I$cdir/extern/Root/include"
CPPFLAGS="$CPPFLAGS -I$cdir/extern/Root/include"
LDFLAGS="$LDFLAGS -L$cdir/extern/Root/lib"

extern_flags=""
need_extern="no"
AC_CHECK_LIB(avcall,__structcpy,found_avcall="yes",found_avcall="no")
if test x"$found_avcall" == xyes; then
      LIBS="-lavcall $LIBS"
fi    
AC_CHECK_LIB(amd,amd_postorder,found_amd="yes",found_amd="no")
if test x"$found_amd" == xyes; then
  LIBS="-lamd $LIBS"
fi
AC_CHECK_LIB(umfpack,umfpack_zl_solve,found_umfpack="yes",found_umfpack="no")
if test x"$found_umfpack" == xyes; then
  LIBS="-lumfpack $LIBS"
fi
AC_CHECK_LIB(fftw3f,fftwf_malloc,found_fftw3f="yes",found_fftw3f="no")
if test x"$found_fftw3f" == xyes; then
  LIBS="-lfftw3f $LIBS"
fi
AC_CHECK_LIB(fftw3,fftw_malloc,found_fftw3="yes",found_fftw3="no")
if test x"$found_fftw3" == xyes; then
  LIBS="-lfftw3 $LIBS"
fi
if test x"$is_osx" == xyes; then
   LIBS="$LIBS -framework vecLib"
   found_blas="yes"
   found_lapack="yes"
else
ACX_BLAS(found_blas="yes",found_blas="no")
if test x"$found_blas" == xyes; then
   LIBS="$BLAS_LIBS $LIBS"
fi
ACX_LAPACK(found_lapack="yes",found_lapack="no")
if test x"$found_blas" == xyes; then
   LIBS="$LAPACK_LIBS $LIBS"
fi
fi
AC_F77_FUNC(znaupd)
if test x"$znaupd" == x"unknown"; then
  znaupd="znaupd_"
fi

AC_CHECK_LIB(arpack,$znaupd,found_arpack="yes",found_arpack="no")
if test x"$found_arpack" == xyes; then
  LIBS="-larpack $LIBS"
fi
AC_CHECK_LIB(z,inflate,found_z="yes",found_z="no")
if test x"$found_z" == xyes; then
   LIBS="-lz $LIBS"
fi
AC_CHECK_LIB(matio,Mat_Open,found_matio="yes",found_matio="no")
if test x"$found_matio" == xyes; then
   LIBS="-lmatio $LIBS"
fi


if test x"$found_avcall" != xyes; then
  need_extern="yes"
  extern_flags="$extern_flags --with-ffcall"
fi

if test x"$found_amd" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-umfpack"
fi

if test x"$found_umfpack" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-umfpack"
fi

if test x"$found_fftw3f" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-fftw"
fi

if test x"$found_fftw3" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-fftw"
fi

if test x"$found_blas" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-blas"
fi

if test x"$found_lapack" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-lapack"
fi

if test x"$found_arpack" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-arpack"
fi

if test x"$found_z" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-matio"
fi

if test x"$found_matio" != xyes; then
   need_extern="yes"
   extern_flags="$extern_flags --with-matio"
fi

if test x"$ismingw" != xno; then
   extern_flags="$extern_flags --mingw"
fi

AM_CONDITIONAL(USECLI, test x$ismingw = xfalse)

MP_WITH_CURSES


LIBS="$LIBS $CURSES_LIB"

if test x"$need_extern" != xno; then
AC_OUTPUT([builddeps])

chmod +x builddeps

echo \
"#!/bin/sh
./builddeps $extern_flags" > build_extern

chmod +x build_extern

echo \
"**********************************************************************
One or more of the following external dependencies was not
found:
  AVCALL                    ${found_avcall}
  AMD                       ${found_amd}
  UMFPACK                   ${found_umfpack}
  FFTW3 (Single Precision)  ${found_fftw3f}
  FFTW3 (Double Precision)  ${found_fftw3}
  BLAS                      ${found_blas}
  LAPACK                    ${found_lapack}
  ARPACK                    ${found_arpack}
  ZLIB                      ${found_z}
  MATIO                     ${found_matio}
The script build_extern will attempt to build these missing
dependencies.  If it succeeds, rerun configure.  If not, install
the missing packages and try again.
**********************************************************************"
else
echo \
"**********************************************************************
All external dependencies satisfied.  Generating makefiles.
**********************************************************************"
AC_OUTPUT([Makefile src/Makefile libs/Makefile libs/libFreeMat/Makefile
		    libs/libCore/Makefile libs/libFN/Makefile
		    libs/libMex/Makefile libs/libXP/Makefile 
		    libs/libGraphics/Makefile images/Makefile
		    tools/Makefile tools/disttool/Makefile
		    tools/helpgen/Makefile makepkg])

chmod +x makepkg

fi
