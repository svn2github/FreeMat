//!
//@Module TESTDOC Documentation Process Code Test
//@@Section TEST
//@@Usage
//Does nothing particularly useful.
//@[
//  y = testdoc
//@]
  //@@Function Internals
  //In the general version of the @|min| function which is applied to
  //a single array (using the @|min(x,[],d)| or @|min(x)| syntaxes),
  //The output is computed via
  //\[
  //y(m_1,\ldots,m_{d-1},1,m_{d+1},\ldots,m_{p}) = 
  //\min_{k} x(m_1,\ldots,m_{d-1},k,m_{d+1},\ldots,m_{p}),
  //\]
  //and the output array @|n| of indices is calculated via
  //\[
  //n(m_1,\ldots,m_{d-1},1,m_{d+1},\ldots,m_{p}) = \arg
  //\min_{k} x(m_1,\ldots,m_{d-1},k,m_{d+1},\ldots,m_{p})
  //\]
  //In the two-array version (@|min(x,z)|), the single output is computed as
  //\[
  //  y(m_1,\ldots,m_{d-1},1,m_{d+1},\ldots,m_{p}) = 
  //\begin{cases}
  //  x(m_1,\ldots,m_{d-1},k,m_{d+1},\ldots,m_{p}) & x(\cdots) \leq z(\cdots) \\
  //  z(m_1,\ldots,m_{d-1},k,m_{d+1},\ldots,m_{p}) & z(\cdots) < x(\cdots).
  //\end{cases}
  //\]
//@@Example
//@<
//a = 1:3
//b = a + 3
//printf('Hello\n')
//@>
//Here is another example of using testdoc. It shows the continuity
//of the workspace between invokations.
//@<
//c = b - 2
//a = rand(3)
//[u,s,v] = svd(a)
//@>
//And now we generate a plot
//@<
//plot(rand(1,100));
//print example.png
//@>
//The resulting plot is
//@figure example
//
//Here is a long winded explanation that would take up an entire paragraph
//as it drones on and on.  But we do not care about that as we have plenty
//of free space, and why not.
//
//But then again, short is sweet, and time is money!
//!

