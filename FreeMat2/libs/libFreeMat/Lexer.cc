/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <unistd.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 58
#define YY_END_OF_BUFFER 59
static yyconst short int yy_accept[168] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   59,    5,    3,    2,
        5,    1,    4,   51,   51,   58,   50,   48,   51,   49,
       57,   56,   55,   33,   26,   55,   35,   36,   27,   29,
       55,   54,   25,   55,   55,   55,   45,   31,   32,   28,
       30,   55,    7,    7,    8,    9,   14,   58,   58,   58,
       58,   58,   10,   13,   58,   58,   44,   37,   58,    3,
        2,    1,    0,    0,    0,   47,   26,   35,   23,   16,
        0,   17,   53,   18,   22,   53,   54,   53,   53,   52,
       24,   19,   15,   20,   45,   21,    0,    0,    8,    9,

       14,    0,   11,   10,   10,   10,   10,   12,   10,   10,
       44,   43,   41,   42,   38,   40,   39,    0,   47,    0,
       53,   53,   52,   53,   53,   53,   52,    0,   53,   53,
       52,    0,    0,    0,    0,    0,    0,    0,   10,   10,
       10,   10,    0,   46,    0,    0,   34,    0,    0,   53,
        0,   53,    0,    0,    0,    0,    0,    6,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    1,    1,    7,    1,    8,    9,
       10,   11,   12,    1,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,   17,   18,
       19,   20,    1,    1,   21,   21,   21,   22,   23,   24,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       25,   26,   27,   28,   29,    1,   21,   30,   21,   31,

       32,   33,   21,   21,   21,   21,   21,   21,   21,   34,
       21,   21,   21,   35,   21,   36,   21,   21,   21,   21,
       21,   21,   37,    1,   38,   39,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[40] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    5,    1,    1,
        6,    1,    7,    8,    9,   10,   11,    1,   12,    1,
       13,   13,   13,   13,    1,    5,    1,    6,   14,   13,
       13,   13,   13,   13,   13,   13,    1,    1,    7
    } ;

static yyconst short int yy_base[206] =
    {   0,
        0,    6,   22,   58,    4,    8,   95,    0,  132,  166,
      182,  198,  234,    0,   12,   18,  184,  883,  180,  883,
      175,    0,  883,  883,    4,  883,  883,  883,  161,  883,
      883,  883,  883,  883,  883,  171,    0,  883,  883,  883,
      266,  281,  169,  141,  140,  139,    0,  883,  883,  883,
      883,  133,  883,  148,    0,  146,  883,  141,  133,    0,
        0,    0,    0,  137,    0,    0,    0,  883,    7,  136,
      883,    0,   20,   80,   79,    0,  883,    0,  883,  883,
       77,  883,  299,  883,  883,  317,    0,  883,  339,  883,
      883,  883,  883,  883,    0,  883,  371,   87,    0,   86,

      883,   79,  883,    0,    0,    0,    0,  883,    0,    0,
        0,  883,  883,  883,  883,  883,  883,   30,    0,   43,
      883,  399,  883,    0,  883,  421,  883,   70,   46,  883,
      883,   76,    0,    0,    0,   48,    0,    0,    0,    0,
        0,    0,   52,  883,   53,   71,  883,   46,   23,   47,
       13,   59,   11,  134,  140,  144,  168,  883,    1,   22,
      174,  178,  206,  273,  281,  340,  883,  454,  468,  482,
      496,  510,  524,  538,   39,  552,  557,  570,  575,  589,
       48,  603,  610,  623,  630,  643,  657,  671,  676,  689,
      702,  716,  730,  744,  758,   72,  772,  779,  792,  799,

      812,  826,  840,  854,  868
    } ;

static yyconst short int yy_def[206] =
    {   0,
      168,  168,  169,  169,  170,  170,  167,    7,  171,  171,
      172,  172,  167,   13,  173,  173,  167,  167,  167,  167,
      167,  174,  167,  167,  167,  167,  167,  167,  175,  167,
      167,  167,  167,  167,  167,  167,  176,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  177,  167,  167,  167,
      167,  167,  167,  178,  179,  167,  167,  167,  180,  181,
      182,  183,  184,  167,  185,  186,  187,  167,  188,  167,
      167,  174,  167,  167,  167,  189,  167,  176,  167,  167,
      167,  167,  167,  167,  167,  167,   42,  167,  167,  167,
      167,  167,  167,  167,  177,  167,  190,  178,  179,  167,

      167,  180,  167,  184,  191,  192,  184,  167,  193,  194,
      187,  167,  167,  167,  167,  167,  167,  167,  189,  167,
      167,  167,  167,   86,  167,  167,  167,  167,  167,  167,
      167,  195,  196,  197,  198,  199,  200,  201,  191,  192,
      193,  194,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  195,  167,  202,  203,  199,  167,  167,  167,
      204,  205,  202,  203,  204,  205,    0,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167
    } ;

static yyconst short int yy_nxt[923] =
    {   0,
      167,   19,   20,  158,   21,   73,   22,   19,   20,   26,
       21,   32,   22,   26,   26,   32,   23,   74,  154,   68,
       26,   73,   23,   25,  158,   68,  159,   26,  152,   27,
       28,  143,  144,   74,  145,   29,  113,   69,  150,  114,
      115,  116,  117,   69,  146,  147,   76,  148,  147,   97,
      158,   76,  159,  143,  144,  144,  145,  104,   30,   25,
      104,  129,  150,   26,  160,   27,   28,  130,  121,  131,
      123,   29,  146,  147,  152,  148,  130,  121,  131,  123,
      125,  136,  127,  154,  136,  129,  103,  100,   97,  125,
      120,  127,  118,   75,   30,   33,   34,   35,   34,   36,

       33,   37,   38,   39,   40,   33,   33,   33,   41,   33,
       42,   43,   44,   45,   46,   47,   47,   47,   47,   48,
       33,   49,   33,   33,   47,   47,   47,   47,   47,   47,
       47,   50,   51,   52,   26,   97,  158,   70,  159,  108,
      103,   97,  158,  101,  159,   97,  158,  100,  159,   97,
      160,   96,   54,   54,   54,   54,  160,   94,   93,   92,
      160,   54,   54,   54,   54,   54,   54,   54,   26,   97,
      158,   91,  159,   77,   75,   97,  158,   71,  159,   97,
      158,   70,  159,  167,  160,  167,   54,   54,   54,   54,
      160,  167,  167,  167,  160,   54,   54,   54,   54,   54,

       54,   54,   55,   55,   55,   55,  167,   97,  158,  167,
      159,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,  160,  167,  167,  167,  167,   55,   55,   55,
       55,   55,   55,   55,   26,   56,   57,   26,   58,   26,
       26,   59,   26,   26,   26,   26,   60,   61,   62,   63,
       64,   26,   26,   26,   63,   63,   63,   63,   26,   65,
       26,   26,   26,   63,   63,   63,   63,   63,   63,   63,
       26,   26,   66,   79,   97,  158,   80,  159,  167,   81,
       82,   83,   97,  158,  167,  159,  167,  167,  167,  160,
      167,   84,  167,   85,   86,  167,   87,  160,  167,  167,

      167,  167,   88,   89,   90,  167,  167,  167,  167,  167,
      167,   88,   89,   90,   83,  167,  167,  167,  167,  167,
      121,  122,  123,  167,  167,  167,  167,  167,  167,  121,
      122,  123,  124,  167,  167,  167,  167,  167,  125,  126,
      127,   97,  158,  167,  159,  167,  167,  125,  126,  127,
      128,  128,  167,  167,  129,  167,  160,  167,  167,  167,
      130,  167,  131,  167,  167,  167,  167,  167,  167,  130,
      167,  131,   97,  167,  167,  167,  167,  167,  132,  167,
      167,  167,  167,  133,  134,  135,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  137,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  138,
      149,  149,  167,  167,  150,  167,  167,  167,  167,  167,
      121,  167,  123,  167,  167,  167,  167,  167,  167,  121,
      167,  123,  151,  151,  167,  167,  152,  167,  167,  167,
      167,  167,  125,  167,  127,  167,  167,  167,  167,  167,
      167,  125,  167,  127,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   72,   72,
      167,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   78,   78,  167,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   95,  167,  167,   95,
       95,   98,  167,  167,  167,  167,  167,  167,  167,   98,
      167,  167,   98,   98,   99,  167,  167,   99,   99,  102,
      102,  167,  167,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  105,  105,  105,  105,  167,  167,  105,
      105,  167,  105,  105,  105,  105,  105,  106,  106,  167,
      167,  167,  106,  107,  167,  167,  167,  107,  107,  107,
      107,  107,  107,  167,  107,  107,  107,  109,  109,  167,
      167,  167,  109,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  167,  110,  110,  111,  111,  167,
      111,  167,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  119,  167,  167,  119,  119,
      136,  167,  167,  136,  167,  136,  136,  136,  136,  167,

      167,  136,  139,  167,  167,  167,  139,  139,  139,  139,
      139,  139,  167,  139,  139,  139,  140,  167,  167,  167,
      140,  140,  140,  140,  140,  140,  167,  140,  140,  140,
      141,  167,  167,  167,  141,  141,  141,  141,  141,  141,
      167,  141,  141,  141,  142,  167,  167,  167,  142,  142,
      142,  142,  142,  142,  167,  142,  142,  142,  153,  153,
      167,  167,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  155,  155,  155,  155,  167,  167,  155,  155,
      167,  155,  155,  155,  155,  155,  156,  156,  167,  167,
      167,  156,  157,  157,  157,  157,  157,  157,  157,  157,

      157,  157,  157,  157,  157,  157,  161,  161,  167,  167,
      167,  161,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  167,  162,  162,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  166,  166,
      166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
      166,  166,   17,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167
    } ;

static yyconst short int yy_chk[923] =
    {   0,
        0,    1,    1,  159,    1,   25,    1,    2,    2,    5,
        2,    5,    2,    6,   15,    6,    1,   25,  153,   15,
       16,   73,    2,    3,  160,   16,  160,    3,  151,    3,
        3,  118,  118,   73,  118,    3,   69,   15,  149,   69,
       69,   69,   69,   16,  120,  120,  175,  120,  148,  136,
      136,  175,  136,  143,  143,  145,  143,  181,    3,    4,
      181,  129,  150,    4,  136,    4,    4,  129,  150,  129,
      150,    4,  146,  146,  152,  146,  129,  150,  129,  150,
      152,  196,  152,  132,  196,  128,  102,  100,   98,  152,
       81,  152,   75,   74,    4,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    9,  154,  154,   70,  154,   64,
       59,  155,  155,   58,  155,  156,  156,   56,  156,   54,
      154,   52,    9,    9,    9,    9,  155,   46,   45,   44,
      156,    9,    9,    9,    9,    9,    9,    9,   10,  157,
      157,   43,  157,   36,   29,  161,  161,   21,  161,  162,
      162,   19,  162,   17,  157,    0,   10,   10,   10,   10,
      161,    0,    0,    0,  162,   10,   10,   10,   10,   10,

       10,   10,   11,   11,   11,   11,    0,  163,  163,    0,
      163,   11,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,  163,    0,    0,    0,    0,   12,   12,   12,
       12,   12,   12,   12,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   41,  164,  164,   41,  164,    0,   41,
       41,   41,  165,  165,    0,  165,    0,    0,    0,  164,
        0,   41,    0,   41,   42,    0,   42,  165,    0,    0,

        0,    0,   42,   42,   42,    0,    0,    0,    0,    0,
        0,   42,   42,   42,   83,    0,    0,    0,    0,    0,
       83,   83,   83,    0,    0,    0,    0,    0,    0,   83,
       83,   83,   86,    0,    0,    0,    0,    0,   86,   86,
       86,  166,  166,    0,  166,    0,    0,   86,   86,   86,
       89,   89,    0,    0,   89,    0,  166,    0,    0,    0,
       89,    0,   89,    0,    0,    0,    0,    0,    0,   89,
        0,   89,   97,    0,    0,    0,    0,    0,   97,    0,
        0,    0,    0,   97,   97,   97,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   97,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
      122,  122,    0,    0,  122,    0,    0,    0,    0,    0,
      122,    0,  122,    0,    0,    0,    0,    0,    0,  122,
        0,  122,  126,  126,    0,    0,  126,    0,    0,    0,
        0,    0,  126,    0,  126,    0,    0,    0,    0,    0,
        0,  126,    0,  126,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  169,  169,
      169,  169,  169,  169,  169,  169,  169,  169,  169,  169,
      169,  169,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  171,  171,  171,  171,

      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  174,  174,
        0,  174,  174,  174,  174,  174,  174,  174,  174,  174,
      174,  174,  176,  176,    0,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  177,    0,    0,  177,
      177,  178,    0,    0,    0,    0,    0,    0,    0,  178,
        0,    0,  178,  178,  179,    0,    0,  179,  179,  180,
      180,    0,    0,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  182,  182,  182,  182,    0,    0,  182,
      182,    0,  182,  182,  182,  182,  182,  183,  183,    0,
        0,    0,  183,  184,    0,    0,    0,  184,  184,  184,
      184,  184,  184,    0,  184,  184,  184,  185,  185,    0,
        0,    0,  185,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,    0,  186,  186,  187,  187,    0,
      187,    0,  187,  187,  187,  187,  187,  187,  187,  187,
      187,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  189,    0,    0,  189,  189,
      190,    0,    0,  190,    0,  190,  190,  190,  190,    0,

        0,  190,  191,    0,    0,    0,  191,  191,  191,  191,
      191,  191,    0,  191,  191,  191,  192,    0,    0,    0,
      192,  192,  192,  192,  192,  192,    0,  192,  192,  192,
      193,    0,    0,    0,  193,  193,  193,  193,  193,  193,
        0,  193,  193,  193,  194,    0,    0,    0,  194,  194,
      194,  194,  194,  194,    0,  194,  194,  194,  195,  195,
        0,    0,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  197,  197,  197,  197,    0,    0,  197,  197,
        0,  197,  197,  197,  197,  197,  198,  198,    0,    0,
        0,  198,  199,  199,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199,  200,  200,    0,    0,
        0,  200,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,    0,  201,  201,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../libs/libFreeMat/Lexer.ll"
#define INITIAL 0
#line 2 "../../../libs/libFreeMat/Lexer.ll"
// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

#include "AST.hpp"
#define YYSTYPE FreeMat::ASTPtr	
#include "Parser.h"
extern YYSTYPE yylval;
#include "Reserved.hpp"
#include "Exception.hpp"
#include <stdlib.h>

using namespace FreeMat;

extern int lineNumber;

reservedWordStruct ts, *p;
 
  // These are the possible contexts in which end's can occur. 
  typedef enum {
    context_for,
    context_while,
    context_if,
    context_try,
    context_switch,
    context_index,
    context_matrix,
    context_cell,
    context_error
  } end_context;

  int stackCount;
  int stateStack[1000];
  int contextCount;
  end_context contextStack[1000]; 
  end_context thisContext;
  int rettoken;
  int lineNumber;
  int continuationCount;
  bool firstToken;
  bool minusisneg;
  
  void pushState(int state) {
    stateStack[stackCount] = state;
    stackCount++;
  }
  
  int popState() {
    if (stackCount < 1)
	return INITIAL;
    stackCount--;
    return stateStack[stackCount];
  }
  
  int topState() {
    return stateStack[stackCount-1];
  }
 
  void pushContext(end_context context) { 
    contextStack[contextCount] = context;
    contextCount++;
  }

  end_context popContext(char t) {
    if (contextCount < 1) {
      switch (t) {
      case ')':
	throw Exception("unexpected ')' encountered");
      case '}':
	throw Exception("unexpected '}' encountered");
      case ']':
	throw Exception("unexpected ']' encountered");
      case 'x':
	throw Exception("unexpected 'end' encountered");
      }
    }	
    contextCount--;
    return contextStack[contextCount];
  }

  end_context topContext() {
    return contextStack[contextCount-1];
  }

#define IdentDereference 1

#define TransposeCheck 2

#define Scanning 3

#define SpecialSyntax 4

#define SpecialSyntaxStart 5

#define SpecialSyntaxArgs 6

#define str 7

#line 744 "../../../libs/libFreeMat/Lexer.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp = NULL, *yy_bp = NULL;
	register int yy_act;

#line 141 "../../../libs/libFreeMat/Lexer.ll"


	char string_buf[4095];
	char *string_buf_ptr;

#line 901 "../../../libs/libFreeMat/Lexer.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 168 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 883 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 146 "../../../libs/libFreeMat/Lexer.ll"
{
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "../../../libs/libFreeMat/Lexer.ll"
{
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 156 "../../../libs/libFreeMat/Lexer.ll"
{
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 159 "../../../libs/libFreeMat/Lexer.ll"
{
  yyless(0);
  BEGIN(SpecialSyntax);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 164 "../../../libs/libFreeMat/Lexer.ll"
{
  yyless(0);
  BEGIN(SpecialSyntaxStart);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 169 "../../../libs/libFreeMat/Lexer.ll"
{
  yyless(0);
  BEGIN(Scanning);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 174 "../../../libs/libFreeMat/Lexer.ll"
{
  /* Check for a reserved word... */
  ts.word = yytext;
  p = (reservedWordStruct*)
    bsearch(&ts,reservedWord,RESWORDCOUNT,
	    sizeof(reservedWordStruct),
	    compareReservedWord);
  if (p!=NULL) {
    yyless(0);
    BEGIN(Scanning);
  } else {
    yylval = new AST(id_node,yytext);
    BEGIN(SpecialSyntaxArgs);  
    return SPECIALCALL;
  }
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 191 "../../../libs/libFreeMat/Lexer.ll"
{
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 194 "../../../libs/libFreeMat/Lexer.ll"
{
  yylval = new AST(string_const_node,yytext);
  return STRING;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 199 "../../../libs/libFreeMat/Lexer.ll"
{
  yytext[yyleng-1] = 0;
  yylval = new AST(string_const_node,yytext+1);
  return STRING;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 205 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  BEGIN(INITIAL);
  return ENDQSTMNT;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 211 "../../../libs/libFreeMat/Lexer.ll"
{
  BEGIN(INITIAL);
  return ENDQSTMNT;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 216 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  BEGIN(INITIAL);
  return ENDSTMNT;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 222 "../../../libs/libFreeMat/Lexer.ll"
{
  return EQ;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 226 "../../../libs/libFreeMat/Lexer.ll"
{			
  return DOTTIMES;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 230 "../../../libs/libFreeMat/Lexer.ll"
{
  return DOTRDIV;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 234 "../../../libs/libFreeMat/Lexer.ll"
{
  return DOTLDIV;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 238 "../../../libs/libFreeMat/Lexer.ll"
{			
  return LE;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 242 "../../../libs/libFreeMat/Lexer.ll"
{
  return GE;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 246 "../../../libs/libFreeMat/Lexer.ll"
{
  return NE;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 250 "../../../libs/libFreeMat/Lexer.ll"
{
  return DOTPOWER;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 254 "../../../libs/libFreeMat/Lexer.ll"
{
  return DOTTRANSPOSE;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 258 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  firstToken = true;
  BEGIN(INITIAL);
  return ENDQSTMNT;
}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 265 "../../../libs/libFreeMat/Lexer.ll"
{
  firstToken = true;
  BEGIN(INITIAL);
  return ENDQSTMNT;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 271 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  firstToken = true;
  BEGIN(INITIAL);
  return ENDSTMNT;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 278 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(Scanning);
  pushContext(context_index);
  return '(';
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 284 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(Scanning);
  pushContext(context_index);
  return '{';
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 290 "../../../libs/libFreeMat/Lexer.ll"
{
  popContext(')');
  if (topState() == Scanning) {
    BEGIN(TransposeCheck);
    return ')'; 
  } else {
    BEGIN(popState());
    return REFRPAREN;
  }
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 301 "../../../libs/libFreeMat/Lexer.ll"
{
  popContext('}');
  if (topState() == Scanning) {
    BEGIN(TransposeCheck);
    return '}';
  } else {
    BEGIN(popState());
    return REFRBRACE;
  }
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 312 "../../../libs/libFreeMat/Lexer.ll"
{
  pushContext(context_matrix);
  return '[';
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 317 "../../../libs/libFreeMat/Lexer.ll"
{
  popContext(']');
  pushState(Scanning);
  BEGIN(TransposeCheck);
  return ']';
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 324 "../../../libs/libFreeMat/Lexer.ll"
{
  /* skip */
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 328 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  continuationCount++;
  firstToken = false;
  BEGIN(Scanning);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 335 "../../../libs/libFreeMat/Lexer.ll"
{
  /* skip */
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 339 "../../../libs/libFreeMat/Lexer.ll"
string_buf_ptr = string_buf; BEGIN(str);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 341 "../../../libs/libFreeMat/Lexer.ll"
{
	BEGIN(Scanning); 
	*string_buf_ptr = '\0';
	yylval = new AST(string_const_node,string_buf);
	return STRING;
	}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 348 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = 10;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 349 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = 9;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 350 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = 13;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 351 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = 8;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 352 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = 12;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 353 "../../../libs/libFreeMat/Lexer.ll"
*string_buf_ptr++ = yytext[1];
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 355 "../../../libs/libFreeMat/Lexer.ll"
{
                   char *yptr = yytext;
                   while ( *yptr )
                           *string_buf_ptr++ = *yptr++;
                 }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 361 "../../../libs/libFreeMat/Lexer.ll"
{
  /* Search for the identifier in the keyword table */
  ts.word = yytext;
  p = (reservedWordStruct*) 
    bsearch(&ts,reservedWord,RESWORDCOUNT,
	    sizeof(reservedWordStruct),
	    compareReservedWord);
  if (p==NULL) {
    BEGIN(IdentDereference);
    yylval = new AST(id_node,yytext); 
    return IDENT;
  } else {
    // Check for reserved words that trigger end-context changes
    rettoken = p->token;
    switch (p->token) {
    case SWITCH:
      pushContext(context_switch);
      break;
    case FOR:
      pushContext(context_for);
      break;
    case WHILE:
      pushContext(context_while);
      break;
    case TRY:
      pushContext(context_try);
      break;
    case IF:
      pushContext(context_if);
      break;
    case END:
      thisContext = popContext('x');
      switch (thisContext) {
      case context_for:
	rettoken = ENDFOR;
	break;
      case context_switch:
	rettoken = ENDSWITCH;
	break;
      case context_while:
	rettoken = ENDWHILE;
	break;
      case context_try:
	rettoken = ENDTRY;
	break;
      case context_if:
	rettoken = ENDIF;
	break;
      default:
	pushContext(thisContext);
	rettoken = END;
      }
    }
    yylval = new AST(reserved_node,p->ordinal);
    return rettoken;
  }
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 419 "../../../libs/libFreeMat/Lexer.ll"
{
  lineNumber++;
  continuationCount++;
  firstToken = false;
  BEGIN(IdentDereference);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 426 "../../../libs/libFreeMat/Lexer.ll"
{
  yylval = new AST(id_node,yytext+1);
  return FIELD;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 431 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(IdentDereference);
  pushContext(context_index);
  BEGIN(Scanning);
  return REFLPAREN;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 438 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(IdentDereference);
  pushContext(context_index);
  BEGIN(Scanning);
  return REFLBRACE;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 445 "../../../libs/libFreeMat/Lexer.ll"
{
  BEGIN(Scanning);
  return *yytext;
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 450 "../../../libs/libFreeMat/Lexer.ll"
{
  unput(yytext[0]);
  BEGIN(Scanning);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 455 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(YY_START);
  BEGIN(TransposeCheck);
  yylval = new AST(const_float_node,yytext);
  return NUMERIC;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 462 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(YY_START);
  BEGIN(TransposeCheck);
  yylval = new AST(const_double_node,yytext);
  return NUMERIC;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 469 "../../../libs/libFreeMat/Lexer.ll"
{
  pushState(YY_START);
  BEGIN(TransposeCheck);
  yylval = new AST(const_int_node,yytext);
  return NUMERIC;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 476 "../../../libs/libFreeMat/Lexer.ll"
{
  return *yytext;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 480 "../../../libs/libFreeMat/Lexer.ll"
{
  BEGIN(popState());
  return *yytext;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 485 "../../../libs/libFreeMat/Lexer.ll"
{
  BEGIN(popState());
  unput(yytext[0]);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 490 "../../../libs/libFreeMat/Lexer.ll"
ECHO;
	YY_BREAK
#line 1509 "../../../libs/libFreeMat/Lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IdentDereference):
case YY_STATE_EOF(TransposeCheck):
case YY_STATE_EOF(Scanning):
case YY_STATE_EOF(SpecialSyntax):
case YY_STATE_EOF(SpecialSyntaxStart):
case YY_STATE_EOF(SpecialSyntaxArgs):
case YY_STATE_EOF(str):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 168 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 168 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 167);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}



#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 490 "../../../libs/libFreeMat/Lexer.ll"


int yywrap() {
  return 1;
}

namespace FreeMat {

  void setLexBuffer(char *buffer) {
    stackCount = 0;
    stateStack[0] = 0;
    contextCount = 0;
    lineNumber = 0;
    continuationCount = 0;;
    YY_FLUSH_BUFFER;
    BEGIN(INITIAL);
    firstToken = true;
    yy_scan_string(buffer);
  }
  
  void setLexFile(FILE *fp) {
    stackCount = 0;
    stateStack[0] = 0;
    contextCount = 0;
    lineNumber = 0;
    YY_FLUSH_BUFFER;
    firstToken = true;
    BEGIN(INITIAL);
    yyrestart(fp);
  }
  
  int getContinuationCount() {
    return continuationCount;
  }
  bool lexCheckForMoreInput(int ccount) {
    // Scan the command line
    while (yylex() > 0);
    return (((contextCount > 0) && (stackCount == 0)) || (continuationCount > ccount));
  }
  
  void lexSetAdditionalInput(char *buffer) {
    continuationCount = 0;
    firstToken = true;
    yy_scan_string(buffer);
  }    
}
