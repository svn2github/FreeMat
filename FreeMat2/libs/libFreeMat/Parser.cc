/* A Bison parser, made from ../../../libs/libFreeMat/Parser.yy
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	IDENT	257
# define	NUMERIC	258
# define	ENDQSTMNT	259
# define	ENDSTMNT	260
# define	LE	261
# define	GE	262
# define	EQ	263
# define	DOTTIMES	264
# define	DOTRDIV	265
# define	DOTLDIV	266
# define	DOTPOWER	267
# define	DOTTRANSPOSE	268
# define	STRING	269
# define	SPECIALCALL	270
# define	END	271
# define	IF	272
# define	FUNCTION	273
# define	FOR	274
# define	BREAK	275
# define	WHILE	276
# define	ELSE	277
# define	ELSEIF	278
# define	SWITCH	279
# define	CASE	280
# define	OTHERWISE	281
# define	CONTINUE	282
# define	TRY	283
# define	CATCH	284
# define	FIELD	285
# define	REFLPAREN	286
# define	REFRPAREN	287
# define	REFLBRACE	288
# define	REFRBRACE	289
# define	ENDFOR	290
# define	ENDSWITCH	291
# define	ENDWHILE	292
# define	ENDTRY	293
# define	ENDIF	294
# define	PERSISTENT	295
# define	KEYBOARD	296
# define	RETURN	297
# define	VARARGIN	298
# define	VARARGOUT	299
# define	GLOBAL	300
# define	QUIT	301
# define	RETALL	302
# define	NE	303
# define	POS	304
# define	NEG	305
# define	NOT	306

#line 1 "../../../libs/libFreeMat/Parser.yy"

// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

    /*************************************************************
     * $Source$
     * $Revision$
     * $Date$
     * $Author$
     *************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "AST.hpp"
#include "WalkTree.hpp"
#include "FunctionDef.hpp"
#include "ParserInterface.hpp"
#include "Exception.hpp"

#define YYSTYPE FreeMat::ASTPtr

#define MSGBUFLEN 2048
static char msgBuffer[MSGBUFLEN];

#include "LexerInterface.hpp"

extern char* yytext;
extern int yylex(void);

extern int lineNumber;
extern int yydebug;

namespace FreeMat {
  static ASTPtr mainAST;
  static MFunctionDef *mainMDef;
  
  bool errorOccured;
  bool interactiveMode;
  static char *expectString = NULL;
  static const char *filename;

  void yyexpect(char *s) {
	expectString = s;
  }

  int yyerror(char *s) {
    char *tokdesc;
    char *tokbuffer = "unprintable";
    char buffer[256];
    int addone = 1;
    if (*yytext < 33) {
	tokdesc = tokbuffer;
	sprintf(buffer,"Ran out of input on this line.");
	tokdesc = buffer;
	addone = 0;
    } else {
        sprintf(buffer,"Current token is '%s'",yytext);
	tokdesc = buffer;
    }	
    if (expectString)
      if (!interactiveMode)
        snprintf(msgBuffer,MSGBUFLEN,"Expecting %s at line %d of file %s.  %s",
	expectString,lineNumber+addone,filename,tokdesc);
      else
        snprintf(msgBuffer,MSGBUFLEN,"Expecting %s.  %s",expectString, tokdesc);
    else
      if (!interactiveMode)
        snprintf(msgBuffer,MSGBUFLEN,"Syntax error at line %d of file %s.  %s",
	lineNumber+addone,filename,tokdesc);
      else
        snprintf(msgBuffer,MSGBUFLEN,"Syntax error at input.  %s",tokdesc);
    throw Exception(msgBuffer);
    return 0;
  }
}

using namespace FreeMat;
#define yyerror yyerror

#ifndef YYSTYPE
# define YYSTYPE int
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		298
#define	YYFLAG		-32768
#define	YYNTBASE	74

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 177)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    51,    64,
      69,    70,    57,    55,    68,    56,     2,    58,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    49,     2,
      52,    65,    53,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    66,    59,    67,    63,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    72,    50,    73,    71,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    54,    60,    61,    62
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     5,     6,    15,    16,    24,    25,
      31,    32,    37,    38,    46,    47,    54,    56,    59,    62,
      65,    70,    72,    76,    78,    81,    83,    86,    89,    92,
      95,    97,    99,   100,   102,   104,   106,   108,   110,   112,
     114,   116,   118,   120,   122,   124,   126,   128,   130,   133,
     135,   138,   139,   143,   144,   148,   150,   153,   155,   157,
     159,   161,   162,   168,   169,   173,   174,   175,   183,   185,
     187,   189,   190,   191,   193,   195,   198,   199,   200,   206,
     207,   211,   212,   213,   214,   215,   223,   224,   225,   226,
     227,   237,   238,   239,   245,   247,   248,   249,   250,   258,
     259,   266,   267,   271,   272,   274,   276,   279,   280,   284,
     285,   289,   290,   291,   296,   305,   311,   312,   317,   319,
     320,   325,   326,   331,   332,   337,   338,   343,   344,   349,
     350,   355,   356,   361,   362,   367,   368,   373,   374,   379,
     380,   385,   386,   391,   392,   397,   398,   403,   404,   409,
     410,   415,   416,   420,   421,   425,   426,   430,   431,   436,
     437,   442,   445,   448,   449,   450,   456,   458,   460,   462,
     464,   468,   473,   478,   484,   487,   491,   496,   501,   507,
     510,   512,   515,   519,   523,   525,   527,   529,   534,   537,
     539,   543,   545,   549,   551,   555,   557,   559,   561,   562,
     564
};
static const short yyrhs[] =
{
      86,     0,    82,     0,     0,     0,    19,    83,     3,    32,
      84,    33,    76,    86,     0,     0,    19,     3,    32,    84,
      33,    77,    86,     0,     0,    19,    83,     3,    78,    86,
       0,     0,    19,     3,    79,    86,     0,     0,    19,    83,
       3,    32,    33,    80,    86,     0,     0,    19,     3,    32,
      33,    81,    86,     0,    75,     0,    82,    75,     0,    45,
      65,     0,     3,    65,     0,    66,    84,    67,    65,     0,
      85,     0,    84,    68,    85,     0,     3,     0,    51,     3,
       0,    87,     0,    86,    87,     0,    88,     5,     0,    88,
       6,     0,    88,    68,     0,   139,     0,   142,     0,     0,
     141,     0,   114,     0,    99,     0,    98,     0,   125,     0,
     129,     0,   104,     0,   100,     0,    97,     0,    96,     0,
      93,     0,    91,     0,    89,     0,    47,     0,    48,     0,
      16,    90,     0,    15,     0,    90,    15,     0,     0,    41,
      92,    95,     0,     0,    46,    94,    95,     0,     3,     0,
      95,     3,     0,    43,     0,    42,     0,    28,     0,    21,
       0,     0,    29,   101,    86,   102,    39,     0,     0,    30,
     103,    86,     0,     0,     0,    25,   105,   142,   106,   107,
     112,    37,     0,    68,     0,     6,     0,     5,     0,     0,
       0,   108,     0,   109,     0,   108,   109,     0,     0,     0,
      26,   110,   142,   111,    86,     0,     0,    27,   113,    86,
       0,     0,     0,     0,     0,    20,   115,   118,   116,    86,
     117,    36,     0,     0,     0,     0,     0,    69,   119,     3,
     120,    65,   121,   142,   122,    70,     0,     0,     0,     3,
     123,    65,   124,   142,     0,     3,     0,     0,     0,     0,
      22,   126,   142,   127,    86,   128,    38,     0,     0,    18,
     130,   131,   133,   137,    40,     0,     0,   142,   132,    86,
       0,     0,   134,     0,   135,     0,   134,   135,     0,     0,
      24,   136,   131,     0,     0,    23,   138,    86,     0,     0,
       0,   168,    65,   140,   142,     0,    66,   173,    67,    65,
       3,    32,   171,    33,     0,    66,   173,    67,    65,     3,
       0,     0,   142,    49,   143,   142,     0,   167,     0,     0,
     142,    55,   144,   142,     0,     0,   142,    56,   145,   142,
       0,     0,   142,    57,   146,   142,     0,     0,   142,    58,
     147,   142,     0,     0,   142,    59,   148,   142,     0,     0,
     142,    50,   149,   142,     0,     0,   142,    51,   150,   142,
       0,     0,   142,    52,   151,   142,     0,     0,   142,     7,
     152,   142,     0,     0,   142,    53,   153,   142,     0,     0,
     142,     8,   154,   142,     0,     0,   142,     9,   155,   142,
       0,     0,   142,    54,   156,   142,     0,     0,   142,    10,
     157,   142,     0,     0,   142,    11,   158,   142,     0,     0,
     142,    12,   159,   142,     0,     0,    61,   160,   142,     0,
       0,    60,   161,   142,     0,     0,    71,   162,   142,     0,
       0,   142,    63,   163,   142,     0,     0,   142,    13,   164,
     142,     0,   142,    64,     0,   142,    14,     0,     0,     0,
      69,   165,   142,   166,    70,     0,     4,     0,    15,     0,
      17,     0,   168,     0,    66,   173,    67,     0,    66,   174,
     173,    67,     0,    66,   173,   174,    67,     0,    66,   174,
     173,   174,    67,     0,    66,    67,     0,    72,   172,    73,
       0,    72,   174,   172,    73,     0,    72,   172,   174,    73,
       0,    72,   174,   172,   174,    73,     0,    72,    73,     0,
       3,     0,   168,   169,     0,    32,   171,    33,     0,    34,
     171,    35,     0,    31,     0,   142,     0,    49,     0,    58,
       3,    65,   142,     0,    58,     3,     0,   170,     0,   171,
      68,   170,     0,   176,     0,   172,   174,   176,     0,   176,
       0,   173,   174,   176,     0,     6,     0,     5,     0,    68,
       0,     0,   142,     0,   176,   175,   142,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   127,   128,   129,   132,   132,   149,   149,   164,   164,
     179,   179,   193,   193,   208,   208,   225,   226,   230,   231,
     232,   236,   238,   241,   242,   252,   253,   257,   267,   276,
     287,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   304,   307,   311,
     312,   316,   316,   321,   321,   326,   327,   331,   335,   339,
     342,   346,   346,   352,   352,   354,   357,   357,   366,   367,
     367,   367,   370,   371,   375,   378,   384,   384,   384,   392,
     392,   396,   402,   402,   402,   402,   411,   411,   411,   411,
     411,   416,   416,   416,   419,   423,   423,   423,   423,   432,
     432,   440,   440,   447,   448,   452,   455,   461,   461,   467,
     467,   471,   475,   475,   480,   484,   491,   491,   493,   494,
     494,   495,   495,   496,   496,   497,   497,   498,   498,   499,
     499,   500,   500,   501,   501,   502,   502,   503,   503,   504,
     504,   505,   505,   506,   506,   507,   507,   508,   508,   509,
     509,   510,   510,   511,   511,   512,   512,   513,   513,   514,
     514,   515,   516,   517,   517,   517,   521,   523,   524,   525,
     526,   527,   528,   529,   530,   531,   532,   533,   534,   535,
     538,   540,   543,   545,   546,   549,   551,   552,   553,   556,
     557,   561,   562,   566,   567,   571,   572,   575,   576,   579,
     580
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "IDENT", "NUMERIC", "ENDQSTMNT", "ENDSTMNT", 
  "LE", "GE", "EQ", "DOTTIMES", "DOTRDIV", "DOTLDIV", "DOTPOWER", 
  "DOTTRANSPOSE", "STRING", "SPECIALCALL", "END", "IF", "FUNCTION", "FOR", 
  "BREAK", "WHILE", "ELSE", "ELSEIF", "SWITCH", "CASE", "OTHERWISE", 
  "CONTINUE", "TRY", "CATCH", "FIELD", "REFLPAREN", "REFRPAREN", 
  "REFLBRACE", "REFRBRACE", "ENDFOR", "ENDSWITCH", "ENDWHILE", "ENDTRY", 
  "ENDIF", "PERSISTENT", "KEYBOARD", "RETURN", "VARARGIN", "VARARGOUT", 
  "GLOBAL", "QUIT", "RETALL", "':'", "'|'", "'&'", "'<'", "'>'", "NE", 
  "'+'", "'-'", "'*'", "'/'", "'\\\\'", "POS", "NEG", "NOT", "'^'", 
  "'\\''", "'='", "'['", "']'", "','", "'('", "')'", "'~'", "'{'", "'}'", 
  "program", "functionDef", "@1", "@2", "@3", "@4", "@5", "@6", 
  "functionDefList", "returnDeclaration", "argumentList", "argument", 
  "statementList", "statement", "statementType", "specialSyntaxStatement", 
  "stringList", "persistentStatement", "@7", "globalStatement", "@8", 
  "identList", "returnStatement", "keyboardStatement", 
  "continueStatement", "breakStatement", "tryStatement", "@9", 
  "optionalCatch", "@10", "switchStatement", "@11", 
  "optionalEndStatement", "caseBlock", "caseList", "caseStatement", "@12", 
  "@13", "otherwiseClause", "@14", "forStatement", "@15", "@16", "@17", 
  "forIndexExpression", "@18", "@19", "@20", "@21", "@22", "@23", 
  "whileStatement", "@24", "@25", "@26", "ifStatement", "@27", 
  "conditionedStatement", "@28", "elseIfBlock", "elseIfStatementList", 
  "elseIfStatement", "@29", "elseStatement", "@30", "assignmentStatement", 
  "@31", "multiFunctionCall", "expr", "@32", "@33", "@34", "@35", "@36", 
  "@37", "@38", "@39", "@40", "@41", "@42", "@43", "@44", "@45", "@46", 
  "@47", "@48", "@49", "@50", "@51", "@52", "@53", "@54", "@55", 
  "terminal", "symbRefList", "symbRef", "indexElement", "indexList", 
  "cellDef", "matrixDef", "rowSeperator", "columnSep", "rowDef", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    74,    74,    74,    76,    75,    77,    75,    78,    75,
      79,    75,    80,    75,    81,    75,    82,    82,    83,    83,
      83,    84,    84,    85,    85,    86,    86,    87,    87,    87,
      88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
      88,    88,    88,    88,    88,    88,    88,    88,    89,    90,
      90,    92,    91,    94,    93,    95,    95,    96,    97,    98,
      99,   101,   100,   103,   102,   102,   105,   104,   106,   106,
     106,   106,   107,   107,   108,   108,   110,   111,   109,   113,
     112,   112,   115,   116,   117,   114,   119,   120,   121,   122,
     118,   123,   124,   118,   118,   126,   127,   128,   125,   130,
     129,   132,   131,   133,   133,   134,   134,   136,   135,   138,
     137,   137,   140,   139,   141,   141,   143,   142,   142,   144,
     142,   145,   142,   146,   142,   147,   142,   148,   142,   149,
     142,   150,   142,   151,   142,   152,   142,   153,   142,   154,
     142,   155,   142,   156,   142,   157,   142,   158,   142,   159,
     142,   160,   142,   161,   142,   162,   142,   163,   142,   164,
     142,   142,   142,   165,   166,   142,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
     168,   168,   169,   169,   169,   170,   170,   170,   170,   171,
     171,   172,   172,   173,   173,   174,   174,   175,   175,   176,
     176
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     0,     0,     8,     0,     7,     0,     5,
       0,     4,     0,     7,     0,     6,     1,     2,     2,     2,
       4,     1,     3,     1,     2,     1,     2,     2,     2,     2,
       1,     1,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       2,     0,     3,     0,     3,     1,     2,     1,     1,     1,
       1,     0,     5,     0,     3,     0,     0,     7,     1,     1,
       1,     0,     0,     1,     1,     2,     0,     0,     5,     0,
       3,     0,     0,     0,     0,     7,     0,     0,     0,     0,
       9,     0,     0,     5,     1,     0,     0,     0,     7,     0,
       6,     0,     3,     0,     1,     1,     2,     0,     3,     0,
       3,     0,     0,     4,     8,     5,     0,     4,     1,     0,
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     3,     0,     3,     0,     3,     0,     4,     0,
       4,     2,     2,     0,     0,     5,     1,     1,     1,     1,
       3,     4,     4,     5,     2,     3,     4,     4,     5,     2,
       1,     2,     3,     3,     1,     1,     1,     4,     2,     1,
       3,     1,     3,     1,     3,     1,     1,     1,     0,     1,
       3
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
      32,   180,   166,   167,     0,   168,    99,     0,    82,    60,
      95,    66,    59,    61,    51,    58,    57,    53,    46,    47,
     153,   151,     0,   163,   155,     0,    16,     2,    32,    25,
       0,    45,    44,    43,    42,    41,    36,    35,    40,    39,
      34,    37,    38,    30,    33,    31,   118,   169,    49,    48,
       0,    10,     0,     0,     0,     0,     0,     0,    32,     0,
       0,     0,     0,   196,   195,     0,   174,   199,   169,     0,
       0,   198,     0,     0,   179,     0,     0,   198,    17,    26,
      27,    28,    29,   135,   139,   141,   145,   147,   149,   159,
     162,   116,   129,   131,   133,   137,   143,   119,   121,   123,
     125,   127,   157,   161,   184,     0,     0,   112,   181,    50,
     103,   101,     0,    19,    32,    18,    23,     0,     0,    21,
       8,    94,    86,    83,    96,    71,    32,    55,    52,    54,
     154,   152,     0,   170,     0,     0,   197,     0,   164,   156,
     175,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   186,     0,   185,   189,     0,     0,     0,   107,
     111,   104,   105,    32,    14,     0,    32,    24,     0,     0,
       0,    32,     0,     0,    32,    32,    70,    69,    68,    72,
      63,     0,    56,   170,     0,   172,   198,   171,     0,   200,
       0,   177,   198,   176,     0,   136,   140,   142,   146,   148,
     150,   160,   117,   130,   132,   134,   138,   144,   120,   122,
     124,   126,   128,   158,   188,   182,     0,   183,   113,     0,
     109,     0,   106,    32,    32,     6,    20,    22,    12,     0,
      32,    92,    87,    32,    32,    76,    81,    73,    74,    32,
      62,   115,   173,   165,   178,     0,   190,   108,    32,   100,
      32,    32,    32,     4,     0,     0,     0,     0,     0,    79,
       0,    75,    32,     0,   187,    32,    32,    32,    32,    93,
      88,    85,    98,    77,    32,    67,     0,    32,     0,    32,
      32,   114,    89,    32,     0,    90,     0,     0,     0
};

static const short yydefgoto[] =
{
     296,    26,   278,   261,   181,   114,   262,   234,    27,    54,
     118,   119,    28,    29,    30,    31,    49,    32,    59,    33,
      60,   128,    34,    35,    36,    37,    38,    58,   191,   249,
      39,    57,   189,   246,   247,   248,   268,   289,   270,   284,
      40,    55,   184,   266,   123,   183,   265,   288,   294,   182,
     264,    41,    56,   185,   267,    42,    50,   110,   173,   170,
     171,   172,   229,   231,   258,    43,   168,    44,    45,   150,
     156,   157,   158,   159,   160,   151,   152,   153,   143,   154,
     144,   145,   155,   146,   147,   148,    62,    61,    73,   161,
     149,    72,   200,    46,    68,   108,   165,   166,    75,    69,
      70,   137,    71
};

static const short yypact[] =
{
     345,-32768,-32768,-32768,    -7,-32768,-32768,    33,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  1173,-32768,-32768,    14,-32768,    15,   658,-32768,
      16,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  1292,-32768,   138,-32768,    24,
    1248,   101,   -25,    22,    42,    12,  1248,  1248,  1139,    47,
      47,  1248,  1248,-32768,-32768,  1173,-32768,  1292,   146,    21,
    1248,     1,  1248,  1248,-32768,     6,  1248,    -2,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,  1189,  1189,-32768,-32768,-32768,
      27,  1292,    59,-32768,  1139,-32768,-32768,    51,   -30,-32768,
      25,    38,-32768,-32768,  1292,  1316,   835,-32768,   106,   106,
      93,    93,    54,    46,  1209,    88,-32768,  1248,  1292,    93,
  -32768,    29,    18,  1248,  1248,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,  1248,
    1248,  1248,-32768,   110,  1292,-32768,    49,   136,  1248,-32768,
      95,    27,-32768,  1139,-32768,    96,   379,-32768,    55,    22,
     128,  1139,   117,   113,  1139,  1139,-32768,-32768,-32768,    98,
  -32768,    80,-32768,-32768,   157,-32768,    37,-32768,  1226,  1292,
     105,-32768,     4,-32768,   150,  1159,  1159,  1159,    93,    93,
      93,    94,  1350,  1378,  1408,  1159,  1159,  1159,   757,   757,
      93,    93,    93,    94,   121,-32768,  1189,-32768,  1292,  1248,
  -32768,   148,-32768,   717,  1139,-32768,-32768,-32768,-32768,   129,
     438,-32768,-32768,   869,   928,-32768,   163,    98,-32768,  1139,
  -32768,   159,-32768,-32768,-32768,  1248,-32768,-32768,  1139,-32768,
     472,  1139,  1139,-32768,  1248,   127,   158,   161,  1248,-32768,
     164,-32768,   987,  1189,  1292,  1021,   531,   565,  1139,  1292,
  -32768,-32768,-32768,  1292,  1139,-32768,   130,   624,  1248,  1139,
    1080,-32768,  1292,   776,   126,-32768,   200,   202,-32768
};

static const short yypgoto[] =
{
  -32768,   178,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    -110,    28,    69,    48,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   149,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,   -41,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   -21,-32768,-32768,
  -32768,    41,-32768,-32768,-32768,-32768,-32768,-32768,    -9,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,     0,-32768,   -13,  -105,   139,   -35,
     -20,-32768,   -11
};


#define	YYLAST		1472


static const short yytable[] =
{
      47,   167,   175,  -191,  -191,    76,  -193,  -193,    48,  -192,
    -192,    63,    64,    67,    77,   121,    67,     1,     2,    63,
      64,    80,    81,    63,    64,   116,    63,    64,    47,     3,
     132,     5,     1,     2,     7,   135,    51,   178,   179,   109,
     115,   111,  -194,  -194,     3,   120,     5,   124,   125,   134,
     127,   169,   130,   131,   177,   141,    67,   180,    47,    63,
      64,    67,   116,   138,   139,    77,   136,    67,  -193,   136,
     239,  -191,   136,   117,    20,    21,    79,  -192,    52,   140,
      65,   122,   225,    23,    82,    24,    25,    74,   133,    20,
      21,   203,   174,    63,    64,    65,   164,   164,    23,    53,
      24,    25,   201,   -91,  -194,   136,    89,    90,    90,   192,
     117,   194,   134,   224,    47,   198,   242,   226,   230,   250,
     236,   193,   204,   196,   245,    67,    47,   126,   199,   235,
     202,   116,    67,   112,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,     1,     2,   197,   102,   103,   103,   228,
     251,   238,   263,   291,   179,     3,   113,     5,   286,   104,
     105,   227,   106,    47,    79,   253,    47,   104,   105,   117,
     106,    47,   241,   176,    47,    47,   255,   196,   259,    67,
     269,   273,   280,   202,   281,    67,   295,   179,   226,   282,
     297,   285,   298,   107,   226,    78,   271,   237,   257,   129,
      20,    21,   232,   256,     0,   142,    65,   164,     0,    23,
     111,    24,    25,   254,    79,     0,     0,     0,     0,     0,
       0,     0,     0,    47,    47,     0,     0,     0,     0,     0,
      47,     0,   233,    47,    47,     0,   274,     0,     0,    47,
     240,     0,     0,   243,   244,   279,     0,     0,    47,   283,
      47,    47,    47,     0,   164,     0,     0,     0,     0,     0,
       0,     0,    47,     0,     0,    47,    47,    47,    47,   292,
       0,    79,     0,     0,    47,     0,     0,    47,    79,    47,
      47,    79,    79,    47,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   260,     0,     0,     0,     0,    79,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   272,     0,
      79,     0,     0,    79,    79,    79,     0,   275,     0,     0,
     276,   277,     0,     0,     0,    79,     0,     0,    79,     0,
       0,    79,     0,     0,     0,    -3,     0,   287,     1,     2,
       0,     0,     0,   290,     0,     0,     0,     0,   293,     0,
       3,     4,     5,     6,     7,     8,     9,    10,     0,     0,
      11,     0,     0,    12,    13,     0,     0,     0,     0,   -11,
       0,     0,     1,     2,     0,     0,    14,    15,    16,     0,
       0,    17,    18,    19,     3,     4,     5,     6,   -11,     8,
       9,    10,     0,     0,    11,    20,    21,    12,    13,     0,
       0,    22,     0,     0,    23,     0,    24,    25,     0,     0,
      14,    15,    16,     0,     0,    17,    18,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    -9,    20,
      21,     1,     2,     0,     0,    22,     0,     0,    23,     0,
      24,    25,     0,     3,     4,     5,     6,    -9,     8,     9,
      10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
       0,     0,   -15,     0,     0,     1,     2,     0,     0,    14,
      15,    16,     0,     0,    17,    18,    19,     3,     4,     5,
       6,   -15,     8,     9,    10,     0,     0,    11,    20,    21,
      12,    13,     0,     0,    22,     0,     0,    23,     0,    24,
      25,     0,     0,    14,    15,    16,     0,     0,    17,    18,
      19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    -7,    20,    21,     1,     2,     0,     0,    22,     0,
       0,    23,     0,    24,    25,     0,     3,     4,     5,     6,
      -7,     8,     9,    10,     0,     0,    11,     0,     0,    12,
      13,     0,     0,     0,     0,   -13,     0,     0,     1,     2,
       0,     0,    14,    15,    16,     0,     0,    17,    18,    19,
       3,     4,     5,     6,   -13,     8,     9,    10,     0,     0,
      11,    20,    21,    12,    13,     0,     0,    22,     0,     0,
      23,     0,    24,    25,     0,     0,    14,    15,    16,     0,
       0,    17,    18,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    -5,    20,    21,     1,     2,     0,
       0,    22,     0,     0,    23,     0,    24,    25,     0,     3,
       4,     5,     6,    -5,     8,     9,    10,     0,     0,    11,
       0,     0,    12,    13,     0,     0,     0,     0,    -1,     0,
       0,     1,     2,     0,     0,    14,    15,    16,     0,     0,
      17,    18,    19,     3,     4,     5,     6,     0,     8,     9,
      10,     0,     0,    11,    20,    21,    12,    13,     0,     0,
      22,     0,     0,    23,     0,    24,    25,     0,     0,    14,
      15,    16,     0,     0,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
       1,     2,     0,     0,    22,     0,     0,    23,     0,    24,
      25,     0,     3,     4,     5,     6,     0,     8,     9,    10,
    -102,  -102,    11,     0,     0,    12,    13,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  -102,    14,    15,
      16,     0,     0,    17,    18,    19,     0,    86,    87,    88,
      89,    90,     0,     0,     0,     0,     0,    20,    21,     1,
       2,     0,     0,    22,     0,     0,    23,     0,    24,    25,
       0,     3,     4,     5,     6,     0,     8,     9,    10,     0,
       0,    11,   -78,   -78,    12,    13,     0,     0,     0,     0,
       0,     0,     0,   -78,    99,   100,   101,    14,    15,    16,
     102,   103,    17,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    20,    21,     1,     2,
       0,     0,    22,     0,     0,    23,     0,    24,    25,     0,
       3,     4,     5,     6,     0,     8,     9,    10,     0,     0,
      11,     0,     0,    12,    13,   190,     0,     0,     0,     0,
       0,     0,     1,     2,   -65,     0,    14,    15,    16,     0,
       0,    17,    18,    19,     3,     4,     5,     6,     0,     8,
       9,    10,     0,     0,    11,    20,    21,    12,    13,     0,
       0,    22,     0,     0,    23,   -84,    24,    25,     0,     0,
      14,    15,    16,     0,     0,    17,    18,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
      21,     1,     2,     0,     0,    22,     0,     0,    23,     0,
      24,    25,     0,     3,     4,     5,     6,     0,     8,     9,
      10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
       0,     0,     0,     0,     0,     0,   -97,     0,     0,    14,
      15,    16,     0,     0,    17,    18,    19,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
       1,     2,     0,     0,    22,     0,     0,    23,     0,    24,
      25,     0,     3,     4,     5,     6,     0,     8,     9,    10,
       0,     0,    11,     0,     0,    12,    13,     0,     0,     0,
       0,     0,     0,     0,     1,     2,   -64,     0,    14,    15,
      16,     0,     0,    17,    18,    19,     3,     4,     5,     6,
       0,     8,     9,    10,     0,     0,    11,    20,    21,    12,
      13,     0,     0,    22,     0,     0,    23,     0,    24,    25,
       0,  -110,    14,    15,    16,     0,     0,    17,    18,    19,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    20,    21,     1,     2,     0,     0,    22,     0,     0,
      23,     0,    24,    25,     0,     3,     4,     5,     6,     0,
       8,     9,    10,     0,     0,    11,     0,     0,    12,    13,
       0,     0,     0,     0,     0,     0,     0,   -80,     0,     0,
       0,    14,    15,    16,     0,     0,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      20,    21,     1,     2,     0,     0,    22,     0,     0,    23,
       0,    24,    25,     0,     3,     4,     5,     6,     0,     8,
       9,    10,     0,     0,    11,     0,     0,    12,    13,    86,
      87,    88,    89,    90,     0,     0,     1,     2,    63,    64,
      14,    15,    16,     0,     0,    17,    18,    19,     3,     0,
       5,     0,     1,     2,     0,     0,     0,     0,     0,    20,
      21,     0,     0,     0,     3,    22,     5,     0,    23,     0,
      24,    25,     1,     2,    97,    98,    99,   100,   101,     0,
       0,     0,   102,   103,     3,     0,     5,     0,     0,     1,
       2,     0,     0,    20,    21,     0,     0,     0,   162,    65,
      66,     3,    23,     5,    24,    25,     0,   163,     0,    20,
      21,     1,     2,     0,     0,    65,     0,     0,    23,     0,
      24,    25,     0,     3,     0,     5,     0,     0,     0,    20,
      21,     0,     0,     0,     0,    65,   195,     0,    23,     0,
      24,    25,     0,     0,     0,     0,    20,    21,     0,     0,
       0,     0,    65,   252,     0,    23,     0,    24,    25,    83,
      84,    85,    86,    87,    88,    89,    90,     0,    20,    21,
       0,     0,     0,     0,    65,     0,     0,    23,     0,    24,
      25,   186,   187,    83,    84,    85,    86,    87,    88,    89,
      90,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,     0,     0,     0,   102,   103,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,     0,     0,     0,   102,
     103,     0,     0,     0,   188,    83,    84,    85,    86,    87,
      88,    89,    90,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
       0,     0,     0,   102,   103,    83,    84,    85,    86,    87,
      88,    89,    90,     0,     0,     0,     0,     0,     0,    93,
      94,    95,    96,    97,    98,    99,   100,   101,     0,     0,
       0,   102,   103,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,     0,
       0,   102,   103
};

static const short yycheck[] =
{
       0,   106,   112,     5,     6,    25,     5,     6,    15,     5,
       6,     5,     6,    22,    25,     3,    25,     3,     4,     5,
       6,     5,     6,     5,     6,     3,     5,     6,    28,    15,
      65,    17,     3,     4,    19,    70,     3,    67,    68,    15,
      65,    50,     5,     6,    15,     3,    17,    56,    57,    69,
       3,    24,    61,    62,     3,    75,    65,    32,    58,     5,
       6,    70,     3,    72,    73,    76,    68,    76,    67,    68,
     180,    73,    68,    51,    60,    61,    28,    73,    45,    73,
      66,    69,    33,    69,    68,    71,    72,    73,    67,    60,
      61,    73,    33,     5,     6,    66,   105,   106,    69,    66,
      71,    72,    73,    65,    67,    68,    13,    14,    14,     3,
      51,    65,   132,     3,   114,   135,     3,    68,    23,    39,
      65,    67,   142,   134,    26,   134,   126,    58,   137,    33,
     141,     3,   141,    32,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,     3,     4,    67,    63,    64,    64,   168,
       3,    33,    33,    33,    68,    15,    65,    17,   273,    31,
      32,    35,    34,   173,   126,    70,   176,    31,    32,    51,
      34,   181,    65,   114,   184,   185,    65,   198,    40,   198,
      27,    32,    65,   204,    36,   204,    70,    68,    68,    38,
       0,    37,     0,    65,    68,    27,   247,   179,   229,    60,
      60,    61,   171,   226,    -1,    76,    66,   226,    -1,    69,
     229,    71,    72,    73,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   233,   234,    -1,    -1,    -1,    -1,    -1,
     240,    -1,   173,   243,   244,    -1,   255,    -1,    -1,   249,
     181,    -1,    -1,   184,   185,   264,    -1,    -1,   258,   268,
     260,   261,   262,    -1,   273,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   272,    -1,    -1,   275,   276,   277,   278,   288,
      -1,   233,    -1,    -1,   284,    -1,    -1,   287,   240,   289,
     290,   243,   244,   293,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,   260,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   249,    -1,
     272,    -1,    -1,   275,   276,   277,    -1,   258,    -1,    -1,
     261,   262,    -1,    -1,    -1,   287,    -1,    -1,   290,    -1,
      -1,   293,    -1,    -1,    -1,     0,    -1,   278,     3,     4,
      -1,    -1,    -1,   284,    -1,    -1,    -1,    -1,   289,    -1,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,     0,
      -1,    -1,     3,     4,    -1,    -1,    41,    42,    43,    -1,
      -1,    46,    47,    48,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    25,    60,    61,    28,    29,    -1,
      -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,    -1,
      41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    60,
      61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,
      71,    72,    -1,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,     0,    -1,    -1,     3,     4,    -1,    -1,    41,
      42,    43,    -1,    -1,    46,    47,    48,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    25,    60,    61,
      28,    29,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
      72,    -1,    -1,    41,    42,    43,    -1,    -1,    46,    47,
      48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    60,    61,     3,     4,    -1,    -1,    66,    -1,
      -1,    69,    -1,    71,    72,    -1,    15,    16,    17,    18,
      19,    20,    21,    22,    -1,    -1,    25,    -1,    -1,    28,
      29,    -1,    -1,    -1,    -1,     0,    -1,    -1,     3,     4,
      -1,    -1,    41,    42,    43,    -1,    -1,    46,    47,    48,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
      25,    60,    61,    28,    29,    -1,    -1,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    -1,    41,    42,    43,    -1,
      -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     0,    60,    61,     3,     4,    -1,
      -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    25,
      -1,    -1,    28,    29,    -1,    -1,    -1,    -1,     0,    -1,
      -1,     3,     4,    -1,    -1,    41,    42,    43,    -1,    -1,
      46,    47,    48,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,    -1,    25,    60,    61,    28,    29,    -1,    -1,
      66,    -1,    -1,    69,    -1,    71,    72,    -1,    -1,    41,
      42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
       3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
      72,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
      23,    24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
      43,    -1,    -1,    46,    47,    48,    -1,    10,    11,    12,
      13,    14,    -1,    -1,    -1,    -1,    -1,    60,    61,     3,
       4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,
      -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
      -1,    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    57,    58,    59,    41,    42,    43,
      63,    64,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,     3,     4,
      -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
      15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
      25,    -1,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,    39,    -1,    41,    42,    43,    -1,
      -1,    46,    47,    48,    15,    16,    17,    18,    -1,    20,
      21,    22,    -1,    -1,    25,    60,    61,    28,    29,    -1,
      -1,    66,    -1,    -1,    69,    36,    71,    72,    -1,    -1,
      41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
      61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,
      71,    72,    -1,    15,    16,    17,    18,    -1,    20,    21,
      22,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
       3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
      72,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
      -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,    39,    -1,    41,    42,
      43,    -1,    -1,    46,    47,    48,    15,    16,    17,    18,
      -1,    20,    21,    22,    -1,    -1,    25,    60,    61,    28,
      29,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,
      -1,    40,    41,    42,    43,    -1,    -1,    46,    47,    48,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,     3,     4,    -1,    -1,    66,    -1,    -1,
      69,    -1,    71,    72,    -1,    15,    16,    17,    18,    -1,
      20,    21,    22,    -1,    -1,    25,    -1,    -1,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      60,    61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,
      -1,    71,    72,    -1,    15,    16,    17,    18,    -1,    20,
      21,    22,    -1,    -1,    25,    -1,    -1,    28,    29,    10,
      11,    12,    13,    14,    -1,    -1,     3,     4,     5,     6,
      41,    42,    43,    -1,    -1,    46,    47,    48,    15,    -1,
      17,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,    60,
      61,    -1,    -1,    -1,    15,    66,    17,    -1,    69,    -1,
      71,    72,     3,     4,    55,    56,    57,    58,    59,    -1,
      -1,    -1,    63,    64,    15,    -1,    17,    -1,    -1,     3,
       4,    -1,    -1,    60,    61,    -1,    -1,    -1,    49,    66,
      67,    15,    69,    17,    71,    72,    -1,    58,    -1,    60,
      61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,
      71,    72,    -1,    15,    -1,    17,    -1,    -1,    -1,    60,
      61,    -1,    -1,    -1,    -1,    66,    67,    -1,    69,    -1,
      71,    72,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,
      -1,    -1,    66,    67,    -1,    69,    -1,    71,    72,     7,
       8,     9,    10,    11,    12,    13,    14,    -1,    60,    61,
      -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
      72,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    -1,    -1,    63,    64,     7,     8,     9,
      10,    11,    12,    13,    14,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    -1,    63,
      64,    -1,    -1,    -1,    68,     7,     8,     9,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    -1,    63,    64,     7,     8,     9,    10,    11,
      12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
      -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
      -1,    63,    64
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 128 "../../../libs/libFreeMat/Parser.yy"
{mainAST = yyvsp[0];}
    break;
case 4:
#line 133 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 5:
#line 134 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-6]->toStringList();
     r->name = yyvsp[-5]->text;
     r->arguments = yyvsp[-3]->toStringList();
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 6:
#line 150 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 7:
#line 150 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-5]->text;
     r->arguments = yyvsp[-3]->toStringList();
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 8:
#line 165 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 9:
#line 165 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-3]->toStringList();
     r->name = yyvsp[-2]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 10:
#line 180 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 11:
#line 180 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-2]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 12:
#line 194 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 13:
#line 194 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-5]->toStringList();
     r->name = yyvsp[-4]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 14:
#line 209 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 15:
#line 209 "../../../libs/libFreeMat/Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-4]->text;
     r->code = yyvsp[-1];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   }
    break;
case 18:
#line 231 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 19:
#line 232 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 20:
#line 233 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 21:
#line 237 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[0];}
    break;
case 22:
#line 238 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);}
    break;
case 24:
#line 242 "../../../libs/libFreeMat/Parser.yy"
{
	yyval = yyvsp[0];
	char *b = (char*) malloc(strlen(yyvsp[0]->text)+2);
	b[0] = '&';
	strcpy(b+1,yyvsp[0]->text);
	yyval->text = b;
  }
    break;
case 25:
#line 253 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_BLOCK,yyvsp[0]);}
    break;
case 26:
#line 254 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);}
    break;
case 27:
#line 258 "../../../libs/libFreeMat/Parser.yy"
{
  	    yyval = new AST(OP_QSTATEMENT,NULL);
	    if (!interactiveMode) {
	      snprintf(msgBuffer,MSGBUFLEN,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 }
    break;
case 28:
#line 267 "../../../libs/libFreeMat/Parser.yy"
{
	    yyval = new AST(OP_RSTATEMENT,NULL);
	    if (!interactiveMode) {
	      snprintf(msgBuffer,MSGBUFLEN,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 }
    break;
case 29:
#line 276 "../../../libs/libFreeMat/Parser.yy"
{
	    yyval = new AST(OP_RSTATEMENT,NULL);
	    if (!interactiveMode) {
	      snprintf(msgBuffer,MSGBUFLEN,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 }
    break;
case 32:
#line 290 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(null_node,"");}
    break;
case 48:
#line 308 "../../../libs/libFreeMat/Parser.yy"
{yyvsp[-1]->addChild(yyvsp[0]); yyval = new AST(OP_SCALL,yyvsp[-1]);}
    break;
case 49:
#line 312 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_PARENS,yyvsp[0]);}
    break;
case 50:
#line 313 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);}
    break;
case 51:
#line 317 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of identifiers (to be tagged as persistent)");}
    break;
case 52:
#line 318 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]); }
    break;
case 53:
#line 322 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of identifiers (to be tagged as global)");}
    break;
case 54:
#line 323 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);}
    break;
case 56:
#line 328 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);}
    break;
case 61:
#line 347 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 62:
#line 347 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-4]; yyval->addChild(yyvsp[-2]); if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	}
    break;
case 63:
#line 353 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 64:
#line 353 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[0];}
    break;
case 65:
#line 354 "../../../libs/libFreeMat/Parser.yy"
{yyval = NULL;}
    break;
case 66:
#line 358 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("test expression for switch");}
    break;
case 67:
#line 359 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); 
	  if (yyvsp[-2] != NULL) yyval->addChild(yyvsp[-2]); 
	  if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	}
    break;
case 72:
#line 371 "../../../libs/libFreeMat/Parser.yy"
{yyval = NULL;}
    break;
case 74:
#line 376 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = new AST(OP_CASEBLOCK,yyvsp[0]);
	}
    break;
case 75:
#line 379 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);
	}
    break;
case 76:
#line 385 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("case test expression");}
    break;
case 77:
#line 386 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 78:
#line 387 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-4]; yyval->addChild(yyvsp[-2]); yyval->addChild(yyvsp[0]);
	}
    break;
case 79:
#line 393 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 80:
#line 394 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[0];
	}
    break;
case 81:
#line 397 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = NULL;
	}
    break;
case 82:
#line 403 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("for index expression id=expr or (id=expr) or id");}
    break;
case 83:
#line 404 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 84:
#line 405 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("matching 'end' statement to 'for'");}
    break;
case 85:
#line 406 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); yyval->addChild(yyvsp[-2]);
	}
    break;
case 86:
#line 412 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("identifier (the loop control variable)");}
    break;
case 87:
#line 413 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("'=' followed by an expression");}
    break;
case 88:
#line 414 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("expression");}
    break;
case 89:
#line 415 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("matching ')'");}
    break;
case 90:
#line 416 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-6]; yyval->addChild(yyvsp[-2]);}
    break;
case 91:
#line 417 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("'=' followed by an expression");}
    break;
case 92:
#line 418 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("expression");}
    break;
case 93:
#line 419 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-4]; yyval->addChild(yyvsp[0]);}
    break;
case 94:
#line 420 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[0]; yyval->addChild(new AST(OP_RHS, new AST(id_node,yyvsp[0]->text))); }
    break;
case 95:
#line 424 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("while test expression");}
    break;
case 96:
#line 425 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 97:
#line 426 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("matching 'end' statement to 'while'");}
    break;
case 98:
#line 427 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); yyval->addChild(yyvsp[-2]);
	}
    break;
case 99:
#line 433 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("test condition");}
    break;
case 100:
#line 434 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-5]; yyval->addChild(yyvsp[-3]); if (yyvsp[-2] != NULL) yyval->addChild(yyvsp[-2]); 
	  if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	}
    break;
case 101:
#line 441 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 102:
#line 442 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = new AST(OP_CSTAT,yyvsp[-2],yyvsp[0]);
	}
    break;
case 103:
#line 448 "../../../libs/libFreeMat/Parser.yy"
{yyval = NULL;}
    break;
case 105:
#line 453 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = new AST(OP_ELSEIFBLOCK,yyvsp[0]);
	}
    break;
case 106:
#line 456 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);
	}
    break;
case 107:
#line 462 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("test condition");}
    break;
case 108:
#line 463 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[0];
	}
    break;
case 109:
#line 468 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("list of statements");}
    break;
case 110:
#line 469 "../../../libs/libFreeMat/Parser.yy"
{
	  yyval = yyvsp[0];
	}
    break;
case 111:
#line 472 "../../../libs/libFreeMat/Parser.yy"
{yyval = NULL;}
    break;
case 112:
#line 476 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("expression after '='");}
    break;
case 113:
#line 477 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_ASSIGN,yyvsp[-3],yyvsp[0]);}
    break;
case 114:
#line 481 "../../../libs/libFreeMat/Parser.yy"
{
	  yyvsp[-3]->addChild(new AST(OP_PARENS,yyvsp[-1]));
	  yyval = new AST(OP_MULTICALL,yyvsp[-6],yyvsp[-3]);
	}
    break;
case 115:
#line 485 "../../../libs/libFreeMat/Parser.yy"
{
	  yyvsp[0]->addChild(new AST(OP_PARENS,NULL));
	  yyval = new AST(OP_MULTICALL,yyvsp[-3],yyvsp[0]);
	}
    break;
case 116:
#line 492 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after ':'");}
    break;
case 117:
#line 492 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_COLON,yyvsp[-3],yyvsp[0]);}
    break;
case 119:
#line 494 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '+'");}
    break;
case 120:
#line 494 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_PLUS,yyvsp[-3],yyvsp[0]);}
    break;
case 121:
#line 495 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '-'");}
    break;
case 122:
#line 495 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_SUBTRACT,yyvsp[-3],yyvsp[0]);}
    break;
case 123:
#line 496 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '*'");}
    break;
case 124:
#line 496 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_TIMES,yyvsp[-3],yyvsp[0]);}
    break;
case 125:
#line 497 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '/'");}
    break;
case 126:
#line 497 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_RDIV,yyvsp[-3],yyvsp[0]);}
    break;
case 127:
#line 498 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '\\'");}
    break;
case 128:
#line 498 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_LDIV,yyvsp[-3],yyvsp[0]);}
    break;
case 129:
#line 499 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '|'");}
    break;
case 130:
#line 499 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_OR,yyvsp[-3],yyvsp[0]);}
    break;
case 131:
#line 500 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '&'");}
    break;
case 132:
#line 500 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_AND,yyvsp[-3],yyvsp[0]);}
    break;
case 133:
#line 501 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '<'");}
    break;
case 134:
#line 501 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_LT,yyvsp[-3],yyvsp[0]);}
    break;
case 135:
#line 502 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '<='");}
    break;
case 136:
#line 502 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_LEQ,yyvsp[-3],yyvsp[0]);}
    break;
case 137:
#line 503 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '>'");}
    break;
case 138:
#line 503 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_GT,yyvsp[-3],yyvsp[0]);}
    break;
case 139:
#line 504 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '>='");}
    break;
case 140:
#line 504 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_GEQ,yyvsp[-3],yyvsp[0]);}
    break;
case 141:
#line 505 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '=='");}
    break;
case 142:
#line 505 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_EQ,yyvsp[-3],yyvsp[0]);}
    break;
case 143:
#line 506 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '~='");}
    break;
case 144:
#line 506 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_NEQ,yyvsp[-3],yyvsp[0]);}
    break;
case 145:
#line 507 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '.*'");}
    break;
case 146:
#line 507 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT_TIMES,yyvsp[-3],yyvsp[0]);}
    break;
case 147:
#line 508 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after './'");}
    break;
case 148:
#line 508 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT_RDIV,yyvsp[-3],yyvsp[0]);}
    break;
case 149:
#line 509 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '.\\'");}
    break;
case 150:
#line 509 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT_LDIV,yyvsp[-3],yyvsp[0]);}
    break;
case 151:
#line 510 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '-'");}
    break;
case 152:
#line 510 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_NEG,yyvsp[0]);}
    break;
case 153:
#line 511 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '+'");}
    break;
case 154:
#line 511 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[0];}
    break;
case 155:
#line 512 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '~'");}
    break;
case 156:
#line 512 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_NOT,yyvsp[0]);}
    break;
case 157:
#line 513 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '^'");}
    break;
case 158:
#line 513 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_POWER,yyvsp[-3],yyvsp[0]);}
    break;
case 159:
#line 514 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '.^'");}
    break;
case 160:
#line 514 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT_POWER,yyvsp[-3],yyvsp[0]);}
    break;
case 161:
#line 515 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_TRANSPOSE,yyvsp[-1]);}
    break;
case 162:
#line 516 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT_TRANSPOSE,yyvsp[-1]);}
    break;
case 163:
#line 517 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("an expression after '('");}
    break;
case 164:
#line 517 "../../../libs/libFreeMat/Parser.yy"
{yyexpect("right parenthesis ')'");}
    break;
case 165:
#line 518 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 169:
#line 525 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_RHS,yyvsp[0]);}
    break;
case 170:
#line 526 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 171:
#line 527 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 172:
#line 528 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 173:
#line 529 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 174:
#line 530 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_EMPTY,NULL);}
    break;
case 175:
#line 531 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 176:
#line 532 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1];}
    break;
case 177:
#line 533 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 178:
#line 534 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2];}
    break;
case 179:
#line 535 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_EMPTY_CELL,NULL);}
    break;
case 181:
#line 540 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);}
    break;
case 182:
#line 544 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_PARENS,yyvsp[-1]); }
    break;
case 183:
#line 545 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_BRACES,yyvsp[-1]); }
    break;
case 184:
#line 546 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_DOT,yyvsp[0]); }
    break;
case 186:
#line 551 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_ALL,NULL);}
    break;
case 187:
#line 552 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_KEYWORD,yyvsp[-2],yyvsp[0]);}
    break;
case 188:
#line 553 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_KEYWORD,yyvsp[0]);}
    break;
case 190:
#line 558 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addPeer(yyvsp[0]);}
    break;
case 191:
#line 562 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_BRACES,yyvsp[0]);}
    break;
case 192:
#line 563 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);}
    break;
case 193:
#line 567 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_BRACKETS,yyvsp[0]);}
    break;
case 194:
#line 568 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);}
    break;
case 199:
#line 580 "../../../libs/libFreeMat/Parser.yy"
{yyval = new AST(OP_SEMICOLON,yyvsp[0]);}
    break;
case 200:
#line 581 "../../../libs/libFreeMat/Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);}
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 584 "../../../libs/libFreeMat/Parser.yy"


namespace FreeMat {
  
  void resetParser() {
    mainAST = NULL;
    mainMDef = NULL;
    errorOccured = false;
  }
  
  ASTPtr getParsedScriptBlock() {
    return mainAST;
  }
  
  MFunctionDef* getParsedFunctionDef() {
    return mainMDef;
  }
  
  ParserState parseState() {
    if (errorOccured)
      return ParseError;
    if (mainAST != NULL) 
      return ScriptBlock;
    else
      return FuncDef;
  }
  
  ParserState parseString(char *txt) {
/*     yydebug = 1; 	*/
    resetParser();
    interactiveMode = true;
    yyexpect("a valid list of statements");
    setLexBuffer(txt);
    try {
      yyparse();
    } catch (Exception& e) {
      yyerror(e.getMessageCopy());
    }
    return parseState();
  }
  
  ParserState parseFile(FILE *fp, const char* fname) {
    resetParser();
    interactiveMode = false;
    filename = fname;
    setLexFile(fp);
    yyexpect("a valid function definition or script");
    try {
      yyparse();
    } catch (Exception& e) {
      yyerror(e.getMessageCopy());
    }
    return parseState();
  }
  
}
