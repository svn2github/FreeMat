
/*  A Bison parser, made from Parser.yy
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	257
#define	NUMERIC	258
#define	ENDQSTMNT	259
#define	ENDSTMNT	260
#define	LE	261
#define	GE	262
#define	EQ	263
#define	DOTTIMES	264
#define	DOTRDIV	265
#define	DOTLDIV	266
#define	DOTPOWER	267
#define	DOTTRANSPOSE	268
#define	STRING	269
#define	SPECIALCALL	270
#define	END	271
#define	IF	272
#define	FUNCTION	273
#define	FOR	274
#define	BREAK	275
#define	WHILE	276
#define	ELSE	277
#define	ELSEIF	278
#define	SWITCH	279
#define	CASE	280
#define	OTHERWISE	281
#define	CONTINUE	282
#define	TRY	283
#define	CATCH	284
#define	FIELD	285
#define	REFLPAREN	286
#define	REFRPAREN	287
#define	REFLBRACE	288
#define	REFRBRACE	289
#define	ENDFOR	290
#define	ENDSWITCH	291
#define	ENDWHILE	292
#define	ENDTRY	293
#define	ENDIF	294
#define	PERSISTENT	295
#define	KEYBOARD	296
#define	RETURN	297
#define	VARARGIN	298
#define	VARARGOUT	299
#define	GLOBAL	300
#define	QUIT	301
#define	RETALL	302
#define	NE	303
#define	POS	304
#define	NEG	305
#define	NOT	306

#line 1 "Parser.yy"

// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

    /*************************************************************
     * $Source$
     * $Revision$
     * $Date$
     * $Author$
     *************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "AST.hpp"
#include "WalkTree.hpp"
#include "FunctionDef.hpp"
#include "ParserInterface.hpp"
#include "Exception.hpp"

#define YYSTYPE FreeMat::ASTPtr

#define MSGBUFLEN 2048
static char msgBuffer[MSGBUFLEN];

#include "LexerInterface.hpp"

extern char* yytext;
extern int yylex(void);

extern int lineNumber;
extern int yydebug;

namespace FreeMat {
  static ASTPtr mainAST;
  static MFunctionDef *mainMDef;
  
  bool errorOccured;
  bool interactiveMode;
  static char *expectString = NULL;
  static const char *filename;

  void yyexpect(char *s) {
	expectString = s;
  }

  int yyerror(char *s) {
    char *tokdesc;
    char *tokbuffer = "unprintable";
    char buffer[256];
    if (*yytext < 33) {
	tokdesc = tokbuffer;
	sprintf(buffer,"Ran out of input on this line.");
	tokdesc = buffer;
    } else {
        sprintf(buffer,"Current token is '%s'",yytext);
	tokdesc = buffer;
    }	
    if (expectString)
      if (!interactiveMode)
        sprintf(msgBuffer,"Expecting %s at line %d of file %s.  %s",
	expectString,lineNumber,filename,tokdesc);
      else
        sprintf(msgBuffer,"Expecting %s.  %s",expectString, tokdesc);
    else
      if (!interactiveMode)
        sprintf(msgBuffer,"Syntax error at line %d of file %s.  %s",
	lineNumber,filename,tokdesc);
      else
        sprintf(msgBuffer,"Syntax error at input.  %s",tokdesc);
    throw Exception(msgBuffer);
    return 0;
  }
}

using namespace FreeMat;
#define yyerror yyerror

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		297
#define	YYFLAG		-32768
#define	YYNTBASE	74

#define YYTRANSLATE(x) ((unsigned)(x) <= 306 ? yytranslate[x] : 177)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    51,    64,    69,
    70,    57,    55,    68,    56,     2,    58,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    49,     2,    52,
    65,    53,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    66,    59,    67,    63,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    72,    50,    73,    71,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    54,    60,    61,    62
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     5,     6,    15,    16,    24,    25,    31,
    32,    37,    38,    46,    47,    54,    56,    59,    62,    65,
    70,    72,    76,    78,    81,    83,    86,    89,    92,    95,
    97,    99,   100,   102,   104,   106,   108,   110,   112,   114,
   116,   118,   120,   122,   124,   126,   128,   130,   133,   135,
   138,   139,   143,   144,   148,   150,   153,   155,   157,   159,
   161,   162,   168,   169,   173,   174,   175,   183,   185,   187,
   188,   189,   191,   193,   196,   197,   198,   204,   205,   209,
   210,   211,   212,   213,   221,   222,   223,   224,   225,   235,
   236,   237,   243,   245,   246,   247,   248,   256,   257,   264,
   265,   269,   270,   272,   274,   277,   278,   282,   283,   287,
   288,   289,   294,   303,   309,   310,   315,   317,   318,   323,
   324,   329,   330,   335,   336,   341,   342,   347,   348,   353,
   354,   359,   360,   365,   366,   371,   372,   377,   378,   383,
   384,   389,   390,   395,   396,   401,   402,   407,   408,   413,
   414,   418,   419,   423,   424,   428,   429,   434,   435,   440,
   443,   446,   447,   448,   454,   456,   458,   460,   462,   466,
   471,   476,   482,   485,   489,   494,   499,   505,   508,   510,
   513,   517,   521,   523,   525,   527,   532,   535,   537,   541,
   543,   547,   549,   553,   555,   557,   559,   560,   562
};

static const short yyrhs[] = {    86,
     0,    82,     0,     0,     0,    19,    83,     3,    32,    84,
    33,    76,    86,     0,     0,    19,     3,    32,    84,    33,
    77,    86,     0,     0,    19,    83,     3,    78,    86,     0,
     0,    19,     3,    79,    86,     0,     0,    19,    83,     3,
    32,    33,    80,    86,     0,     0,    19,     3,    32,    33,
    81,    86,     0,    75,     0,    82,    75,     0,    45,    65,
     0,     3,    65,     0,    66,    84,    67,    65,     0,    85,
     0,    84,    68,    85,     0,     3,     0,    51,     3,     0,
    87,     0,    86,    87,     0,    88,     5,     0,    88,     6,
     0,    88,    68,     0,   139,     0,   142,     0,     0,   141,
     0,   114,     0,    99,     0,    98,     0,   125,     0,   129,
     0,   104,     0,   100,     0,    97,     0,    96,     0,    93,
     0,    91,     0,    89,     0,    47,     0,    48,     0,    16,
    90,     0,    15,     0,    90,    15,     0,     0,    41,    92,
    95,     0,     0,    46,    94,    95,     0,     3,     0,    95,
     3,     0,    43,     0,    42,     0,    28,     0,    21,     0,
     0,    29,   101,    86,   102,    39,     0,     0,    30,   103,
    86,     0,     0,     0,    25,   105,   142,   106,   107,   112,
    37,     0,     6,     0,     5,     0,     0,     0,   108,     0,
   109,     0,   108,   109,     0,     0,     0,    26,   110,   142,
   111,    86,     0,     0,    27,   113,    86,     0,     0,     0,
     0,     0,    20,   115,   118,   116,    86,   117,    36,     0,
     0,     0,     0,     0,    69,   119,     3,   120,    65,   121,
   142,   122,    70,     0,     0,     0,     3,   123,    65,   124,
   142,     0,     3,     0,     0,     0,     0,    22,   126,   142,
   127,    86,   128,    38,     0,     0,    18,   130,   131,   133,
   137,    40,     0,     0,   142,   132,    86,     0,     0,   134,
     0,   135,     0,   134,   135,     0,     0,    24,   136,   131,
     0,     0,    23,   138,    86,     0,     0,     0,   168,    65,
   140,   142,     0,    66,   173,    67,    65,     3,    32,   171,
    33,     0,    66,   173,    67,    65,     3,     0,     0,   142,
    49,   143,   142,     0,   167,     0,     0,   142,    55,   144,
   142,     0,     0,   142,    56,   145,   142,     0,     0,   142,
    57,   146,   142,     0,     0,   142,    58,   147,   142,     0,
     0,   142,    59,   148,   142,     0,     0,   142,    50,   149,
   142,     0,     0,   142,    51,   150,   142,     0,     0,   142,
    52,   151,   142,     0,     0,   142,     7,   152,   142,     0,
     0,   142,    53,   153,   142,     0,     0,   142,     8,   154,
   142,     0,     0,   142,     9,   155,   142,     0,     0,   142,
    54,   156,   142,     0,     0,   142,    10,   157,   142,     0,
     0,   142,    11,   158,   142,     0,     0,   142,    12,   159,
   142,     0,     0,    61,   160,   142,     0,     0,    60,   161,
   142,     0,     0,    71,   162,   142,     0,     0,   142,    63,
   163,   142,     0,     0,   142,    13,   164,   142,     0,   142,
    64,     0,   142,    14,     0,     0,     0,    69,   165,   142,
   166,    70,     0,     4,     0,    15,     0,    17,     0,   168,
     0,    66,   173,    67,     0,    66,   174,   173,    67,     0,
    66,   173,   174,    67,     0,    66,   174,   173,   174,    67,
     0,    66,    67,     0,    72,   172,    73,     0,    72,   174,
   172,    73,     0,    72,   172,   174,    73,     0,    72,   174,
   172,   174,    73,     0,    72,    73,     0,     3,     0,   168,
   169,     0,    32,   171,    33,     0,    34,   171,    35,     0,
    31,     0,   142,     0,    49,     0,    58,     3,    65,   142,
     0,    58,     3,     0,   170,     0,   171,    68,   170,     0,
   176,     0,   172,   174,   176,     0,   176,     0,   173,   174,
   176,     0,     6,     0,     5,     0,    68,     0,     0,   142,
     0,   176,   175,   142,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   125,   126,   127,   130,   132,   147,   148,   162,   163,   177,
   178,   191,   192,   206,   207,   223,   224,   228,   229,   230,
   234,   236,   239,   240,   250,   251,   255,   265,   274,   285,
   287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
   297,   298,   299,   300,   301,   302,   302,   305,   309,   310,
   314,   316,   319,   321,   324,   325,   329,   333,   337,   340,
   344,   345,   350,   351,   352,   355,   357,   364,   365,   365,
   368,   369,   373,   376,   382,   384,   385,   390,   392,   394,
   400,   402,   403,   404,   409,   411,   412,   413,   414,   414,
   416,   417,   417,   421,   423,   424,   425,   430,   432,   438,
   440,   445,   446,   450,   453,   459,   461,   465,   467,   469,
   473,   475,   478,   482,   489,   490,   491,   492,   492,   493,
   493,   494,   494,   495,   495,   496,   496,   497,   497,   498,
   498,   499,   499,   500,   500,   501,   501,   502,   502,   503,
   503,   504,   504,   505,   505,   506,   506,   507,   507,   508,
   508,   509,   509,   510,   510,   511,   511,   512,   512,   513,
   514,   515,   515,   516,   519,   521,   522,   523,   524,   525,
   526,   527,   528,   529,   530,   531,   532,   533,   536,   538,
   541,   543,   544,   547,   549,   550,   551,   554,   555,   559,
   560,   564,   565,   569,   570,   573,   574,   577,   578
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"NUMERIC","ENDQSTMNT","ENDSTMNT","LE","GE","EQ","DOTTIMES","DOTRDIV","DOTLDIV",
"DOTPOWER","DOTTRANSPOSE","STRING","SPECIALCALL","END","IF","FUNCTION","FOR",
"BREAK","WHILE","ELSE","ELSEIF","SWITCH","CASE","OTHERWISE","CONTINUE","TRY",
"CATCH","FIELD","REFLPAREN","REFRPAREN","REFLBRACE","REFRBRACE","ENDFOR","ENDSWITCH",
"ENDWHILE","ENDTRY","ENDIF","PERSISTENT","KEYBOARD","RETURN","VARARGIN","VARARGOUT",
"GLOBAL","QUIT","RETALL","':'","'|'","'&'","'<'","'>'","NE","'+'","'-'","'*'",
"'/'","'\\\\'","POS","NEG","NOT","'^'","'\\''","'='","'['","']'","','","'('",
"')'","'~'","'{'","'}'","program","functionDef","@1","@2","@3","@4","@5","@6",
"functionDefList","returnDeclaration","argumentList","argument","statementList",
"statement","statementType","specialSyntaxStatement","stringList","persistentStatement",
"@7","globalStatement","@8","identList","returnStatement","keyboardStatement",
"continueStatement","breakStatement","tryStatement","@9","optionalCatch","@10",
"switchStatement","@11","optionalEndStatement","caseBlock","caseList","caseStatement",
"@12","@13","otherwiseClause","@14","forStatement","@15","@16","@17","forIndexExpression",
"@18","@19","@20","@21","@22","@23","whileStatement","@24","@25","@26","ifStatement",
"@27","conditionedStatement","@28","elseIfBlock","elseIfStatementList","elseIfStatement",
"@29","elseStatement","@30","assignmentStatement","@31","multiFunctionCall",
"expr","@32","@33","@34","@35","@36","@37","@38","@39","@40","@41","@42","@43",
"@44","@45","@46","@47","@48","@49","@50","@51","@52","@53","@54","@55","terminal",
"symbRefList","symbRef","indexElement","indexList","cellDef","matrixDef","rowSeperator",
"columnSep","rowDef", NULL
};
#endif

static const short yyr1[] = {     0,
    74,    74,    74,    76,    75,    77,    75,    78,    75,    79,
    75,    80,    75,    81,    75,    82,    82,    83,    83,    83,
    84,    84,    85,    85,    86,    86,    87,    87,    87,    88,
    88,    88,    88,    88,    88,    88,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,    88,    89,    90,    90,
    92,    91,    94,    93,    95,    95,    96,    97,    98,    99,
   101,   100,   103,   102,   102,   105,   104,   106,   106,   106,
   107,   107,   108,   108,   110,   111,   109,   113,   112,   112,
   115,   116,   117,   114,   119,   120,   121,   122,   118,   123,
   124,   118,   118,   126,   127,   128,   125,   130,   129,   132,
   131,   133,   133,   134,   134,   136,   135,   138,   137,   137,
   140,   139,   141,   141,   143,   142,   142,   144,   142,   145,
   142,   146,   142,   147,   142,   148,   142,   149,   142,   150,
   142,   151,   142,   152,   142,   153,   142,   154,   142,   155,
   142,   156,   142,   157,   142,   158,   142,   159,   142,   160,
   142,   161,   142,   162,   142,   163,   142,   164,   142,   142,
   142,   165,   166,   142,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   168,   168,
   169,   169,   169,   170,   170,   170,   170,   171,   171,   172,
   172,   173,   173,   174,   174,   175,   175,   176,   176
};

static const short yyr2[] = {     0,
     1,     1,     0,     0,     8,     0,     7,     0,     5,     0,
     4,     0,     7,     0,     6,     1,     2,     2,     2,     4,
     1,     3,     1,     2,     1,     2,     2,     2,     2,     1,
     1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     1,     2,
     0,     3,     0,     3,     1,     2,     1,     1,     1,     1,
     0,     5,     0,     3,     0,     0,     7,     1,     1,     0,
     0,     1,     1,     2,     0,     0,     5,     0,     3,     0,
     0,     0,     0,     7,     0,     0,     0,     0,     9,     0,
     0,     5,     1,     0,     0,     0,     7,     0,     6,     0,
     3,     0,     1,     1,     2,     0,     3,     0,     3,     0,
     0,     4,     8,     5,     0,     4,     1,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     3,     0,     3,     0,     3,     0,     4,     0,     4,     2,
     2,     0,     0,     5,     1,     1,     1,     1,     3,     4,
     4,     5,     2,     3,     4,     4,     5,     2,     1,     2,
     3,     3,     1,     1,     1,     4,     2,     1,     3,     1,
     3,     1,     3,     1,     1,     1,     0,     1,     3
};

static const short yydefact[] = {    32,
   179,   165,   166,     0,   167,    98,     0,    81,    60,    94,
    66,    59,    61,    51,    58,    57,    53,    46,    47,   152,
   150,     0,   162,   154,     0,    16,     2,    32,    25,     0,
    45,    44,    43,    42,    41,    36,    35,    40,    39,    34,
    37,    38,    30,    33,    31,   117,   168,    49,    48,     0,
    10,     0,     0,     0,     0,     0,     0,    32,     0,     0,
     0,     0,   195,   194,     0,   173,   198,   168,     0,     0,
   197,     0,     0,   178,     0,     0,   197,    17,    26,    27,
    28,    29,   134,   138,   140,   144,   146,   148,   158,   161,
   115,   128,   130,   132,   136,   142,   118,   120,   122,   124,
   126,   156,   160,   183,     0,     0,   111,   180,    50,   102,
   100,     0,    19,    32,    18,    23,     0,     0,    21,     8,
    93,    85,    82,    95,    70,    32,    55,    52,    54,   153,
   151,     0,   169,     0,     0,   196,     0,   163,   155,   174,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   185,     0,   184,   188,     0,     0,     0,   106,   110,
   103,   104,    32,    14,     0,    32,    24,     0,     0,     0,
    32,     0,     0,    32,    32,    69,    68,    71,    63,     0,
    56,   169,     0,   171,   197,   170,     0,   199,     0,   176,
   197,   175,     0,   135,   139,   141,   145,   147,   149,   159,
   116,   129,   131,   133,   137,   143,   119,   121,   123,   125,
   127,   157,   187,   181,     0,   182,   112,     0,   108,     0,
   105,    32,    32,     6,    20,    22,    12,     0,    32,    91,
    86,    32,    32,    75,    80,    72,    73,    32,    62,   114,
   172,   164,   177,     0,   189,   107,    32,    99,    32,    32,
    32,     4,     0,     0,     0,     0,     0,    78,     0,    74,
    32,     0,   186,    32,    32,    32,    32,    92,    87,    84,
    97,    76,    32,    67,     0,    32,     0,    32,    32,   113,
    88,    32,     0,    89,     0,     0,     0
};

static const short yydefgoto[] = {   295,
    26,   277,   260,   181,   114,   261,   233,    27,    54,   118,
   119,    28,    29,    30,    31,    49,    32,    59,    33,    60,
   128,    34,    35,    36,    37,    38,    58,   190,   248,    39,
    57,   188,   245,   246,   247,   267,   288,   269,   283,    40,
    55,   184,   265,   123,   183,   264,   287,   293,   182,   263,
    41,    56,   185,   266,    42,    50,   110,   173,   170,   171,
   172,   228,   230,   257,    43,   168,    44,    45,   150,   156,
   157,   158,   159,   160,   151,   152,   153,   143,   154,   144,
   145,   155,   146,   147,   148,    62,    61,    73,   161,   149,
    72,   199,    46,    68,   108,   165,   166,    75,    69,    70,
   137,    71
};

static const short yypact[] = {   350,
-32768,-32768,-32768,    15,-32768,-32768,    33,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   151,-32768,-32768,    14,-32768,     5,   688,-32768,    45,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1289,-32768,    99,-32768,    25,   175,
    28,    53,    22,    42,    19,   175,   175,  1189,    63,    63,
   175,   175,-32768,-32768,   151,-32768,  1289,     3,   102,   175,
     1,   175,   175,-32768,     6,   175,    -3,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1223,  1223,-32768,-32768,-32768,    79,
  1289,    78,-32768,  1189,-32768,-32768,   113,   -29,-32768,    91,
    95,-32768,-32768,  1289,  1257,   885,-32768,   158,   158,   192,
   192,   104,    97,   234,   115,-32768,   175,  1289,   192,-32768,
    29,     9,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,-32768,   160,  1289,-32768,    -6,    59,   175,-32768,   142,
    79,-32768,  1189,-32768,    24,   409,-32768,   105,    22,   150,
  1189,   107,   172,  1189,  1189,-32768,-32768,   161,-32768,   138,
-32768,-32768,   186,-32768,    37,-32768,   249,  1289,   121,-32768,
     4,-32768,   708,  1383,  1383,  1383,   192,   192,   192,   -10,
  1315,  1347,  1373,  1383,  1383,  1383,   669,   669,   192,   192,
   192,   -10,   128,-32768,  1223,-32768,  1289,   175,-32768,   155,
-32768,   767,  1189,-32768,-32768,-32768,-32768,    38,   443,-32768,
-32768,   919,   978,-32768,   169,   161,-32768,  1189,-32768,   165,
-32768,-32768,-32768,   175,-32768,-32768,  1189,-32768,   502,  1189,
  1189,-32768,   175,   133,   163,   162,   175,-32768,   166,-32768,
  1037,  1223,  1289,  1071,   536,   595,  1189,  1289,-32768,-32768,
-32768,  1289,  1189,-32768,    51,   629,   175,  1189,  1130,-32768,
  1289,   826,   132,-32768,   204,   207,-32768
};

static const short yypgoto[] = {-32768,
   181,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -89,
    30,   100,    48,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   153,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -36,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -13,-32768,-32768,-32768,
    50,-32768,-32768,-32768,-32768,-32768,-32768,    -9,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,     0,-32768,     2,  -105,   149,   -44,   -20,
-32768,   -17
};


#define	YYLAST		1447


static const short yytable[] = {    47,
   167,  -190,  -190,    90,    76,  -192,  -192,    77,  -191,  -191,
    63,    64,    67,    63,    64,    67,     1,     2,    63,    64,
   132,   121,   175,     7,   116,   135,   224,    47,     3,    48,
     5,     1,     2,   104,   105,    51,   106,   178,   179,   109,
   111,  -193,  -193,     3,   120,     5,   124,   125,   134,    80,
    81,   130,   131,   103,   141,    67,   234,    47,    77,   112,
    67,   225,   138,   139,   136,   127,    67,  -192,   136,  -190,
   262,   136,   117,    20,    21,    79,  -191,    52,   140,    65,
   116,   202,    23,   290,    24,    25,    74,   122,    20,    21,
   238,   179,   113,   226,    65,   164,   164,    23,    53,    24,
    25,   200,   169,  -193,   136,   179,    63,    64,    63,    64,
   174,   134,    82,    47,   197,   177,   195,   115,   225,    63,
    64,   203,   180,   201,    67,    47,   225,   198,   117,   104,
   105,    67,   106,   204,   205,   206,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
   221,   222,   116,     1,     2,    63,    64,   126,   227,   -90,
   191,   193,   223,   107,   229,     3,   285,     5,   133,   235,
   192,   240,    47,    79,   241,    47,   249,     1,     2,   195,
    47,   196,   237,    47,    47,   201,   244,    67,   250,     3,
   252,     5,   254,    67,   258,   268,   272,   279,   280,   281,
   117,   294,   284,   296,    89,    90,   297,    78,   236,   270,
    20,    21,   129,   176,   256,   164,    65,    66,   111,    23,
   231,    24,    25,    79,   142,     0,   255,     0,     0,     0,
     0,    47,    47,     0,    20,    21,     1,     2,    47,     0,
    65,    47,    47,    23,   273,    24,    25,    47,     3,     0,
     5,     1,     2,   278,   102,   103,    47,   282,    47,    47,
    47,     0,   164,     3,     0,     5,     0,     0,     0,     0,
    47,     0,   232,    47,    47,    47,    47,   291,     0,    79,
   239,     0,    47,   242,   243,    47,    79,    47,    47,    79,
    79,    47,     0,    20,    21,     0,     0,     0,     0,    65,
   194,     0,    23,     0,    24,    25,    79,     0,    20,    21,
     0,     0,     0,     0,    65,   251,     0,    23,    79,    24,
    25,    79,    79,    79,     0,     0,     0,     0,     0,     0,
     0,     0,   259,    79,     0,     0,    79,     0,     0,    79,
     0,     0,     0,     0,     0,     0,     0,   271,     0,    -3,
     0,     0,     1,     2,     0,     0,   274,     0,     0,   275,
   276,     0,     0,     0,     3,     4,     5,     6,     7,     8,
     9,    10,     0,     0,    11,     0,   286,    12,    13,     0,
     0,     0,   289,     0,     0,     0,     0,   292,     0,     0,
    14,    15,    16,     0,     0,    17,    18,    19,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   -11,    20,
    21,     1,     2,     0,     0,    22,     0,     0,    23,     0,
    24,    25,     0,     3,     4,     5,     6,   -11,     8,     9,
    10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
     0,     0,    -9,     0,     0,     1,     2,     0,     0,    14,
    15,    16,     0,     0,    17,    18,    19,     3,     4,     5,
     6,    -9,     8,     9,    10,     0,     0,    11,    20,    21,
    12,    13,     0,     0,    22,     0,     0,    23,     0,    24,
    25,     0,     0,    14,    15,    16,     0,     0,    17,    18,
    19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   -15,    20,    21,     1,     2,     0,     0,    22,     0,
     0,    23,     0,    24,    25,     0,     3,     4,     5,     6,
   -15,     8,     9,    10,     0,     0,    11,     0,     0,    12,
    13,     0,     0,     0,     0,    -7,     0,     0,     1,     2,
     0,     0,    14,    15,    16,     0,     0,    17,    18,    19,
     3,     4,     5,     6,    -7,     8,     9,    10,     0,     0,
    11,    20,    21,    12,    13,     0,     0,    22,     0,     0,
    23,     0,    24,    25,     0,     0,    14,    15,    16,     0,
     0,    17,    18,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   -13,    20,    21,     1,     2,     0,
     0,    22,     0,     0,    23,     0,    24,    25,     0,     3,
     4,     5,     6,   -13,     8,     9,    10,     0,     0,    11,
     0,     0,    12,    13,     0,     0,     0,     0,    -5,     0,
     0,     1,     2,     0,     0,    14,    15,    16,     0,     0,
    17,    18,    19,     3,     4,     5,     6,    -5,     8,     9,
    10,     0,     0,    11,    20,    21,    12,    13,     0,     0,
    22,     0,     0,    23,     0,    24,    25,     0,     0,    14,
    15,    16,     0,     0,    17,    18,    19,     0,    86,    87,
    88,    89,    90,     0,     0,     0,     0,    -1,    20,    21,
     1,     2,     0,     0,    22,     0,     0,    23,     0,    24,
    25,     0,     3,     4,     5,     6,     0,     8,     9,    10,
     1,     2,    11,     0,     0,    12,    13,     0,     0,     0,
     0,     0,     3,     0,     5,    99,   100,   101,    14,    15,
    16,   102,   103,    17,    18,    19,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    20,    21,     0,
     0,     0,     0,    22,     0,     0,    23,     0,    24,    25,
     0,     0,     0,     0,     0,     0,     0,    20,    21,     1,
     2,     0,     0,    65,     0,     0,    23,     0,    24,    25,
   253,     3,     4,     5,     6,     0,     8,     9,    10,  -101,
  -101,    11,     0,     0,    12,    13,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -101,    14,    15,    16,
     0,     0,    17,    18,    19,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    20,    21,     1,     2,
     0,     0,    22,     0,     0,    23,     0,    24,    25,     0,
     3,     4,     5,     6,     0,     8,     9,    10,     0,     0,
    11,   -77,   -77,    12,    13,     0,     0,     0,     0,     0,
     0,     0,   -77,     0,     0,     0,    14,    15,    16,     0,
     0,    17,    18,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    20,    21,     1,     2,     0,
     0,    22,     0,     0,    23,     0,    24,    25,     0,     3,
     4,     5,     6,     0,     8,     9,    10,     0,     0,    11,
     0,     0,    12,    13,   189,     0,     0,     0,     0,     0,
     0,     1,     2,   -65,     0,    14,    15,    16,     0,     0,
    17,    18,    19,     3,     4,     5,     6,     0,     8,     9,
    10,     0,     0,    11,    20,    21,    12,    13,     0,     0,
    22,     0,     0,    23,   -83,    24,    25,     0,     0,    14,
    15,    16,     0,     0,    17,    18,    19,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
     1,     2,     0,     0,    22,     0,     0,    23,     0,    24,
    25,     0,     3,     4,     5,     6,     0,     8,     9,    10,
     0,     0,    11,     0,     0,    12,    13,     0,     0,     0,
     0,     0,     0,     0,     0,   -96,     0,     0,    14,    15,
    16,     0,     0,    17,    18,    19,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    20,    21,     1,
     2,     0,     0,    22,     0,     0,    23,     0,    24,    25,
     0,     3,     4,     5,     6,     0,     8,     9,    10,     0,
     0,    11,     0,     0,    12,    13,     0,     0,     0,     0,
     0,     0,     0,     1,     2,   -64,     0,    14,    15,    16,
     0,     0,    17,    18,    19,     3,     4,     5,     6,     0,
     8,     9,    10,     0,     0,    11,    20,    21,    12,    13,
     0,     0,    22,     0,     0,    23,     0,    24,    25,     0,
  -109,    14,    15,    16,     0,     0,    17,    18,    19,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    20,    21,     1,     2,     0,     0,    22,     0,     0,    23,
     0,    24,    25,     0,     3,     4,     5,     6,     0,     8,
     9,    10,     0,     0,    11,     0,     0,    12,    13,     0,
     0,     0,     0,     0,     0,     0,   -79,     0,     0,     0,
    14,    15,    16,     0,     0,    17,    18,    19,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
    21,     1,     2,     0,     0,    22,     0,     0,    23,     0,
    24,    25,     0,     3,     4,     5,     6,     0,     8,     9,
    10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
     0,     0,     0,     0,     0,     1,     2,     0,     0,    14,
    15,    16,     0,     0,    17,    18,    19,     3,     0,     5,
     0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
     0,     0,     0,     0,    22,     0,     0,    23,     0,    24,
    25,   186,   187,    83,    84,    85,    86,    87,    88,    89,
    90,   162,     0,     0,     0,     0,     0,     0,     0,     0,
   163,     0,    20,    21,     0,     0,     0,     0,    65,     0,
     0,    23,     0,    24,    25,    83,    84,    85,    86,    87,
    88,    89,    90,     0,     0,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,     0,     0,     0,   102,
   103,    83,    84,    85,    86,    87,    88,    89,    90,     0,
     0,     0,     0,     0,     0,     0,     0,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,     0,     0,
     0,   102,   103,    83,    84,    85,    86,    87,    88,    89,
    90,     0,     0,     0,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,     0,     0,     0,   102,   103,    83,
    84,    85,    86,    87,    88,    89,    90,     0,     0,     0,
     0,     0,    86,    87,    88,    89,    90,    93,    94,    95,
    96,    97,    98,    99,   100,   101,     0,     0,     0,   102,
   103,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
   100,   101,     0,     0,     0,   102,   103,    97,    98,    99,
   100,   101,     0,     0,     0,   102,   103
};

static const short yycheck[] = {     0,
   106,     5,     6,    14,    25,     5,     6,    25,     5,     6,
     5,     6,    22,     5,     6,    25,     3,     4,     5,     6,
    65,     3,   112,    19,     3,    70,    33,    28,    15,    15,
    17,     3,     4,    31,    32,     3,    34,    67,    68,    15,
    50,     5,     6,    15,     3,    17,    56,    57,    69,     5,
     6,    61,    62,    64,    75,    65,    33,    58,    76,    32,
    70,    68,    72,    73,    68,     3,    76,    67,    68,    73,
    33,    68,    51,    60,    61,    28,    73,    45,    73,    66,
     3,    73,    69,    33,    71,    72,    73,    69,    60,    61,
   180,    68,    65,    35,    66,   105,   106,    69,    66,    71,
    72,    73,    24,    67,    68,    68,     5,     6,     5,     6,
    33,   132,    68,   114,   135,     3,   134,    65,    68,     5,
     6,   142,    32,   141,   134,   126,    68,   137,    51,    31,
    32,   141,    34,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,     3,     3,     4,     5,     6,    58,   168,    65,
     3,    65,     3,    65,    23,    15,   272,    17,    67,    65,
    67,    65,   173,   126,     3,   176,    39,     3,     4,   197,
   181,    67,    33,   184,   185,   203,    26,   197,     3,    15,
    70,    17,    65,   203,    40,    27,    32,    65,    36,    38,
    51,    70,    37,     0,    13,    14,     0,    27,   179,   246,
    60,    61,    60,   114,   228,   225,    66,    67,   228,    69,
   171,    71,    72,   176,    76,    -1,   225,    -1,    -1,    -1,
    -1,   232,   233,    -1,    60,    61,     3,     4,   239,    -1,
    66,   242,   243,    69,   254,    71,    72,   248,    15,    -1,
    17,     3,     4,   263,    63,    64,   257,   267,   259,   260,
   261,    -1,   272,    15,    -1,    17,    -1,    -1,    -1,    -1,
   271,    -1,   173,   274,   275,   276,   277,   287,    -1,   232,
   181,    -1,   283,   184,   185,   286,   239,   288,   289,   242,
   243,   292,    -1,    60,    61,    -1,    -1,    -1,    -1,    66,
    67,    -1,    69,    -1,    71,    72,   259,    -1,    60,    61,
    -1,    -1,    -1,    -1,    66,    67,    -1,    69,   271,    71,
    72,   274,   275,   276,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   233,   286,    -1,    -1,   289,    -1,    -1,   292,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,     0,
    -1,    -1,     3,     4,    -1,    -1,   257,    -1,    -1,   260,
   261,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    25,    -1,   277,    28,    29,    -1,
    -1,    -1,   283,    -1,    -1,    -1,    -1,   288,    -1,    -1,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,    60,
    61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,
    71,    72,    -1,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
    -1,    -1,     0,    -1,    -1,     3,     4,    -1,    -1,    41,
    42,    43,    -1,    -1,    46,    47,    48,    15,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    25,    60,    61,
    28,    29,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
    72,    -1,    -1,    41,    42,    43,    -1,    -1,    46,    47,
    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     0,    60,    61,     3,     4,    -1,    -1,    66,    -1,
    -1,    69,    -1,    71,    72,    -1,    15,    16,    17,    18,
    19,    20,    21,    22,    -1,    -1,    25,    -1,    -1,    28,
    29,    -1,    -1,    -1,    -1,     0,    -1,    -1,     3,     4,
    -1,    -1,    41,    42,    43,    -1,    -1,    46,    47,    48,
    15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
    25,    60,    61,    28,    29,    -1,    -1,    66,    -1,    -1,
    69,    -1,    71,    72,    -1,    -1,    41,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     0,    60,    61,     3,     4,    -1,
    -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,    15,
    16,    17,    18,    19,    20,    21,    22,    -1,    -1,    25,
    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,     0,    -1,
    -1,     3,     4,    -1,    -1,    41,    42,    43,    -1,    -1,
    46,    47,    48,    15,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    25,    60,    61,    28,    29,    -1,    -1,
    66,    -1,    -1,    69,    -1,    71,    72,    -1,    -1,    41,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    10,    11,
    12,    13,    14,    -1,    -1,    -1,    -1,     0,    60,    61,
     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
    72,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
     3,     4,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    17,    57,    58,    59,    41,    42,
    43,    63,    64,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    -1,
    -1,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,     3,
     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,
    73,    15,    16,    17,    18,    -1,    20,    21,    22,    23,
    24,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,    43,
    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,     3,     4,
    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
    15,    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,
    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    -1,    -1,    -1,    41,    42,    43,    -1,
    -1,    46,    47,    48,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    60,    61,     3,     4,    -1,
    -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,    15,
    16,    17,    18,    -1,    20,    21,    22,    -1,    -1,    25,
    -1,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,    39,    -1,    41,    42,    43,    -1,    -1,
    46,    47,    48,    15,    16,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    25,    60,    61,    28,    29,    -1,    -1,
    66,    -1,    -1,    69,    36,    71,    72,    -1,    -1,    41,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
    72,    -1,    15,    16,    17,    18,    -1,    20,    21,    22,
    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
    43,    -1,    -1,    46,    47,    48,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,     3,
     4,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,
    -1,    15,    16,    17,    18,    -1,    20,    21,    22,    -1,
    -1,    25,    -1,    -1,    28,    29,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     3,     4,    39,    -1,    41,    42,    43,
    -1,    -1,    46,    47,    48,    15,    16,    17,    18,    -1,
    20,    21,    22,    -1,    -1,    25,    60,    61,    28,    29,
    -1,    -1,    66,    -1,    -1,    69,    -1,    71,    72,    -1,
    40,    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    60,    61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,
    -1,    71,    72,    -1,    15,    16,    17,    18,    -1,    20,
    21,    22,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    61,     3,     4,    -1,    -1,    66,    -1,    -1,    69,    -1,
    71,    72,    -1,    15,    16,    17,    18,    -1,    20,    21,
    22,    -1,    -1,    25,    -1,    -1,    28,    29,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,    -1,    41,
    42,    43,    -1,    -1,    46,    47,    48,    15,    -1,    17,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    -1,    71,
    72,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    -1,    60,    61,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    69,    -1,    71,    72,     7,     8,     9,    10,    11,
    12,    13,    14,    -1,    -1,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    -1,    -1,    -1,    63,
    64,     7,     8,     9,    10,    11,    12,    13,    14,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
    -1,    63,    64,     7,     8,     9,    10,    11,    12,    13,
    14,    -1,    -1,    -1,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    -1,    -1,    -1,    63,    64,     7,
     8,     9,    10,    11,    12,    13,    14,    -1,    -1,    -1,
    -1,    -1,    10,    11,    12,    13,    14,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    -1,    -1,    -1,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
    58,    59,    -1,    -1,    -1,    63,    64,    55,    56,    57,
    58,    59,    -1,    -1,    -1,    63,    64
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 126 "Parser.yy"
{mainAST = yyvsp[0];;
    break;}
case 4:
#line 131 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 5:
#line 132 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-6]->toStringList();
     r->name = yyvsp[-5]->text;
     r->arguments = yyvsp[-3]->toStringList();
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 6:
#line 148 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 7:
#line 148 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-5]->text;
     r->arguments = yyvsp[-3]->toStringList();
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 8:
#line 163 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 9:
#line 163 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-3]->toStringList();
     r->name = yyvsp[-2]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 10:
#line 178 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 11:
#line 178 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-2]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 12:
#line 192 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 13:
#line 192 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-5]->toStringList();
     r->name = yyvsp[-4]->text;
     r->code = yyvsp[0];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 14:
#line 207 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 15:
#line 207 "Parser.yy"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-4]->text;
     r->code = yyvsp[-1];
     r->nextFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	mainMDef->nextFunction = r;
     }
   ;
    break;}
case 18:
#line 229 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 19:
#line 230 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 20:
#line 231 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 21:
#line 235 "Parser.yy"
{yyval = yyvsp[0];;
    break;}
case 22:
#line 236 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);;
    break;}
case 24:
#line 240 "Parser.yy"
{
	yyval = yyvsp[0];
	char *b = (char*) malloc(strlen(yyvsp[0]->text)+2);
	b[0] = '&';
	strcpy(b+1,yyvsp[0]->text);
	yyval->text = b;
  ;
    break;}
case 25:
#line 251 "Parser.yy"
{yyval = new AST(OP_BLOCK,yyvsp[0]);;
    break;}
case 26:
#line 252 "Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);;
    break;}
case 27:
#line 256 "Parser.yy"
{
  	    yyval = new AST(OP_QSTATEMENT,NULL);
	    if (!interactiveMode) {
	      sprintf(msgBuffer,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 ;
    break;}
case 28:
#line 265 "Parser.yy"
{
	    yyval = new AST(OP_RSTATEMENT,NULL);
	    if (!interactiveMode) {
	      sprintf(msgBuffer,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 ;
    break;}
case 29:
#line 274 "Parser.yy"
{
	    yyval = new AST(OP_RSTATEMENT,NULL);
	    if (!interactiveMode) {
	      sprintf(msgBuffer,"line %d of file %s",lineNumber,filename);
	      yyval->down = new AST(context_node, strdup(msgBuffer));
	      yyval->down->down = yyvsp[-1];
	    } else
	      yyval->down = yyvsp[-1];
	 ;
    break;}
case 32:
#line 288 "Parser.yy"
{yyval = new AST(null_node,"");;
    break;}
case 48:
#line 306 "Parser.yy"
{yyvsp[-1]->addChild(yyvsp[0]); yyval = new AST(OP_SCALL,yyvsp[-1]);;
    break;}
case 49:
#line 310 "Parser.yy"
{yyval = new AST(OP_PARENS,yyvsp[0]);;
    break;}
case 50:
#line 311 "Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);;
    break;}
case 51:
#line 315 "Parser.yy"
{yyexpect("list of identifiers (to be tagged as persistent)");;
    break;}
case 52:
#line 316 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]); ;
    break;}
case 53:
#line 320 "Parser.yy"
{yyexpect("list of identifiers (to be tagged as global)");;
    break;}
case 54:
#line 321 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);;
    break;}
case 56:
#line 326 "Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);;
    break;}
case 61:
#line 345 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 62:
#line 345 "Parser.yy"
{
	  yyval = yyvsp[-4]; yyval->addChild(yyvsp[-2]); if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	;
    break;}
case 63:
#line 351 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 64:
#line 351 "Parser.yy"
{yyval = yyvsp[0];;
    break;}
case 65:
#line 352 "Parser.yy"
{yyval = NULL;;
    break;}
case 66:
#line 356 "Parser.yy"
{yyexpect("test expression for switch");;
    break;}
case 67:
#line 357 "Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); 
	  if (yyvsp[-2] != NULL) yyval->addChild(yyvsp[-2]); 
	  if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	;
    break;}
case 71:
#line 369 "Parser.yy"
{yyval = NULL;;
    break;}
case 73:
#line 374 "Parser.yy"
{
	  yyval = new AST(OP_CASEBLOCK,yyvsp[0]);
	;
    break;}
case 74:
#line 377 "Parser.yy"
{
	  yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);
	;
    break;}
case 75:
#line 383 "Parser.yy"
{yyexpect("case test expression");;
    break;}
case 76:
#line 384 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 77:
#line 385 "Parser.yy"
{
	  yyval = yyvsp[-4]; yyval->addChild(yyvsp[-2]); yyval->addChild(yyvsp[0]);
	;
    break;}
case 78:
#line 391 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 79:
#line 392 "Parser.yy"
{
	  yyval = yyvsp[0];
	;
    break;}
case 80:
#line 395 "Parser.yy"
{
	  yyval = NULL;
	;
    break;}
case 81:
#line 401 "Parser.yy"
{yyexpect("for index expression id=expr or (id=expr) or id");;
    break;}
case 82:
#line 402 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 83:
#line 403 "Parser.yy"
{yyexpect("matching 'end' statement to 'for'");;
    break;}
case 84:
#line 404 "Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); yyval->addChild(yyvsp[-2]);
	;
    break;}
case 85:
#line 410 "Parser.yy"
{yyexpect("identifier (the loop control variable)");;
    break;}
case 86:
#line 411 "Parser.yy"
{yyexpect("'=' followed by an expression");;
    break;}
case 87:
#line 412 "Parser.yy"
{yyexpect("expression");;
    break;}
case 88:
#line 413 "Parser.yy"
{yyexpect("matching ')'");;
    break;}
case 89:
#line 414 "Parser.yy"
{yyval = yyvsp[-6]; yyval->addChild(yyvsp[-2]);;
    break;}
case 90:
#line 415 "Parser.yy"
{yyexpect("'=' followed by an expression");;
    break;}
case 91:
#line 416 "Parser.yy"
{yyexpect("expression");;
    break;}
case 92:
#line 417 "Parser.yy"
{yyval = yyvsp[-4]; yyval->addChild(yyvsp[0]);;
    break;}
case 93:
#line 418 "Parser.yy"
{yyval = yyvsp[0]; yyval->addChild(new AST(OP_RHS, new AST(id_node,yyvsp[0]->text))); ;
    break;}
case 94:
#line 422 "Parser.yy"
{yyexpect("while test expression");;
    break;}
case 95:
#line 423 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 96:
#line 424 "Parser.yy"
{yyexpect("matching 'end' statement to 'while'");;
    break;}
case 97:
#line 425 "Parser.yy"
{
	  yyval = yyvsp[-6]; yyval->addChild(yyvsp[-4]); yyval->addChild(yyvsp[-2]);
	;
    break;}
case 98:
#line 431 "Parser.yy"
{yyexpect("test condition");;
    break;}
case 99:
#line 432 "Parser.yy"
{
	  yyval = yyvsp[-5]; yyval->addChild(yyvsp[-3]); if (yyvsp[-2] != NULL) yyval->addChild(yyvsp[-2]); 
	  if (yyvsp[-1] != NULL) yyval->addChild(yyvsp[-1]);
	;
    break;}
case 100:
#line 439 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 101:
#line 440 "Parser.yy"
{
	  yyval = new AST(OP_CSTAT,yyvsp[-2],yyvsp[0]);
	;
    break;}
case 102:
#line 446 "Parser.yy"
{yyval = NULL;;
    break;}
case 104:
#line 451 "Parser.yy"
{
	  yyval = new AST(OP_ELSEIFBLOCK,yyvsp[0]);
	;
    break;}
case 105:
#line 454 "Parser.yy"
{
	  yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);
	;
    break;}
case 106:
#line 460 "Parser.yy"
{yyexpect("test condition");;
    break;}
case 107:
#line 461 "Parser.yy"
{
	  yyval = yyvsp[0];
	;
    break;}
case 108:
#line 466 "Parser.yy"
{yyexpect("list of statements");;
    break;}
case 109:
#line 467 "Parser.yy"
{
	  yyval = yyvsp[0];
	;
    break;}
case 110:
#line 470 "Parser.yy"
{yyval = NULL;;
    break;}
case 111:
#line 474 "Parser.yy"
{yyexpect("expression after '='");;
    break;}
case 112:
#line 475 "Parser.yy"
{yyval = new AST(OP_ASSIGN,yyvsp[-3],yyvsp[0]);;
    break;}
case 113:
#line 479 "Parser.yy"
{
	  yyvsp[-3]->addChild(new AST(OP_PARENS,yyvsp[-1]));
	  yyval = new AST(OP_MULTICALL,yyvsp[-6],yyvsp[-3]);
	;
    break;}
case 114:
#line 483 "Parser.yy"
{
	  yyvsp[0]->addChild(new AST(OP_PARENS,NULL));
	  yyval = new AST(OP_MULTICALL,yyvsp[-3],yyvsp[0]);
	;
    break;}
case 115:
#line 490 "Parser.yy"
{yyexpect("an expression after ':'");;
    break;}
case 116:
#line 490 "Parser.yy"
{yyval = new AST(OP_COLON,yyvsp[-3],yyvsp[0]);;
    break;}
case 118:
#line 492 "Parser.yy"
{yyexpect("an expression after '+'");;
    break;}
case 119:
#line 492 "Parser.yy"
{yyval = new AST(OP_PLUS,yyvsp[-3],yyvsp[0]);;
    break;}
case 120:
#line 493 "Parser.yy"
{yyexpect("an expression after '-'");;
    break;}
case 121:
#line 493 "Parser.yy"
{yyval = new AST(OP_SUBTRACT,yyvsp[-3],yyvsp[0]);;
    break;}
case 122:
#line 494 "Parser.yy"
{yyexpect("an expression after '*'");;
    break;}
case 123:
#line 494 "Parser.yy"
{yyval = new AST(OP_TIMES,yyvsp[-3],yyvsp[0]);;
    break;}
case 124:
#line 495 "Parser.yy"
{yyexpect("an expression after '/'");;
    break;}
case 125:
#line 495 "Parser.yy"
{yyval = new AST(OP_RDIV,yyvsp[-3],yyvsp[0]);;
    break;}
case 126:
#line 496 "Parser.yy"
{yyexpect("an expression after '\\'");;
    break;}
case 127:
#line 496 "Parser.yy"
{yyval = new AST(OP_LDIV,yyvsp[-3],yyvsp[0]);;
    break;}
case 128:
#line 497 "Parser.yy"
{yyexpect("an expression after '|'");;
    break;}
case 129:
#line 497 "Parser.yy"
{yyval = new AST(OP_OR,yyvsp[-3],yyvsp[0]);;
    break;}
case 130:
#line 498 "Parser.yy"
{yyexpect("an expression after '&'");;
    break;}
case 131:
#line 498 "Parser.yy"
{yyval = new AST(OP_AND,yyvsp[-3],yyvsp[0]);;
    break;}
case 132:
#line 499 "Parser.yy"
{yyexpect("an expression after '<'");;
    break;}
case 133:
#line 499 "Parser.yy"
{yyval = new AST(OP_LT,yyvsp[-3],yyvsp[0]);;
    break;}
case 134:
#line 500 "Parser.yy"
{yyexpect("an expression after '<='");;
    break;}
case 135:
#line 500 "Parser.yy"
{yyval = new AST(OP_LEQ,yyvsp[-3],yyvsp[0]);;
    break;}
case 136:
#line 501 "Parser.yy"
{yyexpect("an expression after '>'");;
    break;}
case 137:
#line 501 "Parser.yy"
{yyval = new AST(OP_GT,yyvsp[-3],yyvsp[0]);;
    break;}
case 138:
#line 502 "Parser.yy"
{yyexpect("an expression after '>='");;
    break;}
case 139:
#line 502 "Parser.yy"
{yyval = new AST(OP_GEQ,yyvsp[-3],yyvsp[0]);;
    break;}
case 140:
#line 503 "Parser.yy"
{yyexpect("an expression after '=='");;
    break;}
case 141:
#line 503 "Parser.yy"
{yyval = new AST(OP_EQ,yyvsp[-3],yyvsp[0]);;
    break;}
case 142:
#line 504 "Parser.yy"
{yyexpect("an expression after '~='");;
    break;}
case 143:
#line 504 "Parser.yy"
{yyval = new AST(OP_NEQ,yyvsp[-3],yyvsp[0]);;
    break;}
case 144:
#line 505 "Parser.yy"
{yyexpect("an expression after '.*'");;
    break;}
case 145:
#line 505 "Parser.yy"
{yyval = new AST(OP_DOT_TIMES,yyvsp[-3],yyvsp[0]);;
    break;}
case 146:
#line 506 "Parser.yy"
{yyexpect("an expression after './'");;
    break;}
case 147:
#line 506 "Parser.yy"
{yyval = new AST(OP_DOT_RDIV,yyvsp[-3],yyvsp[0]);;
    break;}
case 148:
#line 507 "Parser.yy"
{yyexpect("an expression after '.\\'");;
    break;}
case 149:
#line 507 "Parser.yy"
{yyval = new AST(OP_DOT_LDIV,yyvsp[-3],yyvsp[0]);;
    break;}
case 150:
#line 508 "Parser.yy"
{yyexpect("an expression after '-'");;
    break;}
case 151:
#line 508 "Parser.yy"
{yyval = new AST(OP_NEG,yyvsp[0]);;
    break;}
case 152:
#line 509 "Parser.yy"
{yyexpect("an expression after '+'");;
    break;}
case 153:
#line 509 "Parser.yy"
{yyval = yyvsp[0];;
    break;}
case 154:
#line 510 "Parser.yy"
{yyexpect("an expression after '~'");;
    break;}
case 155:
#line 510 "Parser.yy"
{yyval = new AST(OP_NOT,yyvsp[0]);;
    break;}
case 156:
#line 511 "Parser.yy"
{yyexpect("an expression after '^'");;
    break;}
case 157:
#line 511 "Parser.yy"
{yyval = new AST(OP_POWER,yyvsp[-3],yyvsp[0]);;
    break;}
case 158:
#line 512 "Parser.yy"
{yyexpect("an expression after '.^'");;
    break;}
case 159:
#line 512 "Parser.yy"
{yyval = new AST(OP_DOT_POWER,yyvsp[-3],yyvsp[0]);;
    break;}
case 160:
#line 513 "Parser.yy"
{yyval = new AST(OP_TRANSPOSE,yyvsp[-1]);;
    break;}
case 161:
#line 514 "Parser.yy"
{yyval = new AST(OP_DOT_TRANSPOSE,yyvsp[-1]);;
    break;}
case 162:
#line 515 "Parser.yy"
{yyexpect("an expression after '('");;
    break;}
case 163:
#line 515 "Parser.yy"
{yyexpect("right parenthesis ')'");;
    break;}
case 164:
#line 516 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 168:
#line 523 "Parser.yy"
{yyval = new AST(OP_RHS,yyvsp[0]);;
    break;}
case 169:
#line 524 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 170:
#line 525 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 171:
#line 526 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 172:
#line 527 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 173:
#line 528 "Parser.yy"
{yyval = new AST(OP_EMPTY,NULL);;
    break;}
case 174:
#line 529 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 175:
#line 530 "Parser.yy"
{yyval = yyvsp[-1];;
    break;}
case 176:
#line 531 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 177:
#line 532 "Parser.yy"
{yyval = yyvsp[-2];;
    break;}
case 178:
#line 533 "Parser.yy"
{yyval = new AST(OP_EMPTY_CELL,NULL);;
    break;}
case 180:
#line 538 "Parser.yy"
{yyval = yyvsp[-1]; yyval->addChild(yyvsp[0]);;
    break;}
case 181:
#line 542 "Parser.yy"
{yyval = new AST(OP_PARENS,yyvsp[-1]); ;
    break;}
case 182:
#line 543 "Parser.yy"
{yyval = new AST(OP_BRACES,yyvsp[-1]); ;
    break;}
case 183:
#line 544 "Parser.yy"
{yyval = new AST(OP_DOT,yyvsp[0]); ;
    break;}
case 185:
#line 549 "Parser.yy"
{yyval = new AST(OP_ALL,NULL);;
    break;}
case 186:
#line 550 "Parser.yy"
{yyval = new AST(OP_KEYWORD,yyvsp[-2],yyvsp[0]);;
    break;}
case 187:
#line 551 "Parser.yy"
{yyval = new AST(OP_KEYWORD,yyvsp[0]);;
    break;}
case 189:
#line 556 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addPeer(yyvsp[0]);;
    break;}
case 190:
#line 560 "Parser.yy"
{yyval = new AST(OP_BRACES,yyvsp[0]);;
    break;}
case 191:
#line 561 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);;
    break;}
case 192:
#line 565 "Parser.yy"
{yyval = new AST(OP_BRACKETS,yyvsp[0]);;
    break;}
case 193:
#line 566 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);;
    break;}
case 198:
#line 578 "Parser.yy"
{yyval = new AST(OP_SEMICOLON,yyvsp[0]);;
    break;}
case 199:
#line 579 "Parser.yy"
{yyval = yyvsp[-2]; yyval->addChild(yyvsp[0]);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 582 "Parser.yy"


namespace FreeMat {
  
  void resetParser() {
    mainAST = NULL;
    mainMDef = NULL;
    errorOccured = false;
  }
  
  ASTPtr getParsedScriptBlock() {
    return mainAST;
  }
  
  MFunctionDef* getParsedFunctionDef() {
    return mainMDef;
  }
  
  ParserState parseState() {
    if (errorOccured)
      return ParseError;
    if (mainAST != NULL) 
      return ScriptBlock;
    else
      return FuncDef;
  }
  
  ParserState parseString(char *txt) {
/*     yydebug = 1; 	*/
    resetParser();
    interactiveMode = true;
    yyexpect("a valid list of statements");
    setLexBuffer(txt);
    try {
      yyparse();
    } catch (Exception& e) {
      yyerror(e.getMessageCopy());
    }
    return parseState();
  }
  
  ParserState parseFile(FILE *fp, const char* fname) {
    resetParser();
    interactiveMode = false;
    filename = fname;
    setLexFile(fp);
    yyexpect("a valid function definition or script");
    try {
      yyparse();
    } catch (Exception& e) {
      yyerror(e.getMessageCopy());
    }
    return parseState();
  }
  
}
