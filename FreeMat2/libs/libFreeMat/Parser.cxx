
/*  A Bison parser, made from Parser.yxx
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	257
#define	NUMERIC	258
#define	ENDQSTMNT	259
#define	ENDSTMNT	260
#define	LE	261
#define	GE	262
#define	EQ	263
#define	DOTTIMES	264
#define	DOTRDIV	265
#define	DOTLDIV	266
#define	DOTPOWER	267
#define	DOTTRANSPOSE	268
#define	STRING	269
#define	SPECIALCALL	270
#define	END	271
#define	IF	272
#define	FUNCTION	273
#define	FOR	274
#define	BREAK	275
#define	MAGICEND	276
#define	WHILE	277
#define	ELSE	278
#define	ELSEIF	279
#define	SWITCH	280
#define	CASE	281
#define	OTHERWISE	282
#define	CONTINUE	283
#define	TRY	284
#define	CATCH	285
#define	FIELD	286
#define	REFLPAREN	287
#define	REFRPAREN	288
#define	PERSISTENT	289
#define	KEYBOARD	290
#define	RETURN	291
#define	VARARGIN	292
#define	VARARGOUT	293
#define	GLOBAL	294
#define	QUIT	295
#define	RETALL	296
#define	SOR	297
#define	SAND	298
#define	NE	299
#define	POS	300
#define	NEG	301
#define	NOT	302

#line 1 "Parser.yxx"

// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

    /*************************************************************
     * $Source$
     * $Revision$
     * $Date$
     * $Author$
     *************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "AST.hpp"
#include "WalkTree.hpp"
#include "FunctionDef.hpp"
#include "ParserInterface.hpp"
#include "Exception.hpp"

#define YYDEBUG 1
#define YYSTYPE ParseRHS

#define MSGBUFLEN 2048
static char msgBuffer[MSGBUFLEN];

#include "LexerInterface.hpp"

//extern char* yytext;
extern int yylex(void);

extern int yydebug;
extern const char *parsing_filename;

bool interactiveMode;

#ifdef WIN32
#define snprintf _snprintf
#endif

namespace FreeMat {
  static ASTPtr mainAST;
  static MFunctionDef *mainMDef;

  void yyerror(const char *s) {
     return;
  }

  void chainFunction(MFunctionDef *r) {
     r->nextFunction = NULL;
     r->prevFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	if (r->nextFunction)
	  r->nextFunction->prevFunction = r;
	mainMDef->nextFunction = r;
	r->prevFunction = mainMDef;
     }
  }

  std::string decodeline(ParseRHS val) {
    int tokenID;
    int linenumber, colnumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    char buffer[256];
    sprintf(buffer,"%d",linenumber);
    return(std::string(buffer));
  }
  
  int yyxpt(std::string xStr, ParseRHS val) {
    char buffer[256];
    int addone = 1;
    int tokenID;
    int linenumber, colnumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    colnumber = tokenID >> 16;
    if (!interactiveMode)
      snprintf(msgBuffer,MSGBUFLEN,
      "Expecting %s\n\tat line %d, column %d of file %s",
       xStr.c_str(),linenumber,colnumber,parsing_filename);
    else
      snprintf(msgBuffer,MSGBUFLEN,"Expecting %s",xStr.c_str());
    throw Exception(msgBuffer);
    return 0;
  }
}

using namespace FreeMat;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		340
#define	YYFLAG		-32768
#define	YYNTBASE	74

#define YYTRANSLATE(x) ((unsigned)(x) <= 302 ? yytranslate[x] : 122)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    68,     2,     2,    46,    60,    61,
    62,    53,    51,    66,    52,    73,    54,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    50,    67,    47,
    63,    48,     2,    70,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    64,    55,    65,    59,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    71,    45,    72,    69,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    49,    56,
    57,    58
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     5,     7,    16,    24,    30,    35,    43,
    50,    53,    57,    62,    69,    73,    78,    84,    92,    94,
    97,   100,   103,   108,   111,   114,   118,   123,   125,   129,
   131,   134,   136,   139,   142,   145,   148,   150,   152,   153,
   155,   157,   159,   161,   163,   165,   167,   169,   171,   173,
   175,   177,   179,   181,   183,   186,   189,   192,   195,   198,
   201,   204,   207,   210,   213,   216,   218,   221,   224,   226,
   228,   230,   232,   237,   242,   245,   246,   253,   260,   262,
   264,   266,   268,   270,   272,   274,   275,   277,   279,   282,
   287,   290,   291,   297,   303,   309,   313,   315,   321,   326,
   330,   333,   337,   339,   345,   348,   354,   360,   363,   369,
   373,   376,   379,   380,   382,   384,   387,   390,   393,   396,
   397,   400,   404,   408,   417,   423,   432,   440,   447,   453,
   457,   461,   463,   467,   471,   475,   479,   483,   487,   491,
   495,   499,   503,   507,   511,   515,   519,   523,   527,   531,
   535,   539,   543,   547,   551,   555,   559,   563,   567,   571,
   575,   579,   583,   587,   591,   595,   599,   603,   607,   610,
   613,   616,   619,   623,   627,   631,   635,   638,   641,   645,
   649,   652,   654,   656,   658,   661,   663,   667,   670,   675,
   680,   686,   689,   693,   698,   703,   709,   712,   715,   717,
   720,   724,   727,   731,   735,   739,   742,   747,   749,   751,
   756,   761,   764,   767,   769,   773,   775,   779,   781,   785,
   787,   789,   791,   793,   795
};

static const short yyrhs[] = {    80,
     0,    76,     0,     0,     1,     0,    19,    77,     3,    61,
    78,    62,    95,    80,     0,    19,     3,    61,    78,    62,
    95,    80,     0,    19,    77,     3,    95,    80,     0,    19,
     3,    95,    80,     0,    19,    77,     3,    61,    62,    95,
    80,     0,    19,     3,    61,    62,    95,    80,     0,    19,
     1,     0,    19,     3,     1,     0,    19,     3,    61,     1,
     0,    19,     3,    61,    78,    62,     1,     0,    19,    77,
     1,     0,    19,    77,     3,     1,     0,    19,    77,     3,
    61,     1,     0,    19,    77,     3,    61,    78,    62,     1,
     0,    75,     0,    76,    75,     0,    39,    63,     0,     3,
    63,     0,    64,    78,    65,    63,     0,     3,     1,     0,
    64,     1,     0,    64,    78,     1,     0,    64,    78,    65,
     1,     0,    79,     0,    78,    66,    79,     0,     3,     0,
    46,     3,     0,    81,     0,    80,    81,     0,    82,     5,
     0,    82,     6,     0,    82,    66,     0,   109,     0,   111,
     0,     0,   110,     0,   100,     0,    90,     0,    89,     0,
   102,     0,   103,     0,    93,     0,    91,     0,    88,     0,
    87,     0,    85,     0,    84,     0,    83,     0,    41,     0,
    42,     0,     3,     4,     0,    15,    15,     0,     3,    15,
     0,     3,     3,     0,    83,    15,     0,    83,     3,     0,
    83,     4,     0,    35,    86,     0,    35,     1,     0,    40,
    86,     0,    40,     1,     0,     3,     0,    86,     3,     0,
    86,     1,     0,    37,     0,    36,     0,    29,     0,    21,
     0,    30,    80,    92,    17,     0,    30,    80,    92,     1,
     0,    31,    80,     0,     0,    26,   111,    94,    96,    99,
    17,     0,    26,   111,    94,    96,    99,     1,     0,    66,
     0,     6,     0,     5,     0,    67,     0,    68,     0,     6,
     0,     5,     0,     0,    97,     0,    98,     0,    97,    98,
     0,    27,   111,    94,    80,     0,    28,    80,     0,     0,
    20,   101,    94,    80,    17,     0,    20,   101,    94,    80,
     1,     0,    61,     3,    63,   111,    62,     0,     3,    63,
   111,     0,     3,     0,    61,     3,    63,   111,     1,     0,
    61,     3,    63,     1,     0,    61,     3,     1,     0,    61,
     1,     0,     3,    63,     1,     0,     1,     0,    23,   111,
    94,    80,    17,     0,    23,     1,     0,    23,   111,    94,
    80,     1,     0,    18,   104,   105,   108,    17,     0,    18,
     1,     0,    18,   104,   105,   108,     1,     0,   111,    94,
    80,     0,   111,    94,     0,   111,     1,     0,     0,   106,
     0,   107,     0,   106,   107,     0,    25,   104,     0,    25,
     1,     0,    24,    80,     0,     0,    24,     1,     0,   113,
    63,   111,     0,   113,    63,     1,     0,    64,   118,    65,
    63,     3,    61,   116,    62,     0,    64,   118,    65,    63,
     3,     0,    64,   118,    65,    63,     3,    61,   116,     1,
     0,    64,   118,    65,    63,     3,    61,     1,     0,    64,
   118,    65,    63,     3,     1,     0,    64,   118,    65,    63,
     1,     0,   111,    50,   111,     0,   111,    50,     1,     0,
   112,     0,   111,    51,   111,     0,   111,    51,     1,     0,
   111,    52,   111,     0,   111,    52,     1,     0,   111,    53,
   111,     0,   111,    53,     1,     0,   111,    54,   111,     0,
   111,    54,     1,     0,   111,    55,   111,     0,   111,    55,
     1,     0,   111,    45,   111,     0,   111,    45,     1,     0,
   111,    46,   111,     0,   111,    46,     1,     0,   111,    43,
   111,     0,   111,    43,     1,     0,   111,    44,   111,     0,
   111,    44,     1,     0,   111,    47,   111,     0,   111,    47,
     1,     0,   111,     7,   111,     0,   111,     7,     1,     0,
   111,    48,   111,     0,   111,    48,     1,     0,   111,     8,
   111,     0,   111,     8,     1,     0,   111,     9,   111,     0,
   111,     9,     1,     0,   111,    49,   111,     0,   111,    49,
     1,     0,   111,    10,   111,     0,   111,    10,     1,     0,
   111,    11,   111,     0,   111,    11,     1,     0,   111,    12,
   111,     0,   111,    12,     1,     0,    52,   111,     0,    51,
   111,     0,    69,   111,     0,    69,     1,     0,   111,    59,
   111,     0,   111,    59,     1,     0,   111,    13,   111,     0,
   111,    13,     1,     0,   111,    60,     0,   111,    14,     0,
    61,   111,    62,     0,    61,   111,     1,     0,    61,     1,
     0,     4,     0,    15,     0,    22,     0,    70,     3,     0,
   113,     0,    64,   118,    65,     0,    64,     1,     0,    64,
   119,   118,    65,     0,    64,   118,   119,    65,     0,    64,
   119,   118,   119,    65,     0,    64,    65,     0,    71,   117,
    72,     0,    71,   119,   117,    72,     0,    71,   117,   119,
    72,     0,    71,   119,   117,   119,    72,     0,    71,    72,
     0,    71,     1,     0,     3,     0,   113,   114,     0,    61,
   116,    62,     0,    61,    62,     0,    61,   116,     1,     0,
    71,   116,    72,     0,    71,   116,     1,     0,    73,     3,
     0,    73,    61,   111,    62,     0,   111,     0,    50,     0,
    54,     3,    63,   111,     0,    54,     3,    63,     1,     0,
    54,     3,     0,    54,     1,     0,   115,     0,   116,    66,
   115,     0,   121,     0,   117,   119,   121,     0,   121,     0,
   118,   119,   121,     0,     6,     0,     5,     0,    66,     0,
    68,     0,   111,     0,   121,   120,   111,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   151,   152,   153,   154,   157,   167,   176,   185,   193,   202,
   210,   211,   213,   214,   215,   216,   218,   219,   223,   224,
   228,   229,   230,   231,   232,   233,   234,   238,   240,   243,
   244,   254,   255,   259,   264,   268,   274,   276,   277,   278,
   279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
   289,   290,   291,   291,   294,   295,   296,   297,   298,   299,
   300,   313,   314,   318,   319,   323,   324,   325,   329,   333,
   337,   340,   344,   347,   351,   353,   356,   361,   367,   368,
   368,   368,   368,   371,   372,   376,   377,   381,   384,   390,
   396,   399,   405,   408,   413,   414,   415,   417,   418,   419,
   420,   421,   422,   426,   429,   430,   435,   439,   440,   444,
   447,   450,   454,   455,   459,   462,   468,   471,   474,   477,
   478,   482,   483,   487,   491,   495,   497,   499,   501,   506,
   508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
   528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
   538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
   548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
   558,   561,   563,   564,   565,   566,   567,   568,   569,   570,
   571,   572,   573,   574,   575,   576,   577,   578,   580,   582,
   585,   587,   588,   589,   590,   591,   592,   595,   597,   598,
   599,   600,   601,   604,   605,   609,   610,   614,   615,   619,
   620,   623,   624,   627,   628
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"NUMERIC","ENDQSTMNT","ENDSTMNT","LE","GE","EQ","DOTTIMES","DOTRDIV","DOTLDIV",
"DOTPOWER","DOTTRANSPOSE","STRING","SPECIALCALL","END","IF","FUNCTION","FOR",
"BREAK","MAGICEND","WHILE","ELSE","ELSEIF","SWITCH","CASE","OTHERWISE","CONTINUE",
"TRY","CATCH","FIELD","REFLPAREN","REFRPAREN","PERSISTENT","KEYBOARD","RETURN",
"VARARGIN","VARARGOUT","GLOBAL","QUIT","RETALL","SOR","SAND","'|'","'&'","'<'",
"'>'","NE","':'","'+'","'-'","'*'","'/'","'\\\\'","POS","NEG","NOT","'^'","'\\''",
"'('","')'","'='","'['","']'","','","';'","'#'","'~'","'@'","'{'","'}'","'.'",
"program","functionDef","functionDefList","returnDeclaration","argumentList",
"argument","statementList","statement","statementType","specialCall","persistentStatement",
"globalStatement","identList","returnStatement","keyboardStatement","continueStatement",
"breakStatement","tryStatement","optionalCatch","switchStatement","optionalEndStatement",
"newLine","caseBlock","caseList","caseStatement","otherwiseClause","forStatement",
"forIndexExpression","whileStatement","ifStatement","conditionedStatement","elseIfBlock",
"elseIfStatementList","elseIfStatement","elseStatement","assignmentStatement",
"multiFunctionCall","expr","terminal","symbRefList","symbRef","indexElement",
"indexList","cellDef","matrixDef","rowSeperator","columnSep","rowDef", NULL
};
#endif

static const short yyr1[] = {     0,
    74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    76,    76,
    77,    77,    77,    77,    77,    77,    77,    78,    78,    79,
    79,    80,    80,    81,    81,    81,    82,    82,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    82,    82,    82,    82,    83,    83,    83,    83,    83,    83,
    83,    84,    84,    85,    85,    86,    86,    86,    87,    88,
    89,    90,    91,    91,    92,    92,    93,    93,    94,    94,
    94,    94,    94,    95,    95,    96,    96,    97,    97,    98,
    99,    99,   100,   100,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   102,   102,   102,   103,   103,   103,   104,
   104,   104,   105,   105,   106,   106,   107,   107,   108,   108,
   108,   109,   109,   110,   110,   110,   110,   110,   110,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   112,   112,   112,   112,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   112,   113,   113,
   114,   114,   114,   114,   114,   114,   114,   115,   115,   115,
   115,   115,   115,   116,   116,   117,   117,   118,   118,   119,
   119,   120,   120,   121,   121
};

static const short yyr2[] = {     0,
     1,     1,     0,     1,     8,     7,     5,     4,     7,     6,
     2,     3,     4,     6,     3,     4,     5,     7,     1,     2,
     2,     2,     4,     2,     2,     3,     4,     1,     3,     1,
     2,     1,     2,     2,     2,     2,     1,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     2,     1,     1,
     1,     1,     4,     4,     2,     0,     6,     6,     1,     1,
     1,     1,     1,     1,     1,     0,     1,     1,     2,     4,
     2,     0,     5,     5,     5,     3,     1,     5,     4,     3,
     2,     3,     1,     5,     2,     5,     5,     2,     5,     3,
     2,     2,     0,     1,     1,     2,     2,     2,     2,     0,
     2,     3,     3,     8,     5,     8,     7,     6,     5,     3,
     3,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
     2,     2,     3,     3,     3,     3,     2,     2,     3,     3,
     2,     1,     1,     1,     2,     1,     3,     2,     4,     4,
     5,     2,     3,     4,     4,     5,     2,     2,     1,     2,
     3,     2,     3,     3,     3,     2,     4,     1,     1,     4,
     4,     2,     2,     1,     3,     1,     3,     1,     3,     1,
     1,     1,     1,     1,     3
};

static const short yydefact[] = {     0,
     4,   199,   182,   183,     0,     0,     0,    72,   184,     0,
     0,    71,    39,     0,    70,    69,     0,    53,    54,     0,
     0,     0,     0,     0,     0,     0,    19,     2,    39,    32,
     0,    52,    51,    50,    49,    48,    43,    42,    47,    46,
    41,    44,    45,    37,    40,    38,   132,   186,    58,    55,
    57,    56,   108,   199,   183,     0,   113,     0,   186,    11,
     0,     0,     0,     0,   103,    97,     0,     0,   105,     0,
     0,    39,    63,    66,     0,    65,     0,   170,   169,   181,
     0,   188,   221,   220,   192,   224,     0,     0,   218,   172,
   171,   185,   198,   197,     0,     0,   216,    20,    33,    34,
    35,    36,    60,    61,    59,     0,     0,     0,     0,     0,
     0,     0,   178,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   177,     0,     0,
     0,     0,   200,     0,     0,   120,   114,   115,   112,    81,
    80,    79,    82,    83,   111,    12,    85,    84,     0,    22,
    39,    21,    25,    30,     0,     0,    28,    15,     0,     0,
   101,     0,    39,    39,    86,    39,     0,    68,    67,   180,
   179,   187,     0,     0,   222,   223,     0,   193,     0,     0,
   154,   153,   158,   157,   160,   159,   164,   163,   166,   165,
   168,   167,   176,   175,   148,   147,   150,   149,   144,   143,
   146,   145,   152,   151,   156,   155,   162,   161,   131,   130,
   134,   133,   136,   135,   138,   137,   140,   139,   142,   141,
   174,   173,   209,     0,   202,   208,   214,     0,   123,   122,
     0,   206,     0,   187,   118,   117,     0,     0,   116,   110,
    13,     0,     0,    39,    31,    26,     0,     0,    16,     0,
    39,   102,    96,   100,     0,     0,     0,     0,    92,    87,
    88,    39,    74,    73,     0,   190,   219,   189,     0,   225,
   195,   217,   194,     0,   213,   212,   203,   201,     0,   205,
   204,     0,   121,    39,   109,   107,    39,     0,    27,    23,
    29,    17,     0,     0,    39,    99,     0,    94,    93,   106,
   104,     0,    39,     0,    89,   129,     0,   191,   196,     0,
   215,   207,    39,    14,    39,    39,     0,    98,    95,    39,
    39,    78,    77,   128,     0,   211,   210,    39,    39,    18,
    39,    90,   127,     0,    39,   126,   124,     0,     0,     0
};

static const short yydefgoto[] = {   338,
    27,    28,    64,   156,   157,    29,    30,    31,    32,    33,
    34,    75,    35,    36,    37,    38,    39,   167,    40,   145,
   151,   259,   260,   261,   304,    41,    68,    42,    43,    57,
   136,   137,   138,   238,    44,    45,    46,    47,    59,   133,
   227,   228,    95,    87,    88,   177,    89
};

static const short yypact[] = {   343,
-32768,    53,-32768,    52,   138,   158,    25,-32768,-32768,  1271,
  2149,-32768,  2022,   176,-32768,-32768,   235,-32768,-32768,  2149,
  2149,  1298,  1239,  1342,    34,   228,-32768,    51,   756,-32768,
   132,   179,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  2400,-32768,   140,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1239,    23,  2216,   143,-32768,
    39,    -2,    48,   244,-32768,    86,   257,   125,-32768,  2242,
  2242,  1019,-32768,-32768,    33,-32768,    59,   182,   182,-32768,
  2304,-32768,-32768,-32768,-32768,  2400,    36,  2149,   195,-32768,
   182,-32768,-32768,-32768,    19,  2149,   195,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,  1357,  1373,  1395,  1435,  1457,
  1473,  1488,-32768,  1516,  1532,  1547,  1575,  1591,  1606,  1634,
  1650,  1665,  1693,  1709,  1724,  1752,  1768,-32768,  2046,  1783,
  2072,    75,-32768,   141,  1811,   147,    23,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1963,   264,-32768,-32768,     9,-32768,
  2022,-32768,-32768,-32768,   153,    14,-32768,-32768,   149,  1827,
-32768,    29,  2022,  2022,   135,  2022,    42,-32768,-32768,-32768,
-32768,   102,  2098,   163,-32768,-32768,  2149,-32768,  1886,    26,
-32768,  2549,-32768,  2549,-32768,  2549,-32768,   182,-32768,   182,
-32768,   182,-32768,   182,-32768,  2454,-32768,  2470,-32768,  2524,
-32768,  2538,-32768,  2549,-32768,  2549,-32768,  2549,-32768,  2600,
-32768,  2144,-32768,  2144,-32768,   182,-32768,   182,-32768,   182,
-32768,   182,-32768,   267,-32768,  2400,-32768,    15,-32768,  2400,
    10,-32768,  2149,-32768,-32768,-32768,   960,    46,-32768,  1963,
-32768,   212,    -8,   402,-32768,-32768,    32,    43,-32768,   177,
  2022,-32768,  2400,-32768,  1842,   818,   889,  2149,   156,   135,
-32768,  1078,-32768,-32768,   271,-32768,   195,-32768,  2124,  2400,
-32768,   195,-32768,  1901,-32768,   124,-32768,-32768,  2072,-32768,
-32768,  2380,-32768,  1137,-32768,-32768,  2022,   214,-32768,-32768,
-32768,-32768,   212,    78,   461,-32768,  2324,-32768,-32768,-32768,
-32768,  2242,  2022,    49,-32768,-32768,    68,-32768,-32768,  1870,
-32768,-32768,   520,-32768,  2022,  2022,   220,-32768,-32768,  2022,
  1196,-32768,-32768,-32768,  1267,-32768,  2400,   579,   638,-32768,
  2022,  1963,-32768,    21,   697,-32768,-32768,   205,   224,-32768
};

static const short yypgoto[] = {-32768,
   184,-32768,-32768,  -140,     6,    22,    61,-32768,-32768,-32768,
-32768,   210,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -67,
  -145,-32768,-32768,   -14,-32768,-32768,-32768,-32768,-32768,   114,
-32768,-32768,   127,-32768,-32768,-32768,    -3,-32768,     0,-32768,
   -10,  -125,   181,    -4,     1,-32768,   -21
};


#define	YYLAST		2660


static const short yytable[] = {    48,
   163,    58,   164,   165,    97,   231,    70,    71,   243,   241,
   280,   154,    48,   251,   246,   277,    78,    79,    81,    86,
    91,   336,    86,    83,    84,    65,    96,    66,    48,   254,
    83,    84,   289,   168,    72,   169,    92,   -62,   -62,   146,
    83,    84,   263,   147,   148,   154,   285,   135,   153,   322,
   154,   134,    86,   288,   155,    49,    50,   248,   264,   168,
   152,   169,   286,   -64,   -64,   323,    52,    51,   324,     6,
   242,    48,  -125,  -125,    97,   279,   278,   232,   247,   248,
   279,   281,   337,   174,    86,    67,   279,   173,   155,    99,
   178,   255,    86,   155,   290,   179,   287,   273,   -62,   149,
   172,   150,   182,   184,   186,   188,   190,   192,   194,   294,
   196,   198,   200,   202,   204,   206,   208,   210,   212,   214,
   216,   218,   220,   222,   -64,   226,   230,   226,   325,   140,
   141,    58,    99,  -125,   173,   233,   100,   101,    53,   317,
    54,     3,   315,   248,    48,    83,    84,   316,   160,   249,
    48,   267,    55,   147,   148,   245,   253,   272,    60,     9,
    61,   258,    48,    48,   265,    48,   240,    83,    84,    86,
   237,   331,   244,   270,   269,    86,    73,   292,    74,   154,
   274,   103,   104,   303,   256,   257,   310,   262,    20,    21,
   142,   143,   144,   105,   112,   113,    62,   102,    22,   334,
   129,    56,   130,   129,   339,   234,    24,    25,    26,   250,
   131,    98,   132,   131,   314,   132,   147,   148,   147,   148,
   330,    63,   155,   340,   147,   148,    77,   268,    93,   282,
    54,     3,    83,    84,   320,    76,    48,    74,   293,    48,
   127,   128,    55,    48,   158,   305,   159,   267,   236,     9,
    48,   297,   272,   291,   302,    48,    48,   161,   284,   162,
   175,    48,   176,   239,   -24,    86,   -24,   275,   311,   276,
    86,   306,   295,   307,     0,   226,   180,     0,    20,    21,
     0,     0,     0,    48,     0,     0,    48,     0,    22,     0,
     0,    56,     0,     0,    48,     0,    24,    25,    26,    94,
    99,     0,    48,     0,    99,     0,   327,     0,   313,     0,
     0,     0,    48,     0,    48,    48,    99,    99,     0,    48,
    48,   226,    99,     0,   321,     0,     0,    48,    48,     0,
    48,    48,     0,     0,    48,     0,   328,   329,     0,     0,
     0,   332,    -3,     1,    99,     2,     3,   -39,   -39,     0,
     0,     0,   335,     0,     0,    99,     0,     4,     0,     0,
     5,     6,     7,     8,     9,    10,     0,     0,    11,     0,
     0,    12,    13,    99,     0,     0,     0,    14,    15,    16,
     0,    99,    17,    18,    19,     0,     0,     0,    99,    99,
     0,     0,    99,    20,    21,    99,     0,     0,     0,     0,
     0,    -8,     0,    22,     2,     3,    23,     0,   -39,     0,
     0,    24,    25,    26,     0,     0,     4,     0,     0,     5,
    -8,     7,     8,     9,    10,     0,     0,    11,     0,     0,
    12,    13,     0,     0,     0,     0,    14,    15,    16,     0,
     0,    17,    18,    19,     0,     0,     0,     0,     0,     0,
     0,     0,    20,    21,     0,     0,     0,     0,     0,     0,
    -7,     0,    22,     2,     3,    23,     0,     0,     0,     0,
    24,    25,    26,     0,     0,     4,     0,     0,     5,    -7,
     7,     8,     9,    10,     0,     0,    11,     0,     0,    12,
    13,     0,     0,     0,     0,    14,    15,    16,     0,     0,
    17,    18,    19,     0,     0,     0,     0,     0,     0,     0,
     0,    20,    21,     0,     0,     0,     0,     0,     0,   -10,
     0,    22,     2,     3,    23,     0,     0,     0,     0,    24,
    25,    26,     0,     0,     4,     0,     0,     5,   -10,     7,
     8,     9,    10,     0,     0,    11,     0,     0,    12,    13,
     0,     0,     0,     0,    14,    15,    16,     0,     0,    17,
    18,    19,     0,     0,     0,     0,     0,     0,     0,     0,
    20,    21,     0,     0,     0,     0,     0,     0,    -6,     0,
    22,     2,     3,    23,     0,     0,     0,     0,    24,    25,
    26,     0,     0,     4,     0,     0,     5,    -6,     7,     8,
     9,    10,     0,     0,    11,     0,     0,    12,    13,     0,
     0,     0,     0,    14,    15,    16,     0,     0,    17,    18,
    19,     0,     0,     0,     0,     0,     0,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,    -9,     0,    22,
     2,     3,    23,     0,     0,     0,     0,    24,    25,    26,
     0,     0,     4,     0,     0,     5,    -9,     7,     8,     9,
    10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
     0,     0,    14,    15,    16,     0,     0,    17,    18,    19,
     0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,    -5,     0,    22,     2,
     3,    23,     0,     0,     0,     0,    24,    25,    26,     0,
     0,     4,     0,     0,     5,    -5,     7,     8,     9,    10,
     0,     0,    11,     0,     0,    12,    13,     0,     0,     0,
     0,    14,    15,    16,     0,     0,    17,    18,    19,     0,
     0,     0,     0,     0,     0,     0,     0,    20,    21,     0,
     0,     0,     0,     0,     0,    -1,     0,    22,     2,     3,
    23,     0,     0,     0,     0,    24,    25,    26,     0,     0,
     4,     0,     0,     5,     0,     7,     8,     9,    10,     0,
     0,    11,     0,     0,    12,    13,     0,     0,     0,     0,
    14,    15,    16,     0,     0,    17,    18,    19,     0,     0,
     0,     0,     0,     0,     0,     0,    20,    21,     0,     0,
     0,     0,     0,     0,     0,     0,    22,     0,   298,    23,
     2,     3,   -39,   -39,    24,    25,    26,     0,     0,     0,
     0,     0,     4,     0,   299,     5,     0,     7,     8,     9,
    10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
     0,     0,    14,    15,    16,     0,     0,    17,    18,    19,
     0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,     0,     0,    22,     0,
     0,    23,     0,   -39,     0,     0,    24,    25,    26,   300,
     0,     2,     3,   -39,   -39,     0,     0,     0,     0,     0,
     0,     0,     0,     4,     0,   301,     5,     0,     7,     8,
     9,    10,     0,     0,    11,     0,     0,    12,    13,     0,
     0,     0,     0,    14,    15,    16,     0,     0,    17,    18,
    19,     0,     0,     0,     0,     0,     0,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,     0,     0,    22,
     0,     0,    23,     0,   -39,     0,     0,    24,    25,    26,
   283,     0,     2,     3,   -39,   -39,     0,     0,     0,     0,
     0,     0,     0,     0,     4,     0,     0,     5,     0,     7,
     8,     9,    10,     0,     0,    11,     0,     0,    12,    13,
     0,     0,     0,     0,    14,    15,    16,     0,     0,    17,
    18,    19,     0,     0,     0,     0,     0,     0,     0,     0,
    20,    21,     0,     0,     0,     0,     0,     0,     0,   -76,
    22,     2,     3,    23,     0,   -39,     0,     0,    24,    25,
    26,     0,     0,     4,     0,   -76,     5,     0,     7,     8,
     9,    10,     0,     0,    11,     0,     0,    12,    13,   166,
     0,     0,     0,    14,    15,    16,     0,     0,    17,    18,
    19,     0,     0,     0,     0,     0,     0,     0,     0,    20,
    21,     0,     0,     0,     0,     0,     0,     0,   -75,    22,
     2,     3,    23,     0,     0,     0,     0,    24,    25,    26,
     0,     0,     4,     0,   -75,     5,     0,     7,     8,     9,
    10,     0,     0,    11,     0,     0,    12,    13,     0,     0,
     0,     0,    14,    15,    16,     0,     0,    17,    18,    19,
     0,     0,     0,     0,     0,     0,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,     0,  -119,    22,     2,
     3,    23,     0,     0,     0,     0,    24,    25,    26,     0,
     0,     4,     0,  -119,     5,     0,     7,     8,     9,    10,
     0,     0,    11,     0,     0,    12,    13,     0,     0,     0,
     0,    14,    15,    16,     0,     0,    17,    18,    19,     0,
     0,     0,     0,     0,     0,     0,     0,    20,    21,     0,
     0,     0,     0,     0,     0,     0,   -91,    22,     2,     3,
    23,     0,     0,     0,     0,    24,    25,    26,     0,     0,
     4,     0,   -91,     5,     0,     7,     8,     9,    10,     0,
     0,    11,     0,     0,    12,    13,     0,     0,     0,     0,
    14,    15,    16,     0,     0,    17,    18,    19,     0,    82,
     0,    54,     3,    83,    84,     0,    20,    21,     0,     0,
     0,     0,     0,    55,     0,     0,    22,     0,     0,    23,
     9,     0,     0,     0,    24,    25,    26,   333,     0,    54,
     3,    69,     0,    54,     3,     0,     0,     0,     0,     0,
     0,    55,     0,     0,     0,    55,     0,     0,     9,    20,
    21,     0,     9,     0,     0,     0,     0,     0,    80,    22,
    54,     3,    56,    85,     0,     0,     0,    24,    25,    26,
     0,     0,    55,     0,     0,     0,   223,    20,    21,     9,
   224,    20,    21,     0,     0,     0,     0,    22,     0,     0,
    56,    22,     0,     0,    56,    24,    25,    26,     0,    24,
    25,    26,    90,     0,    54,     3,     0,     0,    20,    21,
     0,     0,     0,     0,     0,     0,    55,   181,    22,    54,
     3,    56,     0,     9,     0,     0,    24,    25,    26,     0,
     0,    55,     0,   183,     0,    54,     3,     0,     9,     0,
     0,     0,     0,     0,     0,     0,     0,    55,     0,     0,
     0,     0,    20,    21,     9,   185,     0,    54,     3,     0,
     0,     0,    22,     0,     0,    56,     0,    20,    21,    55,
    24,    25,    26,     0,     0,     0,     9,    22,     0,     0,
    56,     0,     0,    20,    21,    24,    25,    26,     0,     0,
     0,     0,     0,    22,     0,   187,    56,    54,     3,     0,
     0,    24,    25,    26,     0,    20,    21,     0,     0,    55,
     0,     0,     0,     0,     0,    22,     9,   189,    56,    54,
     3,     0,     0,    24,    25,    26,     0,     0,     0,     0,
     0,    55,     0,   191,     0,    54,     3,     0,     9,     0,
     0,     0,     0,     0,     0,    20,    21,    55,   193,     0,
    54,     3,     0,     0,     9,    22,     0,     0,    56,     0,
     0,     0,    55,    24,    25,    26,     0,    20,    21,     9,
     0,     0,     0,     0,     0,     0,   195,    22,    54,     3,
    56,     0,     0,    20,    21,    24,    25,    26,     0,     0,
    55,     0,   197,    22,    54,     3,    56,     9,    20,    21,
     0,    24,    25,    26,     0,     0,    55,   199,    22,    54,
     3,    56,     0,     9,     0,     0,    24,    25,    26,     0,
     0,    55,     0,     0,     0,     0,    20,    21,     9,     0,
     0,     0,     0,     0,     0,   201,    22,    54,     3,    56,
     0,     0,    20,    21,    24,    25,    26,     0,     0,    55,
     0,   203,    22,    54,     3,    56,     9,    20,    21,     0,
    24,    25,    26,     0,     0,    55,   205,    22,    54,     3,
    56,     0,     9,     0,     0,    24,    25,    26,     0,     0,
    55,     0,     0,     0,     0,    20,    21,     9,     0,     0,
     0,     0,     0,     0,   207,    22,    54,     3,    56,     0,
     0,    20,    21,    24,    25,    26,     0,     0,    55,     0,
   209,    22,    54,     3,    56,     9,    20,    21,     0,    24,
    25,    26,     0,     0,    55,   211,    22,    54,     3,    56,
     0,     9,     0,     0,    24,    25,    26,     0,     0,    55,
     0,     0,     0,     0,    20,    21,     9,     0,     0,     0,
     0,     0,     0,   213,    22,    54,     3,    56,     0,     0,
    20,    21,    24,    25,    26,     0,     0,    55,     0,   215,
    22,    54,     3,    56,     9,    20,    21,     0,    24,    25,
    26,     0,     0,    55,   217,    22,    54,     3,    56,     0,
     9,     0,     0,    24,    25,    26,     0,     0,    55,     0,
     0,     0,     0,    20,    21,     9,     0,     0,     0,     0,
     0,     0,   219,    22,    54,     3,    56,     0,     0,    20,
    21,    24,    25,    26,     0,     0,    55,     0,   221,    22,
    54,     3,    56,     9,    20,    21,     0,    24,    25,    26,
     0,     0,    55,   229,    22,    54,     3,    56,     0,     9,
     0,     0,    24,    25,    26,     0,     0,    55,     0,     0,
     0,     0,    20,    21,     9,     0,     0,     0,     0,     0,
     0,   235,    22,    54,     3,    56,     0,     0,    20,    21,
    24,    25,    26,     0,     0,    55,     0,   252,    22,    54,
     3,    56,     9,    20,    21,     0,    24,    25,    26,     0,
     0,    55,   296,    22,    54,     3,    56,     0,     9,     0,
     0,    24,    25,    26,     0,     0,    55,     0,     0,     0,
     0,    20,    21,     9,     0,     0,     0,     0,     0,     0,
   326,    22,    54,     3,    56,     0,     0,    20,    21,    24,
    25,    26,     0,     0,    55,     0,     0,    22,    54,     3,
    56,     9,    20,    21,     0,    24,    25,    26,     0,     0,
    55,     0,    22,    54,     3,    56,     0,     9,     0,     0,
    24,    25,    26,     0,     0,    55,     0,     0,     0,     0,
    20,    21,     9,     0,     0,     0,     0,     0,     0,     0,
    22,     0,     0,    56,     0,     0,    20,    21,    24,    25,
    26,     0,     0,     0,     0,     0,    22,     0,     0,    56,
     0,    20,    21,     0,    24,    25,    26,   271,     0,     0,
     0,    22,     0,     0,    56,     2,     3,   -39,   -39,    24,
    25,    26,   309,     0,     0,     0,     0,     4,     0,     0,
     5,     0,     7,     8,     9,    10,     0,     0,    11,     0,
     0,    12,    13,     0,     0,     0,     0,    14,    15,    16,
     0,     0,    17,    18,    19,     0,     0,     0,     0,     0,
     0,     0,     0,    20,    21,     0,     0,     0,     0,     0,
     0,     0,     0,    22,     2,     3,    23,     0,   -39,     0,
     0,    24,    25,    26,     0,     0,     4,     0,     0,     5,
     0,     7,     8,     9,    10,     0,     0,    11,    54,     3,
    12,    13,     0,     0,     0,     0,    14,    15,    16,     0,
    55,    17,    18,    19,     0,     0,     0,     9,     0,     0,
     0,     0,    20,    21,    54,     3,     0,     0,     0,     0,
     0,     0,    22,     0,     0,    23,    55,     0,     0,     0,
    24,    25,    26,     9,     0,   223,    20,    21,     0,   224,
    54,     3,     0,     0,     0,     0,    22,   225,     0,    56,
     0,     0,    55,     0,    24,    25,    26,     0,     0,     9,
     0,   223,    20,    21,     0,   224,    54,     3,     0,     0,
     0,     0,    22,     0,     0,    56,     0,     0,    55,     0,
    24,    25,    26,     0,     0,     9,     0,     0,    20,    21,
     0,    54,     3,   109,   110,   111,   112,   113,    22,     0,
     0,    56,   266,    55,     0,     0,    24,    25,    26,     0,
     9,     0,     0,     0,    20,    21,     0,     0,     0,     0,
     0,     0,     0,     0,    22,     0,     0,    56,   308,     0,
     0,     0,    24,    25,    26,     0,   124,   125,   126,    20,
    21,     0,   127,   128,     0,     0,     0,     0,     0,    22,
     0,     0,    56,     0,     0,     0,   139,    24,    25,    26,
   140,   141,   106,   107,   108,   109,   110,   111,   112,   113,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   140,   141,   106,   107,
   108,   109,   110,   111,   112,   113,     0,     0,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,     0,     0,     0,   127,   128,     0,     0,     0,     0,
     0,   142,   143,   144,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,     0,     0,     0,
   127,   128,     0,     0,   170,     0,     0,   142,   143,   144,
   106,   107,   108,   109,   110,   111,   112,   113,     0,     0,
     0,     0,     0,     0,   318,     0,     0,     0,     0,     0,
   106,   107,   108,   109,   110,   111,   112,   113,     0,     0,
     0,     0,     0,     0,     0,     0,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,   127,   128,     0,   171,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,   127,   128,     0,   319,   106,   107,   108,   109,
   110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   107,   108,   109,
   110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
     0,     0,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,   127,   128,
     0,   312,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,   127,   128,
   106,   107,   108,   109,   110,   111,   112,   113,     0,     0,
     0,     0,     0,     0,     0,     0,   106,   107,   108,   109,
   110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,   127,   128,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,     0,     0,     0,   127,   128,
   106,   107,   108,   109,   110,   111,   112,   113,     0,     0,
     0,     0,     0,     0,   106,   107,   108,   109,   110,   111,
   112,   113,     0,     0,     0,     0,     0,     0,   109,   110,
   111,   112,   113,     0,     0,     0,     0,     0,     0,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     0,     0,   127,   128,   118,   119,   120,   121,   122,   123,
   124,   125,   126,     0,     0,     0,   127,   128,   121,   122,
   123,   124,   125,   126,     0,     0,     0,   127,   128,   109,
   110,   111,   112,   113,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,     0,     0,     0,   127,   128
};

static const short yycheck[] = {     0,
    68,     5,    70,    71,    26,   131,    10,    11,   149,     1,
     1,     3,    13,   159,     1,     1,    20,    21,    22,    23,
    24,     1,    26,     5,     6,     1,    26,     3,    29,     1,
     5,     6,     1,     1,    13,     3,     3,     5,     6,     1,
     5,     6,     1,     5,     6,     3,     1,    25,     1,     1,
     3,    56,    56,    62,    46,     3,     4,    66,    17,     1,
    63,     3,    17,     5,     6,    17,    15,    15,     1,    19,
    62,    72,     5,     6,    96,    66,    62,     3,    65,    66,
    66,    72,    62,    88,    88,    61,    66,    87,    46,    29,
    72,    63,    96,    46,    63,    95,   242,    72,    66,    61,
    65,    63,   106,   107,   108,   109,   110,   111,   112,   250,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,    66,   129,   130,   131,    61,     5,
     6,   135,    72,    66,   134,    61,     5,     6,     1,    62,
     3,     4,   288,    66,   145,     5,     6,   293,    63,     1,
   151,   173,    15,     5,     6,     3,   160,   179,     1,    22,
     3,    27,   163,   164,    63,   166,   145,     5,     6,   173,
    24,   317,   151,   177,   174,   179,     1,     1,     3,     3,
   180,     3,     4,    28,   163,   164,    63,   166,    51,    52,
    66,    67,    68,    15,    13,    14,    39,    66,    61,   325,
    61,    64,    63,    61,     0,    65,    69,    70,    71,    61,
    71,    28,    73,    71,     1,    73,     5,     6,     5,     6,
     1,    64,    46,     0,     5,     6,    17,    65,     1,   233,
     3,     4,     5,     6,   302,     1,   237,     3,    62,   240,
    59,    60,    15,   244,     1,   260,     3,   269,   135,    22,
   251,   255,   274,   248,   258,   256,   257,     1,   237,     3,
    66,   262,    68,   137,     1,   269,     3,     1,   279,     3,
   274,     1,   251,     3,    -1,   279,    96,    -1,    51,    52,
    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    61,    -1,
    -1,    64,    -1,    -1,   295,    -1,    69,    70,    71,    72,
   240,    -1,   303,    -1,   244,    -1,   310,    -1,   287,    -1,
    -1,    -1,   313,    -1,   315,   316,   256,   257,    -1,   320,
   321,   325,   262,    -1,   303,    -1,    -1,   328,   329,    -1,
   331,   332,    -1,    -1,   335,    -1,   315,   316,    -1,    -1,
    -1,   320,     0,     1,   284,     3,     4,     5,     6,    -1,
    -1,    -1,   331,    -1,    -1,   295,    -1,    15,    -1,    -1,
    18,    19,    20,    21,    22,    23,    -1,    -1,    26,    -1,
    -1,    29,    30,   313,    -1,    -1,    -1,    35,    36,    37,
    -1,   321,    40,    41,    42,    -1,    -1,    -1,   328,   329,
    -1,    -1,   332,    51,    52,   335,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    61,     3,     4,    64,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    15,    -1,    -1,    18,
    19,    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,
    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,
    -1,    40,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,
     0,    -1,    61,     3,     4,    64,    -1,    -1,    -1,    -1,
    69,    70,    71,    -1,    -1,    15,    -1,    -1,    18,    19,
    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,
    30,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    -1,
    40,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,     0,
    -1,    61,     3,     4,    64,    -1,    -1,    -1,    -1,    69,
    70,    71,    -1,    -1,    15,    -1,    -1,    18,    19,    20,
    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,
    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,
    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,
    61,     3,     4,    64,    -1,    -1,    -1,    -1,    69,    70,
    71,    -1,    -1,    15,    -1,    -1,    18,    19,    20,    21,
    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    52,    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    61,
     3,     4,    64,    -1,    -1,    -1,    -1,    69,    70,    71,
    -1,    -1,    15,    -1,    -1,    18,    19,    20,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
    -1,    -1,    -1,    -1,    -1,    -1,     0,    -1,    61,     3,
     4,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    -1,
    -1,    15,    -1,    -1,    18,    19,    20,    21,    22,    23,
    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,
    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
    -1,    -1,    -1,    -1,    -1,     0,    -1,    61,     3,     4,
    64,    -1,    -1,    -1,    -1,    69,    70,    71,    -1,    -1,
    15,    -1,    -1,    18,    -1,    20,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,     1,    64,
     3,     4,     5,     6,    69,    70,    71,    -1,    -1,    -1,
    -1,    -1,    15,    -1,    17,    18,    -1,    20,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,
    -1,    64,    -1,    66,    -1,    -1,    69,    70,    71,     1,
    -1,     3,     4,     5,     6,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    17,    18,    -1,    20,    21,
    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    64,    -1,    66,    -1,    -1,    69,    70,    71,
     1,    -1,     3,     4,     5,     6,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    15,    -1,    -1,    18,    -1,    20,
    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,
    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,
    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    61,     3,     4,    64,    -1,    66,    -1,    -1,    69,    70,
    71,    -1,    -1,    15,    -1,    17,    18,    -1,    20,    21,
    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,    31,
    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,
    52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    61,
     3,     4,    64,    -1,    -1,    -1,    -1,    69,    70,    71,
    -1,    -1,    15,    -1,    17,    18,    -1,    20,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    61,     3,
     4,    64,    -1,    -1,    -1,    -1,    69,    70,    71,    -1,
    -1,    15,    -1,    17,    18,    -1,    20,    21,    22,    23,
    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,
    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     1,    61,     3,     4,
    64,    -1,    -1,    -1,    -1,    69,    70,    71,    -1,    -1,
    15,    -1,    17,    18,    -1,    20,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,     1,
    -1,     3,     4,     5,     6,    -1,    51,    52,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    -1,    61,    -1,    -1,    64,
    22,    -1,    -1,    -1,    69,    70,    71,     1,    -1,     3,
     4,     1,    -1,     3,     4,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,    15,    -1,    -1,    22,    51,
    52,    -1,    22,    -1,    -1,    -1,    -1,    -1,     1,    61,
     3,     4,    64,    65,    -1,    -1,    -1,    69,    70,    71,
    -1,    -1,    15,    -1,    -1,    -1,    50,    51,    52,    22,
    54,    51,    52,    -1,    -1,    -1,    -1,    61,    -1,    -1,
    64,    61,    -1,    -1,    64,    69,    70,    71,    -1,    69,
    70,    71,     1,    -1,     3,     4,    -1,    -1,    51,    52,
    -1,    -1,    -1,    -1,    -1,    -1,    15,     1,    61,     3,
     4,    64,    -1,    22,    -1,    -1,    69,    70,    71,    -1,
    -1,    15,    -1,     1,    -1,     3,     4,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    51,    52,    22,     1,    -1,     3,     4,    -1,
    -1,    -1,    61,    -1,    -1,    64,    -1,    51,    52,    15,
    69,    70,    71,    -1,    -1,    -1,    22,    61,    -1,    -1,
    64,    -1,    -1,    51,    52,    69,    70,    71,    -1,    -1,
    -1,    -1,    -1,    61,    -1,     1,    64,     3,     4,    -1,
    -1,    69,    70,    71,    -1,    51,    52,    -1,    -1,    15,
    -1,    -1,    -1,    -1,    -1,    61,    22,     1,    64,     3,
     4,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    -1,
    -1,    15,    -1,     1,    -1,     3,     4,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    51,    52,    15,     1,    -1,
     3,     4,    -1,    -1,    22,    61,    -1,    -1,    64,    -1,
    -1,    -1,    15,    69,    70,    71,    -1,    51,    52,    22,
    -1,    -1,    -1,    -1,    -1,    -1,     1,    61,     3,     4,
    64,    -1,    -1,    51,    52,    69,    70,    71,    -1,    -1,
    15,    -1,     1,    61,     3,     4,    64,    22,    51,    52,
    -1,    69,    70,    71,    -1,    -1,    15,     1,    61,     3,
     4,    64,    -1,    22,    -1,    -1,    69,    70,    71,    -1,
    -1,    15,    -1,    -1,    -1,    -1,    51,    52,    22,    -1,
    -1,    -1,    -1,    -1,    -1,     1,    61,     3,     4,    64,
    -1,    -1,    51,    52,    69,    70,    71,    -1,    -1,    15,
    -1,     1,    61,     3,     4,    64,    22,    51,    52,    -1,
    69,    70,    71,    -1,    -1,    15,     1,    61,     3,     4,
    64,    -1,    22,    -1,    -1,    69,    70,    71,    -1,    -1,
    15,    -1,    -1,    -1,    -1,    51,    52,    22,    -1,    -1,
    -1,    -1,    -1,    -1,     1,    61,     3,     4,    64,    -1,
    -1,    51,    52,    69,    70,    71,    -1,    -1,    15,    -1,
     1,    61,     3,     4,    64,    22,    51,    52,    -1,    69,
    70,    71,    -1,    -1,    15,     1,    61,     3,     4,    64,
    -1,    22,    -1,    -1,    69,    70,    71,    -1,    -1,    15,
    -1,    -1,    -1,    -1,    51,    52,    22,    -1,    -1,    -1,
    -1,    -1,    -1,     1,    61,     3,     4,    64,    -1,    -1,
    51,    52,    69,    70,    71,    -1,    -1,    15,    -1,     1,
    61,     3,     4,    64,    22,    51,    52,    -1,    69,    70,
    71,    -1,    -1,    15,     1,    61,     3,     4,    64,    -1,
    22,    -1,    -1,    69,    70,    71,    -1,    -1,    15,    -1,
    -1,    -1,    -1,    51,    52,    22,    -1,    -1,    -1,    -1,
    -1,    -1,     1,    61,     3,     4,    64,    -1,    -1,    51,
    52,    69,    70,    71,    -1,    -1,    15,    -1,     1,    61,
     3,     4,    64,    22,    51,    52,    -1,    69,    70,    71,
    -1,    -1,    15,     1,    61,     3,     4,    64,    -1,    22,
    -1,    -1,    69,    70,    71,    -1,    -1,    15,    -1,    -1,
    -1,    -1,    51,    52,    22,    -1,    -1,    -1,    -1,    -1,
    -1,     1,    61,     3,     4,    64,    -1,    -1,    51,    52,
    69,    70,    71,    -1,    -1,    15,    -1,     1,    61,     3,
     4,    64,    22,    51,    52,    -1,    69,    70,    71,    -1,
    -1,    15,     1,    61,     3,     4,    64,    -1,    22,    -1,
    -1,    69,    70,    71,    -1,    -1,    15,    -1,    -1,    -1,
    -1,    51,    52,    22,    -1,    -1,    -1,    -1,    -1,    -1,
     1,    61,     3,     4,    64,    -1,    -1,    51,    52,    69,
    70,    71,    -1,    -1,    15,    -1,    -1,    61,     3,     4,
    64,    22,    51,    52,    -1,    69,    70,    71,    -1,    -1,
    15,    -1,    61,     3,     4,    64,    -1,    22,    -1,    -1,
    69,    70,    71,    -1,    -1,    15,    -1,    -1,    -1,    -1,
    51,    52,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    61,    -1,    -1,    64,    -1,    -1,    51,    52,    69,    70,
    71,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1,    64,
    -1,    51,    52,    -1,    69,    70,    71,    72,    -1,    -1,
    -1,    61,    -1,    -1,    64,     3,     4,     5,     6,    69,
    70,    71,    72,    -1,    -1,    -1,    -1,    15,    -1,    -1,
    18,    -1,    20,    21,    22,    23,    -1,    -1,    26,    -1,
    -1,    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,
    -1,    -1,    40,    41,    42,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    61,     3,     4,    64,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    15,    -1,    -1,    18,
    -1,    20,    21,    22,    23,    -1,    -1,    26,     3,     4,
    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,
    15,    40,    41,    42,    -1,    -1,    -1,    22,    -1,    -1,
    -1,    -1,    51,    52,     3,     4,    -1,    -1,    -1,    -1,
    -1,    -1,    61,    -1,    -1,    64,    15,    -1,    -1,    -1,
    69,    70,    71,    22,    -1,    50,    51,    52,    -1,    54,
     3,     4,    -1,    -1,    -1,    -1,    61,    62,    -1,    64,
    -1,    -1,    15,    -1,    69,    70,    71,    -1,    -1,    22,
    -1,    50,    51,    52,    -1,    54,     3,     4,    -1,    -1,
    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    15,    -1,
    69,    70,    71,    -1,    -1,    22,    -1,    -1,    51,    52,
    -1,     3,     4,    10,    11,    12,    13,    14,    61,    -1,
    -1,    64,    65,    15,    -1,    -1,    69,    70,    71,    -1,
    22,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    61,    -1,    -1,    64,    65,    -1,
    -1,    -1,    69,    70,    71,    -1,    53,    54,    55,    51,
    52,    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    61,
    -1,    -1,    64,    -1,    -1,    -1,     1,    69,    70,    71,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    -1,    -1,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    -1,
    -1,    66,    67,    68,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    -1,    -1,    -1,
    59,    60,    -1,    -1,     1,    -1,    -1,    66,    67,    68,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,    -1,    59,    60,    -1,    62,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,    -1,    59,    60,    -1,    62,     7,     8,     9,    10,
    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,     9,    10,
    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    -1,    -1,    -1,    59,    60,
    -1,    62,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    -1,    -1,    -1,    59,    60,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,     9,    10,
    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,    -1,    59,    60,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    -1,    -1,    -1,    59,    60,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,     7,     8,     9,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    10,    11,
    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    -1,
    -1,    -1,    59,    60,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    -1,    -1,    -1,    59,    60,    50,    51,
    52,    53,    54,    55,    -1,    -1,    -1,    59,    60,    10,
    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    51,    52,    53,    54,    55,    -1,    -1,    -1,    59,    60
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 152 "Parser.yxx"
{mainAST = yyvsp[0].v.p;;
    break;}
case 4:
#line 154 "Parser.yxx"
{yyxpt("statement list or function definition",yyvsp[0]);;
    break;}
case 5:
#line 158 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-6].v.p->toStringList();
     r->name = yyvsp[-5].v.p->text;
     r->arguments = yyvsp[-3].v.p->toStringList();
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 6:
#line 168 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-5].v.p->text;
     r->arguments = yyvsp[-3].v.p->toStringList();
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 7:
#line 177 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-3].v.p->toStringList();
     r->name = yyvsp[-2].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 8:
#line 186 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-2].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 9:
#line 194 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-5].v.p->toStringList();
     r->name = yyvsp[-4].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 10:
#line 203 "Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-4].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 11:
#line 211 "Parser.yxx"
{yyxpt("legal function name or return declaration after 'function'",yyvsp[-1]);;
    break;}
case 12:
#line 212 "Parser.yxx"
{yyxpt(std::string("argument list or statement list after identifier '") + 
	yyvsp[-1].v.p->text + "'",yyvsp[-1]);;
    break;}
case 13:
#line 214 "Parser.yxx"
{yyxpt("(possibly empty) argument list after '('",yyvsp[-1]);;
    break;}
case 14:
#line 215 "Parser.yxx"
{yyxpt("statement list after ')'",yyvsp[-1]);;
    break;}
case 15:
#line 216 "Parser.yxx"
{yyxpt("function name for function declared",yyvsp[-2]);;
    break;}
case 16:
#line 217 "Parser.yxx"
{yyxpt(std::string("argument list or statement list following function name :") + 
	yyvsp[-1].v.p->text,yyvsp[-1]);;
    break;}
case 17:
#line 219 "Parser.yxx"
{yyxpt("(possibly empty) argument list after '('",yyvsp[-1]);;
    break;}
case 18:
#line 220 "Parser.yxx"
{yyxpt("statement list after ')'",yyvsp[-1]);;
    break;}
case 21:
#line 229 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 22:
#line 230 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 23:
#line 231 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 24:
#line 232 "Parser.yxx"
{yyxpt("an '=' symbol after identifier in return declaration",yyvsp[-1]);;
    break;}
case 25:
#line 233 "Parser.yxx"
{yyxpt("a valid list of return arguments in return declaration",yyvsp[-1]);;
    break;}
case 26:
#line 234 "Parser.yxx"
{yyxpt("matching ']' in return declaration for '['",yyvsp[-2]);;
    break;}
case 27:
#line 235 "Parser.yxx"
{yyxpt("an '=' symbol after return declaration",yyvsp[-1]);;
    break;}
case 28:
#line 239 "Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 29:
#line 240 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 31:
#line 244 "Parser.yxx"
{
	yyval.v.p = yyvsp[0].v.p;
	char *b = (char*) malloc(strlen(yyvsp[0].v.p->text)+2);
	b[0] = '&';
	strcpy(b+1,yyvsp[0].v.p->text);
	yyval.v.p->text = b;
  ;
    break;}
case 32:
#line 255 "Parser.yxx"
{yyval.v.p = new AST(OP_BLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 33:
#line 256 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 34:
#line 260 "Parser.yxx"
{
  	    yyval.v.p = new AST(OP_QSTATEMENT,NULL,yyvsp[0].v.i);
	    yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 35:
#line 264 "Parser.yxx"
{
	    yyval.v.p = new AST(OP_RSTATEMENT,NULL,yyvsp[0].v.i);
            yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 36:
#line 268 "Parser.yxx"
{
	    yyval.v.p = new AST(OP_RSTATEMENT,NULL,yyvsp[0].v.i);
	    yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 39:
#line 277 "Parser.yxx"
{yyval.v.p = new AST(null_node,"",-1);;
    break;}
case 55:
#line 295 "Parser.yxx"
{yyval.v.p = new AST(OP_SCALL,yyvsp[-1].v.p,yyvsp[0].v.p,yyvsp[-1].v.p->context());;
    break;}
case 56:
#line 296 "Parser.yxx"
{yyval.v.p = new AST(OP_SCALL,yyvsp[-1].v.p,yyvsp[0].v.p,yyvsp[-1].v.p->context());;
    break;}
case 57:
#line 297 "Parser.yxx"
{yyval.v.p = new AST(OP_SCALL,yyvsp[-1].v.p,yyvsp[0].v.p,yyvsp[-1].v.p->context());;
    break;}
case 58:
#line 298 "Parser.yxx"
{yyval.v.p = new AST(OP_SCALL,yyvsp[-1].v.p,yyvsp[0].v.p,yyvsp[-1].v.p->context()); ;
    break;}
case 59:
#line 299 "Parser.yxx"
{yyvsp[-1].v.p->addChild(yyvsp[0].v.p);;
    break;}
case 60:
#line 300 "Parser.yxx"
{yyvsp[-1].v.p->addChild(yyvsp[0].v.p);;
    break;}
case 61:
#line 301 "Parser.yxx"
{yyvsp[-1].v.p->addChild(yyvsp[0].v.p);;
    break;}
case 62:
#line 314 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p); ;
    break;}
case 63:
#line 315 "Parser.yxx"
{yyxpt("list of variables to be tagged as persistent",yyvsp[-1]);;
    break;}
case 64:
#line 319 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 65:
#line 320 "Parser.yxx"
{yyxpt("list of variables to be tagged as global",yyvsp[-1]);;
    break;}
case 67:
#line 325 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 68:
#line 326 "Parser.yxx"
{yyxpt("list of valid identifiers",yyvsp[0]);;
    break;}
case 73:
#line 346 "Parser.yxx"
{ yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-2].v.p); if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);;
    break;}
case 74:
#line 348 "Parser.yxx"
{yyxpt(std::string("matching 'end' to 'try' clause from line ") + decodeline(yyvsp[-3]),yyvsp[0]);;
    break;}
case 75:
#line 352 "Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 76:
#line 353 "Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 77:
#line 357 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-5].v.p; yyval.v.p->addChild(yyvsp[-4].v.p); 
	  if (yyvsp[-2].v.p != NULL) yyval.v.p->addChild(yyvsp[-2].v.p); 
	  if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 78:
#line 362 "Parser.yxx"
{
          yyxpt(std::string("matching 'end' to 'switch' clause from line ") + decodeline(yyvsp[-5]),yyvsp[0]);
        ;
    break;}
case 86:
#line 377 "Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 88:
#line 382 "Parser.yxx"
{
	  yyval.v.p = new AST(OP_CASEBLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());
	;
    break;}
case 89:
#line 385 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 90:
#line 391 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-2].v.p); yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 91:
#line 397 "Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 92:
#line 400 "Parser.yxx"
{
	  yyval.v.p = NULL;
	;
    break;}
case 93:
#line 406 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 94:
#line 410 "Parser.yxx"
{yyxpt(std::string("'end' to match 'for' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 95:
#line 414 "Parser.yxx"
{yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-1].v.p);;
    break;}
case 96:
#line 415 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 97:
#line 416 "Parser.yxx"
{yyval.v.p = yyvsp[0].v.p; 
	      yyval.v.p->addChild(new AST(OP_RHS,new AST(id_node,yyvsp[0].v.p->text,yyvsp[0].v.p->context()),yyvsp[0].v.p->context())); ;
    break;}
case 98:
#line 418 "Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-4]);;
    break;}
case 99:
#line 419 "Parser.yxx"
{yyxpt("indexing expression",yyvsp[-1]);;
    break;}
case 100:
#line 420 "Parser.yxx"
{yyxpt("equals operator after loop index",yyvsp[-1]);;
    break;}
case 101:
#line 421 "Parser.yxx"
{yyxpt("identifier that is the loop variable",yyvsp[-1]);;
    break;}
case 102:
#line 422 "Parser.yxx"
{yyxpt("indexing expression",yyvsp[-1]);;
    break;}
case 103:
#line 423 "Parser.yxx"
{yyxpt("identifier or assignment (id = expr) after 'for' ",yyvsp[0]);;
    break;}
case 104:
#line 427 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 105:
#line 430 "Parser.yxx"
{yyxpt("test expression after 'while'",yyvsp[-1]);;
    break;}
case 106:
#line 432 "Parser.yxx"
{yyxpt(std::string("'end' to match 'while' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 107:
#line 436 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); if (yyvsp[-2].v.p != NULL) yyval.v.p->addChild(yyvsp[-2].v.p); 
	  if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 108:
#line 440 "Parser.yxx"
{yyxpt("condition expression for 'if'",yyvsp[-1]);;
    break;}
case 109:
#line 441 "Parser.yxx"
{yyxpt(std::string("'end' to match 'if' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 110:
#line 445 "Parser.yxx"
{
	  yyval.v.p = new AST(OP_CSTAT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-2].v.p->context());
	;
    break;}
case 111:
#line 448 "Parser.yxx"
{
	  yyval.v.p = new AST(OP_CSTAT,yyvsp[-1].v.p,yyvsp[-1].v.p->context());
	;
    break;}
case 112:
#line 451 "Parser.yxx"
{yyxpt("valid list of statements after condition",yyvsp[0]);;
    break;}
case 113:
#line 455 "Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 115:
#line 460 "Parser.yxx"
{
	  yyval.v.p = new AST(OP_ELSEIFBLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());
	;
    break;}
case 116:
#line 463 "Parser.yxx"
{
	  yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 117:
#line 469 "Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 118:
#line 472 "Parser.yxx"
{yyxpt("test condition for 'elseif' clause",yyvsp[-1]);;
    break;}
case 119:
#line 475 "Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 120:
#line 478 "Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 121:
#line 479 "Parser.yxx"
{yyxpt("statement list for 'else' clause",yyvsp[-1]);;
    break;}
case 122:
#line 483 "Parser.yxx"
{yyval.v.p = new AST(OP_ASSIGN,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 123:
#line 484 "Parser.yxx"
{yyxpt("expression in assignment",yyvsp[-1]);;
    break;}
case 124:
#line 488 "Parser.yxx"
{
	  yyvsp[-3].v.p->addChild(new AST(OP_PARENS,yyvsp[-1].v.p,yyvsp[-2].v.i));
	  yyval.v.p = new AST(OP_MULTICALL,yyvsp[-6].v.p,yyvsp[-3].v.p,yyvsp[-7].v.i);
	;
    break;}
case 125:
#line 492 "Parser.yxx"
{
	  yyvsp[0].v.p->addChild(new AST(OP_PARENS,NULL,-1));
	  yyval.v.p = new AST(OP_MULTICALL,yyvsp[-3].v.p,yyvsp[0].v.p,yyvsp[-4].v.i);
	;
    break;}
case 126:
#line 497 "Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-2]);;
    break;}
case 127:
#line 499 "Parser.yxx"
{yyxpt("indexing list",yyvsp[-1]);;
    break;}
case 128:
#line 501 "Parser.yxx"
{yyxpt("left parenthesis",yyvsp[-1]);;
    break;}
case 129:
#line 503 "Parser.yxx"
{yyxpt("identifier",yyvsp[-1]);;
    break;}
case 130:
#line 507 "Parser.yxx"
{yyval.v.p = new AST(OP_COLON,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 131:
#line 508 "Parser.yxx"
{yyxpt("an expression after ':'",yyvsp[-1]);;
    break;}
case 133:
#line 510 "Parser.yxx"
{yyval.v.p = new AST(OP_PLUS,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 134:
#line 511 "Parser.yxx"
{yyxpt("an expression after '+'",yyvsp[-1]);;
    break;}
case 135:
#line 512 "Parser.yxx"
{yyval.v.p = new AST(OP_SUBTRACT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 136:
#line 513 "Parser.yxx"
{yyxpt("an expression after '-'",yyvsp[-1]);;
    break;}
case 137:
#line 514 "Parser.yxx"
{yyval.v.p = new AST(OP_TIMES,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 138:
#line 515 "Parser.yxx"
{yyxpt("an expression after '*'",yyvsp[-1]);;
    break;}
case 139:
#line 516 "Parser.yxx"
{yyval.v.p = new AST(OP_RDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 140:
#line 517 "Parser.yxx"
{yyxpt("an expression after '/'",yyvsp[-1]);;
    break;}
case 141:
#line 518 "Parser.yxx"
{yyval.v.p = new AST(OP_LDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 142:
#line 519 "Parser.yxx"
{yyxpt("an expression after '\\'",yyvsp[-1]);;
    break;}
case 143:
#line 520 "Parser.yxx"
{yyval.v.p = new AST(OP_OR,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 144:
#line 521 "Parser.yxx"
{yyxpt("an expression after '|'",yyvsp[-1]);;
    break;}
case 145:
#line 522 "Parser.yxx"
{yyval.v.p = new AST(OP_AND,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 146:
#line 523 "Parser.yxx"
{yyxpt("an expression after '&'",yyvsp[-1]);;
    break;}
case 147:
#line 524 "Parser.yxx"
{yyval.v.p = new AST(OP_SOR,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 148:
#line 525 "Parser.yxx"
{yyxpt("an expression after '||'",yyvsp[-1]);;
    break;}
case 149:
#line 526 "Parser.yxx"
{yyval.v.p = new AST(OP_SAND,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 150:
#line 527 "Parser.yxx"
{yyxpt("an expression after '&&'",yyvsp[-1]);;
    break;}
case 151:
#line 528 "Parser.yxx"
{yyval.v.p = new AST(OP_LT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 152:
#line 529 "Parser.yxx"
{yyxpt("an expression after '<'",yyvsp[-1]);;
    break;}
case 153:
#line 530 "Parser.yxx"
{yyval.v.p = new AST(OP_LEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 154:
#line 531 "Parser.yxx"
{yyxpt("an expression after '<='",yyvsp[-1]);;
    break;}
case 155:
#line 532 "Parser.yxx"
{yyval.v.p = new AST(OP_GT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 156:
#line 533 "Parser.yxx"
{yyxpt("an expression after '>'",yyvsp[-1]);;
    break;}
case 157:
#line 534 "Parser.yxx"
{yyval.v.p = new AST(OP_GEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 158:
#line 535 "Parser.yxx"
{yyxpt("an expression after '>='",yyvsp[-1]);;
    break;}
case 159:
#line 536 "Parser.yxx"
{yyval.v.p = new AST(OP_EQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 160:
#line 537 "Parser.yxx"
{yyxpt("an expression after '=='",yyvsp[-1]);;
    break;}
case 161:
#line 538 "Parser.yxx"
{yyval.v.p = new AST(OP_NEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 162:
#line 539 "Parser.yxx"
{yyxpt("an expression after '~='",yyvsp[-1]);;
    break;}
case 163:
#line 540 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT_TIMES,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 164:
#line 541 "Parser.yxx"
{yyxpt("an expression after '.*'",yyvsp[-1]);;
    break;}
case 165:
#line 542 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT_RDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 166:
#line 543 "Parser.yxx"
{yyxpt("an expression after './'",yyvsp[-1]);;
    break;}
case 167:
#line 544 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT_LDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 168:
#line 545 "Parser.yxx"
{yyxpt("an expression after '.\\'",yyvsp[-1]);;
    break;}
case 169:
#line 546 "Parser.yxx"
{yyval.v.p = new AST(OP_NEG,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 170:
#line 547 "Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 171:
#line 548 "Parser.yxx"
{yyval.v.p = new AST(OP_NOT,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 172:
#line 549 "Parser.yxx"
{yyxpt("an expression after logical not",yyvsp[0]);;
    break;}
case 173:
#line 550 "Parser.yxx"
{yyval.v.p = new AST(OP_POWER,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 174:
#line 551 "Parser.yxx"
{yyxpt("an expression after '^'",yyvsp[-1]);;
    break;}
case 175:
#line 552 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT_POWER,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 176:
#line 553 "Parser.yxx"
{yyxpt("an expression after '.^'",yyvsp[-1]);;
    break;}
case 177:
#line 554 "Parser.yxx"
{yyval.v.p = new AST(OP_TRANSPOSE,yyvsp[-1].v.p,yyvsp[0].v.i);;
    break;}
case 178:
#line 555 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT_TRANSPOSE,yyvsp[-1].v.p,yyvsp[0].v.i);;
    break;}
case 179:
#line 556 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 180:
#line 557 "Parser.yxx"
{yyxpt("a right parenthesis after expression to match this one",yyvsp[-2]);;
    break;}
case 181:
#line 558 "Parser.yxx"
{yyxpt("an expression after left parenthesis",yyvsp[-1]);;
    break;}
case 185:
#line 565 "Parser.yxx"
{yyval.v.p = new AST(OP_ADDRESS,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 186:
#line 566 "Parser.yxx"
{yyval.v.p = new AST(OP_RHS,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 187:
#line 567 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 188:
#line 568 "Parser.yxx"
{yyxpt("a matrix definition followed by a right bracket",yyvsp[-1]);;
    break;}
case 189:
#line 569 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 190:
#line 570 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 191:
#line 571 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 192:
#line 572 "Parser.yxx"
{yyval.v.p = new AST(OP_EMPTY,NULL,yyvsp[-1].v.i);;
    break;}
case 193:
#line 573 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 194:
#line 574 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 195:
#line 575 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 196:
#line 576 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 197:
#line 577 "Parser.yxx"
{yyval.v.p = new AST(OP_EMPTY_CELL,NULL,yyvsp[-1].v.i);;
    break;}
case 198:
#line 578 "Parser.yxx"
{yyxpt("a cell-array definition followed by a right brace",yyvsp[-1]);;
    break;}
case 200:
#line 582 "Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 201:
#line 586 "Parser.yxx"
{yyval.v.p = new AST(OP_PARENS,yyvsp[-1].v.p,yyvsp[-2].v.i); ;
    break;}
case 202:
#line 587 "Parser.yxx"
{yyval.v.p = new AST(OP_PARENS,NULL,yyvsp[-1].v.i); ;
    break;}
case 203:
#line 588 "Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-2]);;
    break;}
case 204:
#line 589 "Parser.yxx"
{yyval.v.p = new AST(OP_BRACES,yyvsp[-1].v.p,yyvsp[-2].v.i); ;
    break;}
case 205:
#line 590 "Parser.yxx"
{yyxpt("matching right brace",yyvsp[-2]);;
    break;}
case 206:
#line 591 "Parser.yxx"
{yyval.v.p = new AST(OP_DOT,yyvsp[0].v.p,yyvsp[-1].v.i); ;
    break;}
case 207:
#line 592 "Parser.yxx"
{yyval.v.p = new AST(OP_DOTDYN,yyvsp[-1].v.p,yyvsp[-3].v.i);;
    break;}
case 209:
#line 597 "Parser.yxx"
{yyval.v.p = new AST(OP_ALL,NULL,yyvsp[0].v.i);;
    break;}
case 210:
#line 598 "Parser.yxx"
{yyval.v.p = new AST(OP_KEYWORD,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-3].v.i);;
    break;}
case 211:
#line 599 "Parser.yxx"
{yyxpt("expecting expression after '=' in keyword assignment",yyvsp[-1]);;
    break;}
case 212:
#line 600 "Parser.yxx"
{yyval.v.p = new AST(OP_KEYWORD,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 213:
#line 601 "Parser.yxx"
{yyxpt("expecting keyword identifier after '/' in keyword assignment",yyvsp[-1]);;
    break;}
case 215:
#line 606 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addPeer(yyvsp[0].v.p);;
    break;}
case 216:
#line 610 "Parser.yxx"
{yyval.v.p = new AST(OP_BRACES,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 217:
#line 611 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 218:
#line 615 "Parser.yxx"
{yyval.v.p = new AST(OP_BRACKETS,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 219:
#line 616 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 224:
#line 628 "Parser.yxx"
{yyval.v.p = new AST(OP_SEMICOLON,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 225:
#line 629 "Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 632 "Parser.yxx"


namespace FreeMat {

#ifdef YYBYACC  
  int yyparse();
#endif

  void resetParser() {
    mainAST = NULL;
    mainMDef = NULL;
  }
  
  ASTPtr getParsedScriptBlock() {
    return mainAST;
  }
  
  MFunctionDef* getParsedFunctionDef() {
    return mainMDef;
  }
  
  ParserState parseState() {
    if (mainAST != NULL) 
      return ScriptBlock;
    else
      return FuncDef;
  }
  
  ParserState parseString(char *txt) {
/*     yydebug = 1; 	*/
    resetParser();
    interactiveMode = true;
    setLexBuffer(txt);
    yyparse();
    return parseState();
  }
  
  ParserState parseFile(FILE *fp, const char* fname) {
//    yydebug = 1; 
    resetParser();
    interactiveMode = false;
    parsing_filename = fname;
    setLexFile(fp);
    yyparse();
    return parseState();
  }
  
}
