
/*  A Bison parser, made from ../../../libs/libFreeMat/Parser.yxx
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	IDENT	257
#define	NUMERIC	258
#define	ENDQSTMNT	259
#define	ENDSTMNT	260
#define	LE	261
#define	GE	262
#define	EQ	263
#define	DOTTIMES	264
#define	DOTRDIV	265
#define	DOTLDIV	266
#define	DOTPOWER	267
#define	DOTTRANSPOSE	268
#define	STRING	269
#define	SPECIALCALL	270
#define	END	271
#define	IF	272
#define	FUNCTION	273
#define	FOR	274
#define	BREAK	275
#define	MAGICEND	276
#define	WHILE	277
#define	ELSE	278
#define	ELSEIF	279
#define	SWITCH	280
#define	CASE	281
#define	OTHERWISE	282
#define	CONTINUE	283
#define	TRY	284
#define	CATCH	285
#define	FIELD	286
#define	REFLPAREN	287
#define	REFRPAREN	288
#define	PERSISTENT	289
#define	KEYBOARD	290
#define	RETURN	291
#define	VARARGIN	292
#define	VARARGOUT	293
#define	GLOBAL	294
#define	QUIT	295
#define	RETALL	296
#define	NE	297
#define	POS	298
#define	NEG	299
#define	NOT	300

#line 1 "../../../libs/libFreeMat/Parser.yxx"

// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

    /*************************************************************
     * $Source$
     * $Revision$
     * $Date$
     * $Author$
     *************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include "AST.hpp"
#include "WalkTree.hpp"
#include "FunctionDef.hpp"
#include "ParserInterface.hpp"
#include "Exception.hpp"

#define YYDEBUG 1
#define YYSTYPE ParseRHS

#define MSGBUFLEN 2048
static char msgBuffer[MSGBUFLEN];

#include "LexerInterface.hpp"

//extern char* yytext;
extern int yylex(void);

extern int yydebug;
extern const char *parsing_filename;

bool interactiveMode;

#ifdef WIN32
#define snprintf _snprintf
#endif

namespace FreeMat {
  static ASTPtr mainAST;
  static MFunctionDef *mainMDef;

  void yyerror(const char *s) {
     return;
  }

  void chainFunction(MFunctionDef *r) {
     r->nextFunction = NULL;
     r->prevFunction = NULL;
     if (mainMDef == NULL)
	mainMDef = r;
     else {
	r->localFunction = true;
        r->nextFunction = mainMDef->nextFunction;
	if (r->nextFunction)
	  r->nextFunction->prevFunction = r;
	mainMDef->nextFunction = r;
	r->prevFunction = mainMDef;
     }
  }

  std::string decodeline(ParseRHS val) {
    int tokenID;
    int linenumber, colnumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    char buffer[256];
    sprintf(buffer,"%d",linenumber);
    return(std::string(buffer));
  }
  
  int yyxpt(std::string xStr, ParseRHS val) {
    char buffer[256];
    int addone = 1;
    int tokenID;
    int linenumber, colnumber;
    if (val.isToken) 
      tokenID = val.v.i;
    else
      tokenID = val.v.p->context();
    linenumber = tokenID & 0xFFFF;
    colnumber = tokenID >> 16;
    if (!interactiveMode)
      snprintf(msgBuffer,MSGBUFLEN,
      "Expecting %s\n\tat line %d, column %d of file %s",
       xStr.c_str(),linenumber,colnumber,parsing_filename);
    else
      snprintf(msgBuffer,MSGBUFLEN,"Expecting %s",xStr.c_str());
    throw Exception(msgBuffer);
    return 0;
  }
}

using namespace FreeMat;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		328
#define	YYFLAG		-32768
#define	YYNTBASE	72

#define YYTRANSLATE(x) ((unsigned)(x) <= 300 ? yytranslate[x] : 121)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,    66,     2,     2,    45,    58,    59,
    60,    51,    49,    64,    50,    71,    52,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    43,    65,    46,
    61,    47,     2,    68,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    62,    53,    63,    57,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,    44,    70,    67,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    48,    54,    55,    56
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     5,     7,    16,    24,    30,    35,    43,
    50,    53,    57,    62,    69,    73,    78,    84,    92,    94,
    97,   100,   103,   108,   111,   114,   118,   123,   125,   129,
   131,   134,   136,   139,   142,   145,   148,   150,   152,   153,
   155,   157,   159,   161,   163,   165,   167,   169,   171,   173,
   175,   177,   179,   181,   183,   186,   188,   191,   194,   197,
   200,   203,   205,   208,   211,   213,   215,   217,   219,   224,
   229,   232,   233,   240,   247,   249,   251,   253,   255,   257,
   259,   261,   262,   264,   266,   269,   274,   277,   278,   284,
   290,   296,   300,   302,   308,   313,   317,   320,   324,   326,
   332,   335,   341,   347,   350,   356,   360,   363,   364,   366,
   368,   371,   374,   377,   380,   381,   384,   388,   392,   401,
   407,   416,   424,   431,   437,   441,   445,   447,   451,   455,
   459,   463,   467,   471,   475,   479,   483,   487,   491,   495,
   499,   503,   507,   511,   515,   519,   523,   527,   531,   535,
   539,   543,   547,   551,   555,   559,   563,   567,   571,   575,
   578,   581,   584,   587,   591,   595,   599,   603,   606,   609,
   613,   617,   620,   622,   624,   626,   629,   631,   635,   638,
   643,   648,   654,   657,   661,   666,   671,   677,   680,   683,
   685,   688,   692,   696,   700,   704,   707,   712,   714,   716,
   721,   726,   729,   732,   734,   738,   740,   744,   746,   750,
   752,   754,   756,   758,   760
};

static const short yyrhs[] = {    78,
     0,    74,     0,     0,     1,     0,    19,    75,     3,    59,
    76,    60,    94,    78,     0,    19,     3,    59,    76,    60,
    94,    78,     0,    19,    75,     3,    94,    78,     0,    19,
     3,    94,    78,     0,    19,    75,     3,    59,    60,    94,
    78,     0,    19,     3,    59,    60,    94,    78,     0,    19,
     1,     0,    19,     3,     1,     0,    19,     3,    59,     1,
     0,    19,     3,    59,    76,    60,     1,     0,    19,    75,
     1,     0,    19,    75,     3,     1,     0,    19,    75,     3,
    59,     1,     0,    19,    75,     3,    59,    76,    60,     1,
     0,    73,     0,    74,    73,     0,    39,    61,     0,     3,
    61,     0,    62,    76,    63,    61,     0,     3,     1,     0,
    62,     1,     0,    62,    76,     1,     0,    62,    76,    63,
     1,     0,    77,     0,    76,    64,    77,     0,     3,     0,
    45,     3,     0,    79,     0,    78,    79,     0,    80,     5,
     0,    80,     6,     0,    80,    64,     0,   108,     0,   110,
     0,     0,   109,     0,    99,     0,    89,     0,    88,     0,
   101,     0,   102,     0,    92,     0,    90,     0,    87,     0,
    86,     0,    84,     0,    83,     0,    81,     0,    41,     0,
    42,     0,    16,    82,     0,    15,     0,    82,    15,     0,
    35,    85,     0,    35,     1,     0,    40,    85,     0,    40,
     1,     0,     3,     0,    85,     3,     0,    85,     1,     0,
    37,     0,    36,     0,    29,     0,    21,     0,    30,    78,
    91,    17,     0,    30,    78,    91,     1,     0,    31,    78,
     0,     0,    26,   110,    93,    95,    98,    17,     0,    26,
   110,    93,    95,    98,     1,     0,    64,     0,     6,     0,
     5,     0,    65,     0,    66,     0,     6,     0,     5,     0,
     0,    96,     0,    97,     0,    96,    97,     0,    27,   110,
    93,    78,     0,    28,    78,     0,     0,    20,   100,    93,
    78,    17,     0,    20,   100,    93,    78,     1,     0,    59,
     3,    61,   110,    60,     0,     3,    61,   110,     0,     3,
     0,    59,     3,    61,   110,     1,     0,    59,     3,    61,
     1,     0,    59,     3,     1,     0,    59,     1,     0,     3,
    61,     1,     0,     1,     0,    23,   110,    93,    78,    17,
     0,    23,     1,     0,    23,   110,    93,    78,     1,     0,
    18,   103,   104,   107,    17,     0,    18,     1,     0,    18,
   103,   104,   107,     1,     0,   110,    93,    78,     0,   110,
     1,     0,     0,   105,     0,   106,     0,   105,   106,     0,
    25,   103,     0,    25,     1,     0,    24,    78,     0,     0,
    24,     1,     0,   112,    61,   110,     0,   112,    61,     1,
     0,    62,   117,    63,    61,     3,    59,   115,    60,     0,
    62,   117,    63,    61,     3,     0,    62,   117,    63,    61,
     3,    59,   115,     1,     0,    62,   117,    63,    61,     3,
    59,     1,     0,    62,   117,    63,    61,     3,     1,     0,
    62,   117,    63,    61,     1,     0,   110,    43,   110,     0,
   110,    43,     1,     0,   111,     0,   110,    49,   110,     0,
   110,    49,     1,     0,   110,    50,   110,     0,   110,    50,
     1,     0,   110,    51,   110,     0,   110,    51,     1,     0,
   110,    52,   110,     0,   110,    52,     1,     0,   110,    53,
   110,     0,   110,    53,     1,     0,   110,    44,   110,     0,
   110,    44,     1,     0,   110,    45,   110,     0,   110,    45,
     1,     0,   110,    46,   110,     0,   110,    46,     1,     0,
   110,     7,   110,     0,   110,     7,     1,     0,   110,    47,
   110,     0,   110,    47,     1,     0,   110,     8,   110,     0,
   110,     8,     1,     0,   110,     9,   110,     0,   110,     9,
     1,     0,   110,    48,   110,     0,   110,    48,     1,     0,
   110,    10,   110,     0,   110,    10,     1,     0,   110,    11,
   110,     0,   110,    11,     1,     0,   110,    12,   110,     0,
   110,    12,     1,     0,    50,   110,     0,    49,   110,     0,
    67,   110,     0,    67,     1,     0,   110,    57,   110,     0,
   110,    57,     1,     0,   110,    13,   110,     0,   110,    13,
     1,     0,   110,    58,     0,   110,    14,     0,    59,   110,
    60,     0,    59,   110,     1,     0,    59,     1,     0,     4,
     0,    15,     0,    22,     0,    68,     3,     0,   112,     0,
    62,   117,    63,     0,    62,     1,     0,    62,   118,   117,
    63,     0,    62,   117,   118,    63,     0,    62,   118,   117,
   118,    63,     0,    62,    63,     0,    69,   116,    70,     0,
    69,   118,   116,    70,     0,    69,   116,   118,    70,     0,
    69,   118,   116,   118,    70,     0,    69,    70,     0,    69,
     1,     0,     3,     0,   112,   113,     0,    59,   115,    60,
     0,    59,   115,     1,     0,    69,   115,    70,     0,    69,
   115,     1,     0,    71,     3,     0,    71,    59,   110,    60,
     0,   110,     0,    43,     0,    52,     3,    61,   110,     0,
    52,     3,    61,     1,     0,    52,     3,     0,    52,     1,
     0,   114,     0,   115,    64,   114,     0,   120,     0,   116,
   118,   120,     0,   120,     0,   117,   118,   120,     0,     6,
     0,     5,     0,    64,     0,    66,     0,   110,     0,   120,
   119,   110,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   148,   149,   150,   151,   154,   164,   173,   182,   190,   199,
   207,   208,   210,   211,   212,   213,   215,   216,   220,   221,
   225,   226,   227,   228,   229,   230,   231,   235,   237,   240,
   241,   251,   252,   256,   261,   265,   271,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
   286,   287,   288,   288,   291,   296,   297,   301,   302,   306,
   307,   311,   312,   313,   317,   321,   325,   328,   332,   335,
   339,   341,   344,   349,   355,   356,   356,   356,   356,   359,
   360,   364,   365,   369,   372,   378,   384,   387,   393,   396,
   401,   402,   403,   405,   406,   407,   408,   409,   410,   414,
   417,   418,   423,   427,   428,   432,   435,   439,   440,   444,
   447,   453,   456,   459,   462,   463,   467,   468,   472,   476,
   480,   482,   484,   486,   491,   493,   494,   495,   496,   497,
   498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
   508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
   528,   529,   530,   531,   532,   533,   534,   535,   536,   537,
   538,   539,   542,   544,   545,   546,   547,   548,   549,   550,
   551,   552,   553,   554,   555,   556,   557,   558,   559,   561,
   563,   566,   568,   569,   570,   571,   572,   575,   577,   578,
   579,   580,   581,   584,   585,   589,   590,   594,   595,   599,
   600,   603,   604,   607,   608
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","IDENT",
"NUMERIC","ENDQSTMNT","ENDSTMNT","LE","GE","EQ","DOTTIMES","DOTRDIV","DOTLDIV",
"DOTPOWER","DOTTRANSPOSE","STRING","SPECIALCALL","END","IF","FUNCTION","FOR",
"BREAK","MAGICEND","WHILE","ELSE","ELSEIF","SWITCH","CASE","OTHERWISE","CONTINUE",
"TRY","CATCH","FIELD","REFLPAREN","REFRPAREN","PERSISTENT","KEYBOARD","RETURN",
"VARARGIN","VARARGOUT","GLOBAL","QUIT","RETALL","':'","'|'","'&'","'<'","'>'",
"NE","'+'","'-'","'*'","'/'","'\\\\'","POS","NEG","NOT","'^'","'\\''","'('",
"')'","'='","'['","']'","','","';'","'#'","'~'","'@'","'{'","'}'","'.'","program",
"functionDef","functionDefList","returnDeclaration","argumentList","argument",
"statementList","statement","statementType","specialSyntaxStatement","stringList",
"persistentStatement","globalStatement","identList","returnStatement","keyboardStatement",
"continueStatement","breakStatement","tryStatement","optionalCatch","switchStatement",
"optionalEndStatement","newLine","caseBlock","caseList","caseStatement","otherwiseClause",
"forStatement","forIndexExpression","whileStatement","ifStatement","conditionedStatement",
"elseIfBlock","elseIfStatementList","elseIfStatement","elseStatement","assignmentStatement",
"multiFunctionCall","expr","terminal","symbRefList","symbRef","indexElement",
"indexList","cellDef","matrixDef","rowSeperator","columnSep","rowDef", NULL
};
#endif

static const short yyr1[] = {     0,
    72,    72,    72,    72,    73,    73,    73,    73,    73,    73,
    73,    73,    73,    73,    73,    73,    73,    73,    74,    74,
    75,    75,    75,    75,    75,    75,    75,    76,    76,    77,
    77,    78,    78,    79,    79,    79,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
    80,    80,    80,    80,    81,    82,    82,    83,    83,    84,
    84,    85,    85,    85,    86,    87,    88,    89,    90,    90,
    91,    91,    92,    92,    93,    93,    93,    93,    93,    94,
    94,    95,    95,    96,    96,    97,    98,    98,    99,    99,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   101,
   101,   101,   102,   102,   102,   103,   103,   104,   104,   105,
   105,   106,   106,   107,   107,   107,   108,   108,   109,   109,
   109,   109,   109,   109,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,   112,
   112,   113,   113,   113,   113,   113,   113,   114,   114,   114,
   114,   114,   114,   115,   115,   116,   116,   117,   117,   118,
   118,   119,   119,   120,   120
};

static const short yyr2[] = {     0,
     1,     1,     0,     1,     8,     7,     5,     4,     7,     6,
     2,     3,     4,     6,     3,     4,     5,     7,     1,     2,
     2,     2,     4,     2,     2,     3,     4,     1,     3,     1,
     2,     1,     2,     2,     2,     2,     1,     1,     0,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     1,     2,     2,     2,     2,
     2,     1,     2,     2,     1,     1,     1,     1,     4,     4,
     2,     0,     6,     6,     1,     1,     1,     1,     1,     1,
     1,     0,     1,     1,     2,     4,     2,     0,     5,     5,
     5,     3,     1,     5,     4,     3,     2,     3,     1,     5,
     2,     5,     5,     2,     5,     3,     2,     0,     1,     1,
     2,     2,     2,     2,     0,     2,     3,     3,     8,     5,
     8,     7,     6,     5,     3,     3,     1,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
     2,     2,     2,     3,     3,     3,     3,     2,     2,     3,
     3,     2,     1,     1,     1,     2,     1,     3,     2,     4,
     4,     5,     2,     3,     4,     4,     5,     2,     2,     1,
     2,     3,     3,     3,     3,     2,     4,     1,     1,     4,
     4,     2,     2,     1,     3,     1,     3,     1,     3,     1,
     1,     1,     1,     1,     3
};

static const short yydefact[] = {     0,
     4,   190,   173,   174,     0,     0,     0,     0,    68,   175,
     0,     0,    67,    39,     0,    66,    65,     0,    53,    54,
     0,     0,     0,     0,     0,     0,     0,    19,     2,    39,
    32,     0,    52,    51,    50,    49,    48,    43,    42,    47,
    46,    41,    44,    45,    37,    40,    38,   127,   177,    56,
    55,   104,     0,   108,     0,   177,    11,     0,     0,     0,
     0,    99,    93,     0,     0,   101,     0,     0,    39,    59,
    62,     0,    61,     0,   161,   160,   172,     0,   179,   211,
   210,   183,   214,     0,     0,   208,   163,   162,   176,   189,
   188,     0,     0,   206,    20,    33,    34,    35,    36,     0,
     0,     0,     0,     0,     0,     0,   169,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   168,
     0,     0,     0,     0,   191,    57,     0,     0,   115,   109,
   110,   107,    77,    76,    75,    78,    79,    39,    12,    81,
    80,     0,    22,    39,    21,    25,    30,     0,     0,    28,
    15,     0,     0,    97,     0,    39,    39,    82,    39,     0,
    64,    63,   171,   170,   178,     0,     0,   212,   213,     0,
   184,     0,     0,   145,   144,   149,   148,   151,   150,   155,
   154,   157,   156,   159,   158,   167,   166,   126,   125,   139,
   138,   141,   140,   143,   142,   147,   146,   153,   152,   129,
   128,   131,   130,   133,   132,   135,   134,   137,   136,   165,
   164,   199,     0,   198,   204,     0,   118,   117,     0,   196,
     0,   178,   113,   112,     0,     0,   111,   106,    13,     0,
     0,    39,    31,    26,     0,     0,    16,     0,    39,    98,
    92,    96,     0,     0,     0,     0,    88,    83,    84,    39,
    70,    69,     0,   181,   209,   180,     0,   215,   186,   207,
   185,     0,   203,   202,   193,   192,     0,   195,   194,     0,
   116,    39,   105,   103,    39,     0,    27,    23,    29,    17,
     0,     0,    39,    95,     0,    90,    89,   102,   100,     0,
    39,     0,    85,   124,     0,   182,   187,     0,   205,   197,
    39,    14,    39,    39,     0,    94,    91,    39,    39,    74,
    73,   123,     0,   201,   200,    39,    39,    18,    39,    86,
   122,     0,    39,   121,   119,     0,     0,     0
};

static const short yydefgoto[] = {   326,
    28,    29,    61,   149,   150,    30,    31,    32,    33,    51,
    34,    35,    72,    36,    37,    38,    39,    40,   160,    41,
   138,   144,   247,   248,   249,   292,    42,    65,    43,    44,
    54,   129,   130,   131,   226,    45,    46,    47,    48,    56,
   125,   215,   216,    92,    84,    85,   170,    86
};

static const short yypact[] = {   356,
-32768,-32768,-32768,-32768,     8,   126,   203,    78,-32768,-32768,
   219,   625,-32768,  1988,    54,-32768,-32768,   197,-32768,-32768,
   625,   625,  1280,  1265,  1295,    53,   797,-32768,    15,   755,
-32768,     7,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2256,-32768,   253,-32768,
    49,-32768,  1265,    12,  2082,   189,-32768,   288,    17,    38,
   212,-32768,    75,   223,   137,-32768,  2106,  2106,  1052,-32768,
-32768,    57,-32768,   146,   242,   242,-32768,  2166,-32768,-32768,
-32768,-32768,  2256,   129,   625,   207,-32768,   242,-32768,-32768,
-32768,    10,   625,   207,-32768,-32768,-32768,-32768,-32768,  1337,
  1352,  1367,  1409,  1424,  1439,  1481,-32768,  1496,  1511,  1553,
  1568,  1583,  1625,  1640,  1655,  1697,  1712,  1727,  1769,-32768,
  2017,  1784,  2017,    30,-32768,-32768,   148,  1799,    62,    12,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1988,   273,-32768,
-32768,   169,-32768,  1988,-32768,-32768,-32768,   136,     9,-32768,
-32768,   211,  1841,-32768,    24,  1988,  1988,   118,  1988,    34,
-32768,-32768,-32768,-32768,    94,   511,   156,-32768,-32768,   625,
-32768,   397,    47,-32768,  2051,-32768,  2051,-32768,  2051,-32768,
   242,-32768,   242,-32768,   242,-32768,   242,-32768,  2308,-32768,
  2322,-32768,  2335,-32768,  2051,-32768,  2051,-32768,  2051,-32768,
   838,-32768,   838,-32768,   242,-32768,   242,-32768,   242,-32768,
   242,-32768,   281,  2256,-32768,    31,-32768,  2256,     6,-32768,
   625,-32768,-32768,-32768,   995,    37,-32768,  1931,-32768,    43,
   -18,   413,-32768,-32768,    65,    14,-32768,   206,  1988,-32768,
  2256,-32768,  1856,   857,   926,   625,   130,   118,-32768,  1109,
-32768,-32768,   289,-32768,   207,-32768,   568,  2256,-32768,   207,
-32768,   454,-32768,   103,-32768,-32768,  2017,-32768,-32768,  2238,
-32768,  1166,-32768,-32768,  1988,   232,-32768,-32768,-32768,-32768,
    43,   120,   470,-32768,  2184,-32768,-32768,-32768,-32768,  2106,
  1988,    44,-32768,-32768,   127,-32768,-32768,  1871,-32768,-32768,
   527,-32768,  1988,  1988,   326,-32768,-32768,  1988,  1223,-32768,
-32768,-32768,    25,-32768,  2256,   584,   641,-32768,  1988,  1931,
-32768,   123,   698,-32768,-32768,   165,   174,-32768
};

static const short yypgoto[] = {-32768,
   153,-32768,-32768,  -115,   -47,    22,    35,-32768,-32768,-32768,
-32768,-32768,   172,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -63,  -108,-32768,-32768,   -49,-32768,-32768,-32768,-32768,-32768,
    77,-32768,-32768,    91,-32768,-32768,-32768,    -3,-32768,     0,
-32768,   -59,  -117,   142,   -42,     4,-32768,   -26
};


#define	YYLAST		2393


static const short yytable[] = {    49,
    94,   156,    55,   157,   158,   219,   268,    67,    68,   234,
   127,    97,    98,    49,    80,    81,   147,    75,    76,    78,
    83,    88,    50,    83,   242,   321,   231,     2,     3,    49,
    93,   265,   220,     7,   251,    69,   128,   273,   146,     4,
   147,   276,   167,   239,   310,   236,    10,   140,   141,    83,
   252,    80,    81,   274,    70,    89,    71,   161,   148,   162,
   311,   -58,   -58,   126,    96,   277,    94,   212,    49,   267,
    99,   235,   236,    21,    22,   269,   213,   145,    62,   171,
    63,    83,   148,    23,   243,   225,    53,   166,   221,    83,
   266,    25,    26,    27,   267,   172,   175,   177,   179,   181,
   183,   185,   187,    96,   189,   191,   193,   195,   197,   199,
   201,   203,   205,   207,   209,   211,   261,   214,   218,   214,
   -58,   275,   282,   324,    55,   278,    52,   312,     2,     3,
   166,  -120,  -120,    80,    81,   153,    64,    49,   233,   255,
     4,   133,   134,    49,   246,   260,   161,    10,   162,   241,
   -60,   -60,    80,    81,   253,    49,    49,   291,    49,   228,
    80,    81,    83,   298,   327,   232,   258,   303,    83,   229,
   257,   147,   304,   328,    21,    22,   262,   244,   245,   305,
   250,    95,   325,   236,    23,   313,   267,    53,   279,    74,
  -120,   165,    25,    26,    27,   322,   319,    73,   293,    71,
   135,   136,   137,    57,   224,    58,   280,   299,   147,   -60,
   222,   237,   151,   148,   152,   140,   141,   270,   256,    66,
   227,     2,     3,   154,    49,   155,   308,    49,   230,     0,
   255,    49,   302,     4,   173,   260,   140,   141,    49,   285,
    10,    59,   290,    49,    49,     0,   272,   121,     0,    49,
   148,     0,     0,    83,   106,   107,     0,   123,    83,   124,
   283,     0,    96,   214,    60,   281,    96,    21,    22,   238,
   168,    49,   169,   -24,    49,   -24,     0,    23,    96,    96,
    53,   263,    49,   264,    96,    25,    26,    27,   139,   294,
    49,   295,   140,   141,   315,     0,   301,     0,   119,   120,
    49,     0,    49,    49,     0,     0,    96,    49,    49,   214,
     0,   121,   309,   122,     0,    49,    49,    96,    49,    49,
     0,   123,    49,   124,   316,   317,   318,     0,     0,   320,
   140,   141,     0,     0,     0,    96,     0,     0,     0,     0,
   323,     0,     0,    96,     0,     0,   142,     0,   143,     0,
    96,    96,     0,     0,    96,    -3,     1,    96,     2,     3,
   -39,   -39,     0,     0,     0,     0,     0,     0,     0,     0,
     4,     5,     0,     6,     7,     8,     9,    10,    11,     0,
     0,    12,     0,     0,    13,    14,     0,     0,     0,     0,
    15,    16,    17,     0,     0,    18,    19,    20,     0,     2,
     3,     0,     0,     0,    21,    22,     0,     0,     0,     0,
     0,     4,    -8,     0,    23,     2,     3,    24,    10,   -39,
     0,     0,    25,    26,    27,     0,     0,     4,     5,     0,
     6,    -8,     8,     9,    10,    11,     0,     0,    12,     0,
     0,    13,    14,     0,     0,    21,    22,    15,    16,    17,
     0,     0,    18,    19,    20,    23,     2,     3,    53,     0,
     0,    21,    22,    25,    26,    27,   259,     0,     4,    -7,
     0,    23,     2,     3,    24,    10,     0,     0,     0,    25,
    26,    27,     0,     0,     4,     5,     0,     6,    -7,     8,
     9,    10,    11,     0,     0,    12,     0,     0,    13,    14,
     0,     0,    21,    22,    15,    16,    17,     0,     0,    18,
    19,    20,    23,     2,     3,    53,     0,     0,    21,    22,
    25,    26,    27,   297,     0,     4,   -10,     0,    23,     2,
     3,    24,    10,     0,     0,     0,    25,    26,    27,     0,
     0,     4,     5,     0,     6,   -10,     8,     9,    10,    11,
     0,     0,    12,     0,     0,    13,    14,     0,     0,    21,
    22,    15,    16,    17,     0,     0,    18,    19,    20,    23,
     2,     3,    53,   254,     0,    21,    22,    25,    26,    27,
     0,     0,     4,    -6,     0,    23,     2,     3,    24,    10,
     0,     0,     0,    25,    26,    27,     0,     0,     4,     5,
     0,     6,    -6,     8,     9,    10,    11,     0,     0,    12,
     0,     0,    13,    14,     0,     0,    21,    22,    15,    16,
    17,     0,     0,    18,    19,    20,    23,     2,     3,    53,
   296,     0,    21,    22,    25,    26,    27,     0,     0,     4,
    -9,     0,    23,     2,     3,    24,    10,     0,     0,     0,
    25,    26,    27,     0,     0,     4,     5,     0,     6,    -9,
     8,     9,    10,    11,     0,     0,    12,     0,     0,    13,
    14,     0,     0,    21,    22,    15,    16,    17,     0,     0,
    18,    19,    20,    23,     0,     0,    53,     0,     0,    21,
    22,    25,    26,    27,     0,     0,     0,    -5,     0,    23,
     2,     3,    24,     0,     0,     0,     0,    25,    26,    27,
     0,     0,     4,     5,     0,     6,    -5,     8,     9,    10,
    11,     0,     0,    12,     0,     0,    13,    14,     0,     0,
     0,     0,    15,    16,    17,     0,     0,    18,    19,    20,
     0,     0,     0,     0,     0,     0,    21,    22,     0,     0,
     0,     0,     0,     0,    -1,     0,    23,     2,     3,    24,
     0,     0,     0,     0,    25,    26,    27,     0,     0,     4,
     5,     0,     6,     0,     8,     9,    10,    11,     0,     0,
    12,     0,     0,    13,    14,     0,     0,     0,     0,    15,
    16,    17,     0,     0,    18,    19,    20,    90,     0,     2,
     3,    80,    81,    21,    22,     0,     0,     0,     0,     0,
     0,     4,     0,    23,     0,     0,    24,     0,    10,     0,
     0,    25,    26,    27,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    21,    22,   103,   104,   105,
   106,   107,     0,     0,     0,    23,     0,   286,    53,     2,
     3,   -39,   -39,    25,    26,    27,    91,     0,     0,     0,
     0,     4,     5,   287,     6,     0,     8,     9,    10,    11,
     0,     0,    12,     0,     0,    13,    14,     0,   116,   117,
   118,    15,    16,    17,   119,   120,    18,    19,    20,     0,
     0,     0,     0,     0,     0,    21,    22,     0,     0,     0,
     0,     0,     0,     0,     0,    23,     0,     0,    24,     0,
   -39,     0,     0,    25,    26,    27,   288,     0,     2,     3,
   -39,   -39,     0,     0,     0,     0,     0,     0,     0,     0,
     4,     5,   289,     6,     0,     8,     9,    10,    11,     0,
     0,    12,     0,     0,    13,    14,     0,     0,     0,     0,
    15,    16,    17,     0,     0,    18,    19,    20,     0,     0,
     0,     0,     0,     0,    21,    22,     0,     0,     0,     0,
     0,     0,     0,     0,    23,     0,     0,    24,     0,   -39,
     0,     0,    25,    26,    27,   271,     0,     2,     3,   -39,
   -39,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     5,     0,     6,     0,     8,     9,    10,    11,     0,     0,
    12,     0,     0,    13,    14,     0,     0,     0,     0,    15,
    16,    17,     0,     0,    18,    19,    20,     0,     0,     0,
     0,     0,     0,    21,    22,     0,     0,     0,     0,     0,
     0,     0,   -72,    23,     2,     3,    24,     0,   -39,     0,
     0,    25,    26,    27,     0,     0,     4,     5,   -72,     6,
     0,     8,     9,    10,    11,     0,     0,    12,     0,     0,
    13,    14,   159,     0,     0,     0,    15,    16,    17,     0,
     0,    18,    19,    20,     0,     0,     0,     0,     0,     0,
    21,    22,     0,     0,     0,     0,     0,     0,     0,   -71,
    23,     2,     3,    24,     0,     0,     0,     0,    25,    26,
    27,     0,     0,     4,     5,   -71,     6,     0,     8,     9,
    10,    11,     0,     0,    12,     0,     0,    13,    14,     0,
     0,     0,     0,    15,    16,    17,     0,     0,    18,    19,
    20,     0,     0,     0,     0,     0,     0,    21,    22,     0,
     0,     0,     0,     0,     0,     0,  -114,    23,     2,     3,
    24,     0,     0,     0,     0,    25,    26,    27,     0,     0,
     4,     5,  -114,     6,     0,     8,     9,    10,    11,     0,
     0,    12,     0,     0,    13,    14,     0,     0,     0,     0,
    15,    16,    17,     0,     0,    18,    19,    20,     0,     0,
     0,     0,     0,     0,    21,    22,     0,     0,     0,     0,
     0,     0,     0,   -87,    23,     2,     3,    24,     0,     0,
     0,     0,    25,    26,    27,     0,     0,     4,     5,   -87,
     6,     0,     8,     9,    10,    11,     0,     0,    12,     0,
     0,    13,    14,     0,     0,     0,     0,    15,    16,    17,
     0,     0,    18,    19,    20,    79,     0,     2,     3,    80,
    81,    21,    22,     0,     0,     0,     0,     0,     0,     4,
    77,    23,     2,     3,    24,     0,    10,     0,     0,    25,
    26,    27,     0,     0,     4,    87,     0,     2,     3,     0,
     0,    10,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,    21,    22,     0,    10,     0,     0,     0,
     0,     0,     0,    23,     0,     0,    53,    82,    21,    22,
     0,    25,    26,    27,     0,     0,     0,   174,    23,     2,
     3,    53,     0,    21,    22,     0,    25,    26,    27,     0,
     0,     4,   176,    23,     2,     3,    53,     0,    10,     0,
     0,    25,    26,    27,     0,     0,     4,   178,     0,     2,
     3,     0,     0,    10,     0,     0,     0,     0,     0,     0,
     0,     4,     0,     0,     0,    21,    22,     0,    10,     0,
     0,     0,     0,     0,     0,    23,     0,     0,    53,     0,
    21,    22,     0,    25,    26,    27,     0,     0,     0,   180,
    23,     2,     3,    53,     0,    21,    22,     0,    25,    26,
    27,     0,     0,     4,   182,    23,     2,     3,    53,     0,
    10,     0,     0,    25,    26,    27,     0,     0,     4,   184,
     0,     2,     3,     0,     0,    10,     0,     0,     0,     0,
     0,     0,     0,     4,     0,     0,     0,    21,    22,     0,
    10,     0,     0,     0,     0,     0,     0,    23,     0,     0,
    53,     0,    21,    22,     0,    25,    26,    27,     0,     0,
     0,   186,    23,     2,     3,    53,     0,    21,    22,     0,
    25,    26,    27,     0,     0,     4,   188,    23,     2,     3,
    53,     0,    10,     0,     0,    25,    26,    27,     0,     0,
     4,   190,     0,     2,     3,     0,     0,    10,     0,     0,
     0,     0,     0,     0,     0,     4,     0,     0,     0,    21,
    22,     0,    10,     0,     0,     0,     0,     0,     0,    23,
     0,     0,    53,     0,    21,    22,     0,    25,    26,    27,
     0,     0,     0,   192,    23,     2,     3,    53,     0,    21,
    22,     0,    25,    26,    27,     0,     0,     4,   194,    23,
     2,     3,    53,     0,    10,     0,     0,    25,    26,    27,
     0,     0,     4,   196,     0,     2,     3,     0,     0,    10,
     0,     0,     0,     0,     0,     0,     0,     4,     0,     0,
     0,    21,    22,     0,    10,     0,     0,     0,     0,     0,
     0,    23,     0,     0,    53,     0,    21,    22,     0,    25,
    26,    27,     0,     0,     0,   198,    23,     2,     3,    53,
     0,    21,    22,     0,    25,    26,    27,     0,     0,     4,
   200,    23,     2,     3,    53,     0,    10,     0,     0,    25,
    26,    27,     0,     0,     4,   202,     0,     2,     3,     0,
     0,    10,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,    21,    22,     0,    10,     0,     0,     0,
     0,     0,     0,    23,     0,     0,    53,     0,    21,    22,
     0,    25,    26,    27,     0,     0,     0,   204,    23,     2,
     3,    53,     0,    21,    22,     0,    25,    26,    27,     0,
     0,     4,   206,    23,     2,     3,    53,     0,    10,     0,
     0,    25,    26,    27,     0,     0,     4,   208,     0,     2,
     3,     0,     0,    10,     0,     0,     0,     0,     0,     0,
     0,     4,     0,     0,     0,    21,    22,     0,    10,     0,
     0,     0,     0,     0,     0,    23,     0,     0,    53,     0,
    21,    22,     0,    25,    26,    27,     0,     0,     0,   210,
    23,     2,     3,    53,     0,    21,    22,     0,    25,    26,
    27,     0,     0,     4,   217,    23,     2,     3,    53,     0,
    10,     0,     0,    25,    26,    27,     0,     0,     4,   223,
     0,     2,     3,     0,     0,    10,     0,     0,     0,     0,
     0,     0,     0,     4,     0,     0,     0,    21,    22,     0,
    10,     0,     0,     0,     0,     0,     0,    23,     0,     0,
    53,     0,    21,    22,     0,    25,    26,    27,     0,     0,
     0,   240,    23,     2,     3,    53,     0,    21,    22,     0,
    25,    26,    27,     0,     0,     4,   284,    23,     2,     3,
    53,     0,    10,     0,     0,    25,    26,    27,     0,     0,
     4,   314,     0,     2,     3,     0,     0,    10,     0,     0,
     0,     0,     0,     0,     0,     4,     0,     0,     0,    21,
    22,     0,    10,     0,     0,     0,     0,     0,     0,    23,
     0,     0,    53,     0,    21,    22,     0,    25,    26,    27,
     0,     0,     0,     0,    23,     0,     0,    53,     0,    21,
    22,     0,    25,    26,    27,     0,     0,     0,     0,    23,
     0,     0,    53,     2,     3,   -39,   -39,    25,    26,    27,
     0,     0,     0,     0,     0,     4,     5,     0,     6,     0,
     8,     9,    10,    11,     0,     0,    12,     0,     0,    13,
    14,     0,     0,     0,     0,    15,    16,    17,     0,     0,
    18,    19,    20,     0,     0,     0,     0,     0,     0,    21,
    22,     0,     0,     0,     0,     0,     0,     0,     0,    23,
     2,     3,    24,     0,   -39,     0,     0,    25,    26,    27,
     0,     0,     4,     5,     0,     6,     0,     8,     9,    10,
    11,     0,     0,    12,     0,     0,    13,    14,     0,     2,
     3,     0,    15,    16,    17,     0,     0,    18,    19,    20,
     0,     4,     0,     0,     0,     0,    21,    22,    10,     0,
     0,     0,     0,     0,     0,     0,    23,     0,     0,    24,
     0,     0,     0,     0,    25,    26,    27,     0,     0,   212,
   103,   104,   105,   106,   107,    21,    22,     0,   213,     0,
     0,     0,     0,     0,     0,    23,     0,     0,    53,     0,
     0,     0,   132,    25,    26,    27,   133,   134,   100,   101,
   102,   103,   104,   105,   106,   107,     0,     0,     0,   114,
   115,   116,   117,   118,     0,     0,     0,   119,   120,     0,
   133,   134,   100,   101,   102,   103,   104,   105,   106,   107,
     0,     0,     0,     0,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,   135,   136,   137,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,   163,     0,     0,   135,
   136,   137,   100,   101,   102,   103,   104,   105,   106,   107,
     0,     0,     0,     0,   306,     0,     0,     0,     0,     0,
   100,   101,   102,   103,   104,   105,   106,   107,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     0,     0,   119,   120,     0,   164,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,     0,     0,     0,
   119,   120,     0,   307,   100,   101,   102,   103,   104,   105,
   106,   107,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   100,   101,   102,   103,   104,   105,   106,   107,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,     0,     0,     0,   119,   120,     0,   300,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     0,     0,   119,   120,   100,   101,   102,   103,   104,   105,
   106,   107,     0,     0,     0,     0,     0,     0,   100,   101,
   102,   103,   104,   105,   106,   107,     0,     0,     0,     0,
     0,   100,   101,   102,   103,   104,   105,   106,   107,     0,
     0,   109,   110,   111,   112,   113,   114,   115,   116,   117,
   118,     0,     0,     0,   119,   120,   110,   111,   112,   113,
   114,   115,   116,   117,   118,     0,     0,     0,   119,   120,
   111,   112,   113,   114,   115,   116,   117,   118,     0,     0,
     0,   119,   120
};

static const short yycheck[] = {     0,
    27,    65,     6,    67,    68,   123,     1,    11,    12,     1,
    53,     5,     6,    14,     5,     6,     3,    21,    22,    23,
    24,    25,    15,    27,     1,     1,   142,     3,     4,    30,
    27,     1,     3,    19,     1,    14,    25,     1,     1,    15,
     3,    60,    85,   152,     1,    64,    22,     5,     6,    53,
    17,     5,     6,    17,     1,     3,     3,     1,    45,     3,
    17,     5,     6,    15,    30,     1,    93,    43,    69,    64,
    64,    63,    64,    49,    50,    70,    52,    61,     1,    70,
     3,    85,    45,    59,    61,    24,    62,    84,    59,    93,
    60,    67,    68,    69,    64,    92,   100,   101,   102,   103,
   104,   105,   106,    69,   108,   109,   110,   111,   112,   113,
   114,   115,   116,   117,   118,   119,    70,   121,   122,   123,
    64,   230,   238,     1,   128,    61,     1,     1,     3,     4,
   127,     5,     6,     5,     6,    61,    59,   138,     3,   166,
    15,     5,     6,   144,    27,   172,     1,    22,     3,   153,
     5,     6,     5,     6,    61,   156,   157,    28,   159,   138,
     5,     6,   166,    61,     0,   144,   170,   276,   172,     1,
   167,     3,   281,     0,    49,    50,   173,   156,   157,    60,
   159,    29,    60,    64,    59,    59,    64,    62,   236,    18,
    64,    63,    67,    68,    69,   313,   305,     1,   248,     3,
    64,    65,    66,     1,   128,     3,     1,   267,     3,    64,
    63,     1,     1,    45,     3,     5,     6,   221,    63,     1,
   130,     3,     4,     1,   225,     3,   290,   228,    60,    -1,
   257,   232,     1,    15,    93,   262,     5,     6,   239,   243,
    22,    39,   246,   244,   245,    -1,   225,    59,    -1,   250,
    45,    -1,    -1,   257,    13,    14,    -1,    69,   262,    71,
   239,    -1,   228,   267,    62,    60,   232,    49,    50,    59,
    64,   272,    66,     1,   275,     3,    -1,    59,   244,   245,
    62,     1,   283,     3,   250,    67,    68,    69,     1,     1,
   291,     3,     5,     6,   298,    -1,   275,    -1,    57,    58,
   301,    -1,   303,   304,    -1,    -1,   272,   308,   309,   313,
    -1,    59,   291,    61,    -1,   316,   317,   283,   319,   320,
    -1,    69,   323,    71,   303,   304,     1,    -1,    -1,   308,
     5,     6,    -1,    -1,    -1,   301,    -1,    -1,    -1,    -1,
   319,    -1,    -1,   309,    -1,    -1,    59,    -1,    61,    -1,
   316,   317,    -1,    -1,   320,     0,     1,   323,     3,     4,
     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    15,    16,    -1,    18,    19,    20,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,     3,
     4,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
    -1,    15,     0,    -1,    59,     3,     4,    62,    22,    64,
    -1,    -1,    67,    68,    69,    -1,    -1,    15,    16,    -1,
    18,    19,    20,    21,    22,    23,    -1,    -1,    26,    -1,
    -1,    29,    30,    -1,    -1,    49,    50,    35,    36,    37,
    -1,    -1,    40,    41,    42,    59,     3,     4,    62,    -1,
    -1,    49,    50,    67,    68,    69,    70,    -1,    15,     0,
    -1,    59,     3,     4,    62,    22,    -1,    -1,    -1,    67,
    68,    69,    -1,    -1,    15,    16,    -1,    18,    19,    20,
    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,
    -1,    -1,    49,    50,    35,    36,    37,    -1,    -1,    40,
    41,    42,    59,     3,     4,    62,    -1,    -1,    49,    50,
    67,    68,    69,    70,    -1,    15,     0,    -1,    59,     3,
     4,    62,    22,    -1,    -1,    -1,    67,    68,    69,    -1,
    -1,    15,    16,    -1,    18,    19,    20,    21,    22,    23,
    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    49,
    50,    35,    36,    37,    -1,    -1,    40,    41,    42,    59,
     3,     4,    62,    63,    -1,    49,    50,    67,    68,    69,
    -1,    -1,    15,     0,    -1,    59,     3,     4,    62,    22,
    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    15,    16,
    -1,    18,    19,    20,    21,    22,    23,    -1,    -1,    26,
    -1,    -1,    29,    30,    -1,    -1,    49,    50,    35,    36,
    37,    -1,    -1,    40,    41,    42,    59,     3,     4,    62,
    63,    -1,    49,    50,    67,    68,    69,    -1,    -1,    15,
     0,    -1,    59,     3,     4,    62,    22,    -1,    -1,    -1,
    67,    68,    69,    -1,    -1,    15,    16,    -1,    18,    19,
    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,
    30,    -1,    -1,    49,    50,    35,    36,    37,    -1,    -1,
    40,    41,    42,    59,    -1,    -1,    62,    -1,    -1,    49,
    50,    67,    68,    69,    -1,    -1,    -1,     0,    -1,    59,
     3,     4,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
    -1,    -1,    15,    16,    -1,    18,    19,    20,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    -1,
    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,
    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
    -1,    -1,    -1,    -1,     0,    -1,    59,     3,     4,    62,
    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    15,
    16,    -1,    18,    -1,    20,    21,    22,    23,    -1,    -1,
    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    35,
    36,    37,    -1,    -1,    40,    41,    42,     1,    -1,     3,
     4,     5,     6,    49,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    59,    -1,    -1,    62,    -1,    22,    -1,
    -1,    67,    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    59,    -1,     1,    62,     3,
     4,     5,     6,    67,    68,    69,    70,    -1,    -1,    -1,
    -1,    15,    16,    17,    18,    -1,    20,    21,    22,    23,
    -1,    -1,    26,    -1,    -1,    29,    30,    -1,    51,    52,
    53,    35,    36,    37,    57,    58,    40,    41,    42,    -1,
    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,
    64,    -1,    -1,    67,    68,    69,     1,    -1,     3,     4,
     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    15,    16,    17,    18,    -1,    20,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,    -1,
    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    64,
    -1,    -1,    67,    68,    69,     1,    -1,     3,     4,     5,
     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
    16,    -1,    18,    -1,    20,    21,    22,    23,    -1,    -1,
    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,    35,
    36,    37,    -1,    -1,    40,    41,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     1,    59,     3,     4,    62,    -1,    64,    -1,
    -1,    67,    68,    69,    -1,    -1,    15,    16,    17,    18,
    -1,    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,
    29,    30,    31,    -1,    -1,    -1,    35,    36,    37,    -1,
    -1,    40,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,
    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
    59,     3,     4,    62,    -1,    -1,    -1,    -1,    67,    68,
    69,    -1,    -1,    15,    16,    17,    18,    -1,    20,    21,
    22,    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    -1,    -1,    40,    41,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     1,    59,     3,     4,
    62,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,
    15,    16,    17,    18,    -1,    20,    21,    22,    23,    -1,
    -1,    26,    -1,    -1,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    40,    41,    42,    -1,    -1,
    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     1,    59,     3,     4,    62,    -1,    -1,
    -1,    -1,    67,    68,    69,    -1,    -1,    15,    16,    17,
    18,    -1,    20,    21,    22,    23,    -1,    -1,    26,    -1,
    -1,    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,
    -1,    -1,    40,    41,    42,     1,    -1,     3,     4,     5,
     6,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    15,
     1,    59,     3,     4,    62,    -1,    22,    -1,    -1,    67,
    68,    69,    -1,    -1,    15,     1,    -1,     3,     4,    -1,
    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
    -1,    -1,    -1,    49,    50,    -1,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    63,    49,    50,
    -1,    67,    68,    69,    -1,    -1,    -1,     1,    59,     3,
     4,    62,    -1,    49,    50,    -1,    67,    68,    69,    -1,
    -1,    15,     1,    59,     3,     4,    62,    -1,    22,    -1,
    -1,    67,    68,    69,    -1,    -1,    15,     1,    -1,     3,
     4,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,    49,    50,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,
    49,    50,    -1,    67,    68,    69,    -1,    -1,    -1,     1,
    59,     3,     4,    62,    -1,    49,    50,    -1,    67,    68,
    69,    -1,    -1,    15,     1,    59,     3,     4,    62,    -1,
    22,    -1,    -1,    67,    68,    69,    -1,    -1,    15,     1,
    -1,     3,     4,    -1,    -1,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    -1,    -1,    49,    50,    -1,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    -1,    49,    50,    -1,    67,    68,    69,    -1,    -1,
    -1,     1,    59,     3,     4,    62,    -1,    49,    50,    -1,
    67,    68,    69,    -1,    -1,    15,     1,    59,     3,     4,
    62,    -1,    22,    -1,    -1,    67,    68,    69,    -1,    -1,
    15,     1,    -1,     3,     4,    -1,    -1,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,    49,
    50,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    -1,    49,    50,    -1,    67,    68,    69,
    -1,    -1,    -1,     1,    59,     3,     4,    62,    -1,    49,
    50,    -1,    67,    68,    69,    -1,    -1,    15,     1,    59,
     3,     4,    62,    -1,    22,    -1,    -1,    67,    68,    69,
    -1,    -1,    15,     1,    -1,     3,     4,    -1,    -1,    22,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,
    -1,    49,    50,    -1,    22,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    -1,    -1,    62,    -1,    49,    50,    -1,    67,
    68,    69,    -1,    -1,    -1,     1,    59,     3,     4,    62,
    -1,    49,    50,    -1,    67,    68,    69,    -1,    -1,    15,
     1,    59,     3,     4,    62,    -1,    22,    -1,    -1,    67,
    68,    69,    -1,    -1,    15,     1,    -1,     3,     4,    -1,
    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    15,
    -1,    -1,    -1,    49,    50,    -1,    22,    -1,    -1,    -1,
    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    49,    50,
    -1,    67,    68,    69,    -1,    -1,    -1,     1,    59,     3,
     4,    62,    -1,    49,    50,    -1,    67,    68,    69,    -1,
    -1,    15,     1,    59,     3,     4,    62,    -1,    22,    -1,
    -1,    67,    68,    69,    -1,    -1,    15,     1,    -1,     3,
     4,    -1,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    15,    -1,    -1,    -1,    49,    50,    -1,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,
    49,    50,    -1,    67,    68,    69,    -1,    -1,    -1,     1,
    59,     3,     4,    62,    -1,    49,    50,    -1,    67,    68,
    69,    -1,    -1,    15,     1,    59,     3,     4,    62,    -1,
    22,    -1,    -1,    67,    68,    69,    -1,    -1,    15,     1,
    -1,     3,     4,    -1,    -1,    22,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    15,    -1,    -1,    -1,    49,    50,    -1,
    22,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,
    62,    -1,    49,    50,    -1,    67,    68,    69,    -1,    -1,
    -1,     1,    59,     3,     4,    62,    -1,    49,    50,    -1,
    67,    68,    69,    -1,    -1,    15,     1,    59,     3,     4,
    62,    -1,    22,    -1,    -1,    67,    68,    69,    -1,    -1,
    15,     1,    -1,     3,     4,    -1,    -1,    22,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    15,    -1,    -1,    -1,    49,
    50,    -1,    22,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,    -1,    49,    50,    -1,    67,    68,    69,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    49,
    50,    -1,    67,    68,    69,    -1,    -1,    -1,    -1,    59,
    -1,    -1,    62,     3,     4,     5,     6,    67,    68,    69,
    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,    18,    -1,
    20,    21,    22,    23,    -1,    -1,    26,    -1,    -1,    29,
    30,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,    -1,
    40,    41,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,
    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
     3,     4,    62,    -1,    64,    -1,    -1,    67,    68,    69,
    -1,    -1,    15,    16,    -1,    18,    -1,    20,    21,    22,
    23,    -1,    -1,    26,    -1,    -1,    29,    30,    -1,     3,
     4,    -1,    35,    36,    37,    -1,    -1,    40,    41,    42,
    -1,    15,    -1,    -1,    -1,    -1,    49,    50,    22,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,
    -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    43,
    10,    11,    12,    13,    14,    49,    50,    -1,    52,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,
    -1,    -1,     1,    67,    68,    69,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    -1,    -1,    -1,    49,
    50,    51,    52,    53,    -1,    -1,    -1,    57,    58,    -1,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    -1,    -1,    -1,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    -1,    -1,    -1,    57,    58,
    -1,    -1,    -1,    -1,    -1,    64,    65,    66,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
    -1,    -1,    57,    58,    -1,    -1,     1,    -1,    -1,    64,
    65,    66,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    -1,    -1,    -1,     1,    -1,    -1,    -1,    -1,    -1,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
    -1,    -1,    57,    58,    -1,    60,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
    57,    58,    -1,    60,     7,     8,     9,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    -1,    -1,    -1,    57,    58,    -1,    60,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
    -1,    -1,    57,    58,     7,     8,     9,    10,    11,    12,
    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,     7,     8,
     9,    10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,
    -1,     7,     8,     9,    10,    11,    12,    13,    14,    -1,
    -1,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    -1,    -1,    -1,    57,    58,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    -1,    -1,    -1,    57,    58,
    46,    47,    48,    49,    50,    51,    52,    53,    -1,    -1,
    -1,    57,    58
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 149 "../../../libs/libFreeMat/Parser.yxx"
{mainAST = yyvsp[0].v.p;;
    break;}
case 4:
#line 151 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("statement list or function definition",yyvsp[0]);;
    break;}
case 5:
#line 155 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-6].v.p->toStringList();
     r->name = yyvsp[-5].v.p->text;
     r->arguments = yyvsp[-3].v.p->toStringList();
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 6:
#line 165 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-5].v.p->text;
     r->arguments = yyvsp[-3].v.p->toStringList();
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 7:
#line 174 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-3].v.p->toStringList();
     r->name = yyvsp[-2].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 8:
#line 183 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-2].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 9:
#line 191 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->returnVals = yyvsp[-5].v.p->toStringList();
     r->name = yyvsp[-4].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 10:
#line 200 "../../../libs/libFreeMat/Parser.yxx"
{
     MFunctionDef *r;
     r = new MFunctionDef();
     r->name = yyvsp[-4].v.p->text;
     r->code = yyvsp[0].v.p;
     r->fileName = parsing_filename;
     chainFunction(r);
   ;
    break;}
case 11:
#line 208 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("legal function name or return declaration after 'function'",yyvsp[-1]);;
    break;}
case 12:
#line 209 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("argument list or statement list after identifier '") + 
	yyvsp[-1].v.p->text + "'",yyvsp[-1]);;
    break;}
case 13:
#line 211 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("(possibly empty) argument list after '('",yyvsp[-1]);;
    break;}
case 14:
#line 212 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("statement list after ')'",yyvsp[-1]);;
    break;}
case 15:
#line 213 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("function name for function declared",yyvsp[-2]);;
    break;}
case 16:
#line 214 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("argument list or statement list following function name :") + 
	yyvsp[-1].v.p->text,yyvsp[-1]);;
    break;}
case 17:
#line 216 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("(possibly empty) argument list after '('",yyvsp[-1]);;
    break;}
case 18:
#line 217 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("statement list after ')'",yyvsp[-1]);;
    break;}
case 21:
#line 226 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 22:
#line 227 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 23:
#line 228 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 24:
#line 229 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an '=' symbol after identifier in return declaration",yyvsp[-1]);;
    break;}
case 25:
#line 230 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("a valid list of return arguments in return declaration",yyvsp[-1]);;
    break;}
case 26:
#line 231 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("matching ']' in return declaration for '['",yyvsp[-2]);;
    break;}
case 27:
#line 232 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an '=' symbol after return declaration",yyvsp[-1]);;
    break;}
case 28:
#line 236 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 29:
#line 237 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 31:
#line 241 "../../../libs/libFreeMat/Parser.yxx"
{
	yyval.v.p = yyvsp[0].v.p;
	char *b = (char*) malloc(strlen(yyvsp[0].v.p->text)+2);
	b[0] = '&';
	strcpy(b+1,yyvsp[0].v.p->text);
	yyval.v.p->text = b;
  ;
    break;}
case 32:
#line 252 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_BLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 33:
#line 253 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 34:
#line 257 "../../../libs/libFreeMat/Parser.yxx"
{
  	    yyval.v.p = new AST(OP_QSTATEMENT,NULL,yyvsp[0].v.i);
	    yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 35:
#line 261 "../../../libs/libFreeMat/Parser.yxx"
{
	    yyval.v.p = new AST(OP_RSTATEMENT,NULL,yyvsp[0].v.i);
            yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 36:
#line 265 "../../../libs/libFreeMat/Parser.yxx"
{
	    yyval.v.p = new AST(OP_RSTATEMENT,NULL,yyvsp[0].v.i);
	    yyval.v.p->down = yyvsp[-1].v.p;
	 ;
    break;}
case 39:
#line 274 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(null_node,"",-1);;
    break;}
case 55:
#line 292 "../../../libs/libFreeMat/Parser.yxx"
{yyvsp[-1].v.p->addChild(yyvsp[0].v.p); 
				yyval.v.p = new AST(OP_SCALL,yyvsp[-1].v.p,yyvsp[-1].v.p->context());;
    break;}
case 56:
#line 297 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_PARENS,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 57:
#line 298 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 58:
#line 302 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p); ;
    break;}
case 59:
#line 303 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("list of variables to be tagged as persistent",yyvsp[-1]);;
    break;}
case 60:
#line 307 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 61:
#line 308 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("list of variables to be tagged as global",yyvsp[-1]);;
    break;}
case 63:
#line 313 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 64:
#line 314 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("list of valid identifiers",yyvsp[0]);;
    break;}
case 69:
#line 334 "../../../libs/libFreeMat/Parser.yxx"
{ yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-2].v.p); if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);;
    break;}
case 70:
#line 336 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("matching 'end' to 'try' clause from line ") + decodeline(yyvsp[-3]),yyvsp[0]);;
    break;}
case 71:
#line 340 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 72:
#line 341 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 73:
#line 345 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-5].v.p; yyval.v.p->addChild(yyvsp[-4].v.p); 
	  if (yyvsp[-2].v.p != NULL) yyval.v.p->addChild(yyvsp[-2].v.p); 
	  if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 74:
#line 350 "../../../libs/libFreeMat/Parser.yxx"
{
          yyxpt(std::string("matching 'end' to 'switch' clause from line ") + decodeline(yyvsp[-5]),yyvsp[0]);
        ;
    break;}
case 82:
#line 365 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 84:
#line 370 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = new AST(OP_CASEBLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());
	;
    break;}
case 85:
#line 373 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 86:
#line 379 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-2].v.p); yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 87:
#line 385 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 88:
#line 388 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = NULL;
	;
    break;}
case 89:
#line 394 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 90:
#line 398 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("'end' to match 'for' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 91:
#line 402 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-3].v.p; yyval.v.p->addChild(yyvsp[-1].v.p);;
    break;}
case 92:
#line 403 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 93:
#line 404 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[0].v.p; 
	      yyval.v.p->addChild(new AST(OP_RHS,new AST(id_node,yyvsp[0].v.p->text,yyvsp[0].v.p->context()),yyvsp[0].v.p->context())); ;
    break;}
case 94:
#line 406 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-4]);;
    break;}
case 95:
#line 407 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("indexing expression",yyvsp[-1]);;
    break;}
case 96:
#line 408 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("equals operator after loop index",yyvsp[-1]);;
    break;}
case 97:
#line 409 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("identifier that is the loop variable",yyvsp[-1]);;
    break;}
case 98:
#line 410 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("indexing expression",yyvsp[-1]);;
    break;}
case 99:
#line 411 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("identifier or assignment (id = expr) after 'for' ",yyvsp[0]);;
    break;}
case 100:
#line 415 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 101:
#line 418 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("test expression after 'while'",yyvsp[-1]);;
    break;}
case 102:
#line 420 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("'end' to match 'while' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 103:
#line 424 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-4].v.p; yyval.v.p->addChild(yyvsp[-3].v.p); if (yyvsp[-2].v.p != NULL) yyval.v.p->addChild(yyvsp[-2].v.p); 
	  if (yyvsp[-1].v.p != NULL) yyval.v.p->addChild(yyvsp[-1].v.p);
	;
    break;}
case 104:
#line 428 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("condition expression for 'if'",yyvsp[-1]);;
    break;}
case 105:
#line 429 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt(std::string("'end' to match 'if' statement from line ") + decodeline(yyvsp[-4]),yyvsp[0]);;
    break;}
case 106:
#line 433 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = new AST(OP_CSTAT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-2].v.p->context());
	;
    break;}
case 107:
#line 436 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("valid list of statements after condition",yyvsp[0]);;
    break;}
case 108:
#line 440 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 110:
#line 445 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = new AST(OP_ELSEIFBLOCK,yyvsp[0].v.p,yyvsp[0].v.p->context());
	;
    break;}
case 111:
#line 448 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);
	;
    break;}
case 112:
#line 454 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 113:
#line 457 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("test condition for 'elseif' clause",yyvsp[-1]);;
    break;}
case 114:
#line 460 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyval.v.p = yyvsp[0].v.p;
	;
    break;}
case 115:
#line 463 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = NULL;;
    break;}
case 116:
#line 464 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("statement list for 'else' clause",yyvsp[-1]);;
    break;}
case 117:
#line 468 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_ASSIGN,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 118:
#line 469 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("expression in assignment",yyvsp[-1]);;
    break;}
case 119:
#line 473 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyvsp[-3].v.p->addChild(new AST(OP_PARENS,yyvsp[-1].v.p,yyvsp[-2].v.i));
	  yyval.v.p = new AST(OP_MULTICALL,yyvsp[-6].v.p,yyvsp[-3].v.p,yyvsp[-7].v.i);
	;
    break;}
case 120:
#line 477 "../../../libs/libFreeMat/Parser.yxx"
{
	  yyvsp[0].v.p->addChild(new AST(OP_PARENS,NULL,-1));
	  yyval.v.p = new AST(OP_MULTICALL,yyvsp[-3].v.p,yyvsp[0].v.p,yyvsp[-4].v.i);
	;
    break;}
case 121:
#line 482 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-2]);;
    break;}
case 122:
#line 484 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("indexing list",yyvsp[-1]);;
    break;}
case 123:
#line 486 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("left parenthesis",yyvsp[-1]);;
    break;}
case 124:
#line 488 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("identifier",yyvsp[-1]);;
    break;}
case 125:
#line 492 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_COLON,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 126:
#line 493 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after ':'",yyvsp[-1]);;
    break;}
case 128:
#line 495 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_PLUS,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 129:
#line 496 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '+'",yyvsp[-1]);;
    break;}
case 130:
#line 497 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_SUBTRACT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 131:
#line 498 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '-'",yyvsp[-1]);;
    break;}
case 132:
#line 499 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_TIMES,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 133:
#line 500 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '*'",yyvsp[-1]);;
    break;}
case 134:
#line 501 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_RDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 135:
#line 502 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '/'",yyvsp[-1]);;
    break;}
case 136:
#line 503 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_LDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 137:
#line 504 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '\\'",yyvsp[-1]);;
    break;}
case 138:
#line 505 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_OR,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 139:
#line 506 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '|'",yyvsp[-1]);;
    break;}
case 140:
#line 507 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_AND,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 141:
#line 508 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '&'",yyvsp[-1]);;
    break;}
case 142:
#line 509 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_LT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 143:
#line 510 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '<'",yyvsp[-1]);;
    break;}
case 144:
#line 511 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_LEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 145:
#line 512 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '<='",yyvsp[-1]);;
    break;}
case 146:
#line 513 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_GT,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 147:
#line 514 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '>'",yyvsp[-1]);;
    break;}
case 148:
#line 515 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_GEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 149:
#line 516 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '>='",yyvsp[-1]);;
    break;}
case 150:
#line 517 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_EQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 151:
#line 518 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '=='",yyvsp[-1]);;
    break;}
case 152:
#line 519 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_NEQ,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 153:
#line 520 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '~='",yyvsp[-1]);;
    break;}
case 154:
#line 521 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT_TIMES,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 155:
#line 522 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '.*'",yyvsp[-1]);;
    break;}
case 156:
#line 523 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT_RDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 157:
#line 524 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after './'",yyvsp[-1]);;
    break;}
case 158:
#line 525 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT_LDIV,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 159:
#line 526 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '.\\'",yyvsp[-1]);;
    break;}
case 160:
#line 527 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_NEG,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 161:
#line 528 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[0].v.p;;
    break;}
case 162:
#line 529 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_NOT,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 163:
#line 530 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after logical not",yyvsp[0]);;
    break;}
case 164:
#line 531 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_POWER,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 165:
#line 532 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '^'",yyvsp[-1]);;
    break;}
case 166:
#line 533 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT_POWER,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 167:
#line 534 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after '.^'",yyvsp[-1]);;
    break;}
case 168:
#line 535 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_TRANSPOSE,yyvsp[-1].v.p,yyvsp[0].v.i);;
    break;}
case 169:
#line 536 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT_TRANSPOSE,yyvsp[-1].v.p,yyvsp[0].v.i);;
    break;}
case 170:
#line 537 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 171:
#line 538 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("a right parenthesis after expression to match this one",yyvsp[-2]);;
    break;}
case 172:
#line 539 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("an expression after left parenthesis",yyvsp[-1]);;
    break;}
case 176:
#line 546 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_ADDRESS,yyvsp[0].v.p);;
    break;}
case 177:
#line 547 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_RHS,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 178:
#line 548 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 179:
#line 549 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("a matrix definition followed by a right bracket",yyvsp[-1]);;
    break;}
case 180:
#line 550 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 181:
#line 551 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 182:
#line 552 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 183:
#line 553 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_EMPTY,NULL,yyvsp[-1].v.i);;
    break;}
case 184:
#line 554 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 185:
#line 555 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p;;
    break;}
case 186:
#line 556 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 187:
#line 557 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p;;
    break;}
case 188:
#line 558 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_EMPTY_CELL,NULL,yyvsp[-1].v.i);;
    break;}
case 189:
#line 559 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("a cell-array definition followed by a right brace",yyvsp[-1]);;
    break;}
case 191:
#line 563 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-1].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 192:
#line 567 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_PARENS,yyvsp[-1].v.p,yyvsp[-2].v.i); ;
    break;}
case 193:
#line 568 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("matching right parenthesis",yyvsp[-2]);;
    break;}
case 194:
#line 569 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_BRACES,yyvsp[-1].v.p,yyvsp[-2].v.i); ;
    break;}
case 195:
#line 570 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("matching right brace",yyvsp[-2]);;
    break;}
case 196:
#line 571 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOT,yyvsp[0].v.p,yyvsp[-1].v.i); ;
    break;}
case 197:
#line 572 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_DOTDYN,yyvsp[-1].v.p,yyvsp[-3].v.i);;
    break;}
case 199:
#line 577 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_ALL,NULL,yyvsp[0].v.i);;
    break;}
case 200:
#line 578 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_KEYWORD,yyvsp[-2].v.p,yyvsp[0].v.p,yyvsp[-3].v.i);;
    break;}
case 201:
#line 579 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("expecting expression after '=' in keyword assignment",yyvsp[-1]);;
    break;}
case 202:
#line 580 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_KEYWORD,yyvsp[0].v.p,yyvsp[-1].v.i);;
    break;}
case 203:
#line 581 "../../../libs/libFreeMat/Parser.yxx"
{yyxpt("expecting keyword identifier after '/' in keyword assignment",yyvsp[-1]);;
    break;}
case 205:
#line 586 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addPeer(yyvsp[0].v.p);;
    break;}
case 206:
#line 590 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_BRACES,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 207:
#line 591 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 208:
#line 595 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_BRACKETS,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 209:
#line 596 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
case 214:
#line 608 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = new AST(OP_SEMICOLON,yyvsp[0].v.p,yyvsp[0].v.p->context());;
    break;}
case 215:
#line 609 "../../../libs/libFreeMat/Parser.yxx"
{yyval.v.p = yyvsp[-2].v.p; yyval.v.p->addChild(yyvsp[0].v.p);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 612 "../../../libs/libFreeMat/Parser.yxx"


namespace FreeMat {
  
  void resetParser() {
    mainAST = NULL;
    mainMDef = NULL;
  }
  
  ASTPtr getParsedScriptBlock() {
    return mainAST;
  }
  
  MFunctionDef* getParsedFunctionDef() {
    return mainMDef;
  }
  
  ParserState parseState() {
    if (mainAST != NULL) 
      return ScriptBlock;
    else
      return FuncDef;
  }
  
  ParserState parseString(char *txt) {
/*     yydebug = 1; 	*/
    resetParser();
    interactiveMode = true;
    setLexBuffer(txt);
    yyparse();
    return parseState();
  }
  
  ParserState parseFile(FILE *fp, const char* fname) {
//    yydebug = 1; 
    resetParser();
    interactiveMode = false;
    parsing_filename = fname;
    setLexFile(fp);
    yyparse();
    return parseState();
  }
  
}
