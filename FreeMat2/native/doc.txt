OK - I've decided... Here's the route:

win32 - native
X/Linux/macOSX - xlib

In xlib, I need to learn how to draw plots, etc. and images...

There are two aspects to plot drawing:
Line colors,
Line styles,
Text (rotated and non-rotated)

Image/Volume display is simpler:
Image display
Window sizing

The editor class is more complicated still - it requires text output, and a 
scroll bar (which has to be implemented...).

Because of the common functionality, I suggest an abstract device context class
or graphics context class (gc), that provides the interface into the graphics
system.  Apart from the event system, (which I will have to think about) this
will.  I also want to eliminate the threads...

Another possibility is to bypass the line drawing stuff and go straight to 
bitmaps.  That uses even less code in common with the OSs.  We just have to
be able to display images.  This will be slower on X windows, though.  But
is speed super critical??  And for complex plots its slower!!  It takes
longer to send the bijillion line commands than the pixelated image.
Food for thought...

'Nother thing to think about.  gtk2 is something that can be daunting.  Suppose
I abandon FreeMatGUI (again).  That brings us down to a much simpler windowing
subsystem... provided that I can port libtecla to Win32.  Not too difficult,
given the work I've already done.  Then I don't need the file chooser, etc.
So here's a Pro/Con list:

xlib - pros
  * speed - super fast, lightweight and clean
  * simplicity - no external library dependancies
  * portability - everything except win32
xlib - cons
  * help - no helpwindow facility (can we use an embeddable browser?)
  * dialogs - no basic dialogs (don't need them...)
  * visuals!

gtk - pros
  * builtins - have full api capability
  * portability - everythink except win32
gtk - cons
  * speed - slow!
  * complexity - there is a _lot_ of code

These are the only two choices remaining.  Another idea is to port to gtk2, use
the gtk2-win32 to get Windows, and port libtecla to win32.  This would work
nicely!!!

It looks like GDK is a very thin wrapper around xlib.  Another option is to program in gdk.

What is the minimal application to prove all aspects of FreeMat from a GUI perspective:

1. command line interaction
2. lines & text (drawing to a bitmap is nice too)
3. images (grayscale, colormapped and RGB)
4. Mouse events for feedback

Suppose I were to just try and get FreeMat working (ignore FreeMatGUI for now).
The window class would need the following events:

class Point2D {
public:
  int x;
  int y;
  Point2D();
  Point2D(int xarg, int yarg);
};

class Rect2D {
public:
  int x1;
  int y1;
  int width;
  int height;
  Rect2D();
  Rect2D(int x1, int y1, int width, int height);
};

class GraphContext {
   Point2D GetTextExtent(string label);
   void DrawText(string label, Point2D pos);
   void DrawRotatedText(string label, Point2D pos, float rotationAngle);
   Rect2D GetTextExtent(string label);
   void SetColor(string colorName);
   void SetLineStyle(lineStyle style);
   void DrawLine(Point2D pos1, Point2D pos2);
   void DrawPoint(Point2D pos);
   void DrawCircle(Point2D pos, int radius);
   void DrawRectangle(Rect2D rect);
   void DrawLines(vector<Point2D> pts);
   void SetClippingRegion(Rect2D rect);
   void ClearClippingRegion();
   void SetCursor(CursorType);
   void BlitColormapImage(Point2D pos, ColormapImage img);
   void BlitRGBImage(Point2D pos, RGBImage img);
} 

class ColormapImage {
}

class RGBImage {
}

class Window {
   Point2D GetClientSize();
   Point2D OnMouseLeftDown();
   void OnClose();
   void OnPaint(GraphContext GC);
}

Now, most core libs don't support drawing to bitmaps...  So if I move this
functionality into my lib, I can add antialiasing (for free).  That also means
I have to use RGB images only, as colormaps don't work well with antialiased
lines.  This will be really neat.  I can develop the entire drawing library
independant of FreeMat, and then build a little windowing system into it.

This is now the critical question.  If I can draw to a bitmap using fltk,
I will consider just porting the code to fltk
.  If I cannot draw to a bitmap
using fltk, then I will consider the custom drawing route (which is almost
working).  OK - critical question solved.  So its onward with the 
draw-it-myself approach.  That leaves only one serious question: fonts.

I think that using libt1 (or whatever its called) is the better option -
although consider that on linux, FreeType is widely available, its interface
is easy to use, and that there is code parse_afm that can be used to read
the afm files for postscript output.  But FreeType doesn't do type1 fonts.
Arghhh....   Anyway, for now, I'll focus on the line drawing that doesn't 
work right yet.

Dummy-stupid.  The answer is to pre-discretize the fonts and not have any 
font library dependance at all...  Simple solution.  Which prog to use
for the fonts?  small fonts render best with TrueType... So I'll use a TTF
rendering of the fonts...  (although Helvetica would work also...);

Furthermore, I can pre-parse the AFM data to get metrics for the Helvetica font.  
The result can be stored as a binary file...  This avoids the problem of parsing 
AFM files in the final code.

Another option (still thinking...) is to use freetype.  It has a nice license,
works well, and can process Type-1 fonts.  I can use it to do the text extent
calculations, etc.  A problem with this is that I would need to distribute 
text metrics _and_ a font with the program.   Can a GPL'ed font be included
with a non-GPL'ed program?  

12-4-2003
At this point, the new GC (Graphics Context) code works swimmingly.  There are still
a few issues (thorny) to deal with:
- libffi -- the most important external library, and also the worst to deal with.
./configure --srcdir=/Users/basu/gcc-3.4-20031119/libffi --disable-multilib --disable-shared
seems to work...  However, the library does not build properly... Could it be a library problem?
And not a code problem?

Hey!! I found a version of libffi that works with Mac OSX - it was 
part of the "pyObjC" project.  It is patched to compile outside of 
the gcc tree and fixes the problem with the assembler.

As cool as FLTK is, do I really need it?  Suppose I made the following choices:

1. Use Xt/Xlib on Unix/MacOS systems & xterm interface 
2. Use win32 API on win32 & GUI interface

This choice seems reasonable... Its not difficult to do.  I haven't seen any 
interest in GUI building yet.

It also means no linking in libraries...  Whew - a few less libraries would make my job easier.

What about images?  This is always the sticky point, right (under X)?

If I can images to work reasonably well with X, I'll be done...

08-28-2004

I need to refactor the graphics subsystem to make it extendable.  The classes I need are:

1. XWindow
2. GraphicsContext
3. Bitmap


OK - the XWindow class needs only minimal modifications, right?  I can get rid of the distinction between vector and bitmap windows, which leaves me with a pretty solid base class.  Can we shoe-horn both the plot and image classes into a single figure window?  If I want to put a widget-based system together later, I'll need to seperate a plot from the window that contains it.  Instead, a plot should be an object that can draw onto a figure window.  I guess I'm suggesting something like:

Renderer
  |
  |---> Plot2D
  |
  |---> ScalarImage
  |
  |---> ColorImage
  |
  |---> GUI
  | 
  \---> Movie,

Etc.  The main figure window then doesn't care what renderer it carries.

8-30-04

For 3D plots, can I reuse the code to draw/manipulate axes in 2D?  

Maroon 5 - BEP
Nickelback
Live
Audioslave (Exclusive)
Edie Brickell


What still needs to be done:
1. Menu on the main window
2. Font selection
3. Copy/paste/etc
4. Bundle in libFLTK


