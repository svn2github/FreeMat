// Copyright (c) 2002, 2003 Samit Basu
// 
// Permission is hereby granted, free of charge, to any person obtaining a 
// copy of this software and associated documentation files (the "Software"), 
// to deal in the Software without restriction, including without limitation 
// the rights to use, copy, modify, merge, publish, distribute, sublicense, 
// and/or sell copies of the Software, and to permit persons to whom the 
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included 
// in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
// THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
// DEALINGS IN THE SOFTWARE.

#ifndef __Reserved_hpp__
#define __Reserved_hpp__

#include "Parser.hpp"

namespace FreeMat {

  /**
   * These keywords must be in alphabetical order.
   */
  const unsigned int FM_BREAK = 0;
  const unsigned int FM_CASE = 1;
  const unsigned int FM_CATCH = 2;
  const unsigned int FM_CONTINUE = 3;
  const unsigned int FM_ELSE = 4;
  const unsigned int FM_ELSEIF = 5;
  const unsigned int FM_END = 6;
  const unsigned int FM_FOR = 7;
  const unsigned int FM_FUNCTION = 8;
  const unsigned int FM_GLOBAL = 9;
  const unsigned int FM_IF = 10;
  const unsigned int FM_KEYBOARD = 11;
  const unsigned int FM_OTHERWISE = 12;
  const unsigned int FM_PERSISTENT = 13;
  const unsigned int FM_QUIT = 14;
  const unsigned int FM_RETALL = 15;
  const unsigned int FM_RETURN = 16;
  const unsigned int FM_SWITCH = 17;
  const unsigned int FM_TRY = 18;
  const unsigned int FM_WHILE = 19;

  /**
   * Each reserved word structure has three attributes,
   * the text of the reserved word, the token for the word,
   * as generated by the parser, and the ordinal (from above).
   */
  typedef struct {
    char *word;
    int  token;
    int  ordinal;
  } reservedWordStruct;

#define RESWORDCOUNT 20
  extern reservedWordStruct reservedWord[RESWORDCOUNT];

  /**
   * A comparison function for the reservedWord list of 
   * structures, so that the binary search algorithm used
   * on the reservedWordStruct list works properly.
   */
  int compareReservedWord(const void*, const void*);
}
#endif
