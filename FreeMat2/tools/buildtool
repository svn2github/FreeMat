#!/usr/bin/perl -w
use File::Path;
use File::Copy;
use Cwd;
use warnings;
use strict;

my $md5program;

# Find a MD5 Sum program
sub find_program {
    my $title = shift;
    my $prog;
    print "************************************************************\n";
    print "  Searching for $title\n";
    print "************************************************************\n";
    while ($prog = shift) {
	print "Looking for program $prog\n";
	my $retcode = system("$prog < /dev/null > /dev/null 2> /dev/null");
	if ($retcode <= 256) {
	    print "    Found program $prog\n";
	    return $prog;
	}
    }
    die "Unable to resolve $title\n";
}

# Make a directory
sub make_directory {
    my $dir = shift;
    if (! -d $dir) {
	print "Making directory $dir...\n";
	eval {mkpath($dir)};
	if ($@) {
	    die "Unable to create directory $dir\n";
	}
    }
}

# Symbolic link
sub sym_link {
    my $first = shift;
    my $second = shift;
    print "Linking $first and $second\n";
    if (! -l $second) {
	symlink($first,$second) or die "symlink failed: $!\n";
    }
}

# Copy a file
sub copy_file {
    my $source = shift;
    my $dest = shift;
    print "Copying $source to $dest\n";
}

# Copy a set of files 
sub copy_files {
    my $source_pattern = shift;
    my $dest = shift;
    my $retcode = system("cp -R $source_pattern $dest");
    if ($retcode != 0) {
	die "Error on copy of $source_pattern and $dest\n";
    }
}

# Delete a file
sub delete_file {
    my $file = shift;
    unlink($file);
}

# Delete a directory
sub delete_directory {
    my $dir = shift;
    rmtree($dir);
}

sub change_directory {
    my $destdir = shift;
    chdir $destdir or die "Unable to change to directory $destdir\n";
}

# unpack a tar ball
sub unpack_tar_ball {
    my $tarball = shift;
    my $destdir = shift;
    my $cwd = Cwd::cwd();
    print "Unpacking $tarball\n";
    make_directory $destdir;
    change_directory $destdir;
    if (system("gunzip < $cwd/$tarball | tar xf -") != 0) {
	die "Unable to unpack tarball $tarball in directory $destdir\n";
    }
    change_directory $cwd;
}

sub md5_check {
    my $filename = shift;
    my $md5sum = shift;
    return (`$md5program < $filename` =~ $md5sum);
}

# Fetch a url via curl
sub fetch_curl_url {
    # Get the URL
    my $raw_url = shift;
    # Get the output filename
    my $filename = shift;
    # Get the expected md5sum
    my $md5sum = shift;
    my @pargs = ("curl","$raw_url","-o$filename","--disable-epsv");
    if (system(@pargs) != 0) {
	print  "Attempt to download file $filename using curl failed: $?\n";
	return 0;
    } 
    if (md5_check($filename,$md5sum)) {
	return 1;
    }
    print "Downloaded file failed MD5sum test.\n";
    return 0;
}

# Fetch a url via wget
sub fetch_wget_url {
    # Get the URL
    my $raw_url = shift;
    # Get the output filename
    my $filename = shift;
    # Get the expected md5sum
    my $md5sum = shift;
    my @pargs = ("wget","$raw_url","-O$filename");
    if (system(@pargs) != 0) {
	print  "Attempt to download file $filename using curl failed: $?\n";
	return 0; 
    } 
    if (md5_check($filename,$md5sum)) {
	return 1;
    }
    print "Downloaded file failed MD5sum test.\n";
    return 0;
}

sub fetch_url {
    my $raw_url = shift;
    my $filename = shift;
    my $md5sum = shift;
    if (md5_check($filename,$md5sum)) {
	return 1;
    }
    print "Deleting file $filename\n";
    delete_file($filename);
    print "Attempting to download $filename from $raw_url\n";
    if (-f $filename and md5_check($filename,$md5sum)) {
	print "...skipped - file already downloaded and passes md5 checksum\n";
	return 1;
    }
    if (fetch_curl_url($raw_url,$filename,$md5sum)) {
	print "Successfully retrieved file $filename from url $raw_url using curl\n";
	return 1;
    }
    print "\n\nUnable to retrieve file using curl.  Will try using wget.\n";
    if (fetch_wget_url($raw_url,$filename,$md5sum)) {
	print "Successfully retrieved file $filename from url $raw_url using wget\n";
	return 1;
    }
    print "\n\nUnable to retrieve file using wget!\n";
    print "You will have to download the file manually\n";
    print "From this url          $raw_url\n";
    print "Save the file as       $filename\n";
    print "The MD5 sum should be  $md5sum\n";
    die "stopped";
    return 0;
}

sub setup_common {
    my $base = shift;
    $ENV{'PATH'} = "$base/bin:" . $ENV{'PATH'};
    make_directory($base);
    make_directory($base . "/bin");
    make_directory($base . "/lib");
    make_directory($base . "/include");
    make_directory("files");
    make_directory("build");
    $md5program = find_program('MD5 Checksum Program','md5','openssl dgst -md5','md5sum');
}

sub make_package {
    my $dir = shift;
    my $prefix = shift;
    my $platform_opts = shift;
    my $target = shift;
    my $cc = $platform_opts->{'compiler'};
    my $ar = $platform_opts->{'archiver'};
    my $ranlib = $platform_opts->{'ranlib'};
    my $opts = $platform_opts->{'opts'};
    my $fc = $platform_opts->{'fc'};
    my $arflags = $platform_opts->{'arflags'};
    my $mopts = $platform_opts->{'make opts'};
    print "Configuring package in $dir...\n";
    my $cwd = Cwd::cwd();
    change_directory $dir;
#   my $cmdm = "make CC=$cc AR='$ar $arflags' ARCH=$ar RANLIB=$ranlib FFLAGS=$opts OPTS=$opts FC=$fc FORTRAN=$fc LOADER=$fc ARCHFLAGS=$arflags ARFLAGS=$arflags $mopts $target";
    my $cmdm = "make CC=$cc AR='$ar $arflags' ARCH=$ar RANLIB=$ranlib FFLAGS=$opts OPTS=$opts FC=$fc FORTRAN=$fc LOADER=$fc ARCHFLAGS=$arflags ARFLAGS='' $mopts $target";
    print "Make command is $cmdm\n";
    (system($cmdm) == 0) or die "make in $dir failed: $?\n";
    change_directory $cwd;
    print "Make complete\n";
}

sub configure_make_install {
    my $dir = shift;
    my $prefix = shift;
    my $buildsub = shift;
    my $platform_opts = shift;
    my $extra_configure_opts = shift;
    my $copts = $platform_opts->{'configure opts'};
    my $mopts = $platform_opts->{'make opts'};
    my $pcopts = $platform_opts->{'preconfigure opts'};
    print "Configuring package in $dir...\n";
    my $cwd = Cwd::cwd();
    change_directory $dir;
    my $cmdc;
    if ($buildsub) {
	delete_directory $buildsub;
	make_directory $buildsub;
	change_directory $buildsub;
	$cmdc = "../configure --prefix=$prefix $copts $extra_configure_opts";
    } else {
	$cmdc = "./configure --prefix=$prefix $copts $extra_configure_opts";
    }
    $cmdc =  $pcopts . ' ' . $cmdc;
    print "Configure command is $cmdc\n";
    (system($cmdc) == 0) or die "configure in $dir failed: $?\n";
    my $cmdm = "make $mopts";
    print "Make command is $cmdm\n";
    (system($cmdm) == 0) or die "make in $dir failed: $?\n";
    print "Installing...\n";
    (system("make install") == 0) or die "make install in $dir failed: $?\n";
    print "Installation complete...\n";
    change_directory $cwd;
}

sub test_include_file {
    my $prefix = shift;
    my $testname = shift;
    my $header = shift;
    my $platform_opts = shift;
    print "Checking for include file $header...\n";
    my $cwd = Cwd::cwd();
    make_directory("tests");
    change_directory("tests");
    open(TESTHANDLE, ">$testname" . "_header.c") || die "Unable to create test file $testname.c\n";
    print TESTHANDLE "#include <$header>\n";
    close (TESTHANDLE) || die "Unable to close test file..\n";
    my $cc = $platform_opts->{'compiler'};
    my $cflags = $platform_opts->{'cflags'};
    my $ret = (system("$cc -c $testname" . "_header.c $cflags") == 0);
    if (!$ret) {
	print "Failed to find $header: $?\n";
    } else {
	print "    Found header file $header\n";
    }
    change_directory($cwd);
    return $ret;
}

# Test for a function named funcname in library named libname
#includes the current prefix in the search path
sub test_function {
    my $prefix = shift;
    my $testname = shift;
    my $libname = shift;
    my $funcname = shift;
    my $platform_opts = shift;
    print "Checking for package $testname...\n";
    my $cwd = Cwd::cwd();
    make_directory("tests");
    change_directory("tests");
    open(TESTHANDLE, ">$testname.c") || die "Unable to create test file $testname.c\n";
    print TESTHANDLE "#ifdef __cplusplus\n";
    print TESTHANDLE "extern \"C\"\n";
    print TESTHANDLE "#endif\n";
    print TESTHANDLE "char $funcname ();\n";
    print TESTHANDLE "int main() {\n";
    print TESTHANDLE "   return $funcname ();\n";
    print TESTHANDLE "   return 0;\n";
    print TESTHANDLE "}\n";
    close (TESTHANDLE) || die "Unable to close test file..\n";
    my $cc = $platform_opts->{'compiler'};
    my $ldflags = $platform_opts->{'ldflags'};
    my $libs = $platform_opts->{'libs'};
    my $cflags = $platform_opts->{'cflags'};
    my $ret = (system("$cc -o $testname $testname.c $cflags $ldflags -l$libname $libs") == 0);
    if (!$ret) {
	print "Failed to find $testname: $?\n";
    } else {
	print "    Found library for $testname\n";
    }
    change_directory($cwd);
    return $ret;
}

sub autopackage_check {
    my $prefix = shift;
    my $packagename = shift;
    my $libname = shift;
    my $testfunc = shift;
    my $include = shift;
    my $platform_opts = shift;
    my $url = shift;
    my $destfile = shift;
    my $md5sum = shift;
    my $builddir = shift;
    my $packagedir = shift;
    my $configure_extras = shift;
    my $unpack_dir = shift;

    if (not defined $unpack_dir) {
	$unpack_dir = "build";
    }

    print "************************************************************\n";
    print "    Handling package $packagename\n";
    print "************************************************************\n";
    if (!test_function($prefix,$packagename,$libname,$testfunc,$platform_opts) ||
	!test_include_file($prefix,$packagename,$include,$platform_opts)) {
	fetch_url($url,$destfile,$md5sum);
	unpack_tar_ball($destfile,$unpack_dir);
	configure_make_install("$unpack_dir/$packagedir",$prefix,$builddir,$platform_opts,$configure_extras);
	test_function($prefix,$packagename,$libname,$testfunc,$platform_opts) &&
	    test_include_file($prefix,$packagename,$include,$platform_opts) or
	    die "Installation of package $packagename failed!\n";
    }
}


sub job_setup_mingw_cross {
    my $prefix = shift;
    my $platform_opts;

    $platform_opts->{'configure opts'} = '';
    $platform_opts->{'make opts'} = '';
    $platform_opts->{'compiler'} = 'gcc';
    $platform_opts->{'libs'} = "-llapack -lblas";
    $platform_opts->{'ldflags'} = "-L$prefix/lib";
    $platform_opts->{'cflags'} = "-I$prefix/include";
    $platform_opts->{'archiver'} = 'ar';
    $platform_opts->{'ranlib'} = 'ranlib';
    $platform_opts->{'opts'} = '-O2';
    $platform_opts->{'arflags'} = 'crv';
    $platform_opts->{'fc'} = find_program('FORTRAN Compiler','g77','gfortran','f90','f95');
    $platform_opts->{'preconfigure opts'} = '';

    setup_common($prefix);
    my $ming = "i686-mingw32";

    fetch_url('http://downloads.sf.net/mingw/binutils-2.16.91-20060119-1-src.tar.gz',
	      'files/binutils-2.16.91-20060119-1-src.tar.gz','42e3a665111121075480244cafc27ce7');
    unpack_tar_ball('files/binutils-2.16.91-20060119-1-src.tar.gz','cross');
    configure_make_install("cross/binutils-2.16.91-20060119-1",$prefix,"",$platform_opts,"--target=$ming");
    fetch_url('http://downloads.sf.net/mingw/gcc-core-3.4.5-20060117-1-src.tar.gz',
	      'files/gcc-core-3.4.5-20060117-1-src.tar.gz','b72bffc6e7d5c7d1de099ad76ef0d45d');
    unpack_tar_ball('files/gcc-core-3.4.5-20060117-1-src.tar.gz','cross');
    fetch_url('http://downloads.sf.net/mingw/gcc-g++-3.4.5-20060117-1-src.tar.gz',
	      'files/gcc-g++-3.4.5-20060117-1-src.tar.gz','42c92b923adfe4c8943f05c326af1736');
    unpack_tar_ball('files/gcc-g++-3.4.5-20060117-1-src.tar.gz','cross');
    fetch_url('http://downloads.sf.net/mingw/gcc-g77-3.4.5-20060117-1-src.tar.gz',
	      'files/gcc-g77-3.4.5-20060117-1-src.tar.gz','37e2558839f70ff2dd8c16c359e5e327');
    unpack_tar_ball('files/gcc-g77-3.4.5-20060117-1-src.tar.gz','cross');
    fetch_url('http://downloads.sf.net/mingw/mingw-runtime-3.12-src.tar.gz',
	      'files/mingw-runtime-3.12-src.tar.gz','a9fdbd5162aa1ae0171c47f929adf938');
    unpack_tar_ball('files/mingw-runtime-3.12-src.tar.gz','cross');
    fetch_url('http://downloads.sf.net/mingw/w32api-3.9-src.tar.gz',
	      'files/w32api-3.9-src.tar.gz','be0b0219645a4ee0f3495c2abf90b5ad');
    unpack_tar_ball('files/w32api-3.9-src.tar.gz','cross');
    sym_link("$prefix/include","$prefix/$ming/include");
    copy_files("cross/mingw-runtime-3.12/include/*","$prefix/include");
    copy_files("cross/w32api-3.9/include/*","$prefix/include");
    configure_make_install("cross/gcc-3.4.5-20060117-1",$prefix,"",$platform_opts,"--target=$ming --enable-threads --enable-languages=c");
    configure_make_install("cross/w32api-3.9",$prefix,"",$platform_opts,"--target=$ming --host=$ming --build=i686-pc-linux-gnu");
    my $cwd = Cwd::cwd();
    sym_link("$cwd/cross/w32api-3.9","$cwd/cross/w32api");
    copy_files("$prefix/$ming/lib/*","$prefix/lib");
    delete_directory("$prefix/$ming/lib");
    sym_link("$prefix/lib","$prefix/$ming/lib");
    copy_files("$prefix/lib/*.a","cross/mingw-runtime-3.12/mingwex/");
    configure_make_install("cross/mingw-runtime-3.12",$prefix,"",$platform_opts,"--target=$ming --host=$ming --build=i686-pc-linux-gnu");
    configure_make_install("cross/gcc-3.4.5-20060117-1",$prefix,"",$platform_opts,"--target=$ming --enable-threads --enable-languages=c,c++,f77");
    fetch_url('ftp://ftp.trolltech.com/qt/source/qt-win-opensource-4.3.0-mingw.exe','files/qt-win-opensource-4.3.0-mingw.exe',
	      '43e4930c1c97997fe3ecb12c9c384eda');
    system("wine files/qt-win-opensource-4.3.0-mingw.exe");
    copy_files("~/.wine/drive_c/Qt","$prefix"); 
}

sub job_native_freemat {
    my $prefix = shift;
    my $platform_opts;

    $platform_opts->{'configure opts'} = '--disable-shared';
    $platform_opts->{'make opts'} = '';
    $platform_opts->{'compiler'} = 'gcc';
    $platform_opts->{'libs'} = "-llapack -lblas";
    $platform_opts->{'ldflags'} = "-L$prefix/lib";
    $platform_opts->{'cflags'} = "-I$prefix/include";
    $platform_opts->{'archiver'} = 'ar';
    $platform_opts->{'ranlib'} = 'ranlib';
    $platform_opts->{'opts'} = '-O2';
    $platform_opts->{'arflags'} = 'crv';
    $platform_opts->{'fc'} = find_program('FORTRAN Compiler','g77','gfortran','f90','f95');
    $platform_opts->{'preconfigure opts'} = 'PKG_CONFIG_PATH=$PKG_CONFIG_PATH'. ":$prefix/lib:$prefix/lib/pkgconfig  ";


# TODO: LAPACK, ZLIB

    setup_common($prefix);

    my $need_qt4 = 0;
    my $rcc;
    my $moc;
    my $uic;
    eval {
	$rcc = find_program('RCC','rcc4','rcc-qt4','rcc');
	$moc = find_program('MOC','moc4','moc-qt4','moc');
	$uic = find_program('UIC','uic4','uic-qt4','uic');
    };

    if ($@) {
	print "One or more of rcc, moc, or uic was not found - will need to build Qt4.\n";
	print "rcc - $rcc, moc - $moc, uic - $uic\n";
	$need_qt4 = 1;
    }

    if (!$need_qt4) {
	my $version_test = `$moc -v 2>&1`;
	if ($version_test =~ /\(Qt (.*)\)/) {
	    my $version_number = $1;
	    $version_number =~ s|\.||g;
	    if ($version_number < 420) {
		print "Qt Version $version_number is not sufficient\n";
		$need_qt4 = 1;
	    }
	} else {
	    print "Qt Version $version_test is not sufficient\n";
	    $need_qt4 = 1;
	}
    }

    if ($need_qt4) {
	fetch_url('ftp://ftp.trolltech.com/qt/source/qt-x11-opensource-src-4.2.3.tar.gz',
		  'files/qt-x11-opensource-src-4.2.3.tar.gz','13f12bf58a32ebf15837fcd605cb3c99');
	unpack_tar_ball('files/qt-x11-opensource-src-4.2.3.tar.gz','build');
	my $save_config_opts = $platform_opts->{'configure opts'};
	$platform_opts->{'configure opts'} .= " -fast -no-qt3support";
	configure_make_install("build/qt-x11-opensource-src-4.2.3",$prefix,"",$platform_opts);
	$platform_opts->{'configure opts'} = $save_config_opts;
    }

    autopackage_check($prefix,'pcre','pcre','pcre_compile','pcre.h',
		      $platform_opts,
		      'ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-7.0.tar.gz',
		      'files/pcre-7.0.tar.gz','a34681744d97d8eb41c576de71c97150',
		      'build','pcre-7.0');

    autopackage_check($prefix,'portaudio','portaudio','Pa_OpenStream','portaudio.h',
		      $platform_opts,
		      'http://www.portaudio.com/archives/pa_stable_v19_061121.tar.gz',
		      'files/pa_stable_v19_061121.tar.gz','f2ceca92b3bfc206abccfb439c169a3c',
		      'build','portaudio');

    autopackage_check($prefix,'fftw-float','fftw3f','fftwf_malloc','fftw3.h',
		      $platform_opts,
		      'http://www.fftw.org/fftw-3.1.2.tar.gz',
		      'files/fftw-3.1.2.tar.gz','08f2e21c9fd02f4be2bd53a62592afa4',
		      'build_single','fftw-3.1.2','--enable-single');

    autopackage_check($prefix,'fftw-double','fftw3','fftw_malloc','fftw3.h',
		      $platform_opts,
		      'http://www.fftw.org/fftw-3.1.2.tar.gz',
		      'files/fftw-3.1.2.tar.gz','08f2e21c9fd02f4be2bd53a62592afa4',
		      'build_double','fftw-3.1.2');

    autopackage_check($prefix,'ffcall','avcall','__structcpy','avcall.h',
		      $platform_opts,
		      'ftp://ftp.santafe.edu/pub/gnu/ffcall-1.10.tar.gz',
		      'files/ffcall-1.10.tar.gz','2db95007e901f3bc2ae7e5a9fe9ebea4',
		      'build','ffcall-1.10');

    print "************************************************************\n";
    print "    Handling package ARPACK\n";
    print "************************************************************\n";

    if (!test_function($prefix,'arpack','arpack','znaupd_',$platform_opts)) {
	fetch_url('http://www.caam.rice.edu/software/ARPACK/SRC/arpack96.tar.Z',
		  'files/arpack96.tar.Z','7525bb511694c6735a45bb40fad88429');
	unpack_tar_ball('files/arpack96.tar.Z','build');
	my $cwd = Cwd::cwd();    
	make_package('build/ARPACK',$prefix,$platform_opts,'MAKE=make DIRS="SRC UTIL" ' . "ARPACKLIB=$cwd/build/ARPACK/libarpack.a all");
	copy_file('build/ARPACK/libarpack.a',"$prefix/lib/libarpack.a");
	test_function($prefix,'arpack','arpack','znaupd_',$platform_opts) or
	    die "Installation of ARPACK failed";
    }

    print "************************************************************\n";
    print "    Handling package SparseSuite\n";
    print "************************************************************\n";

    my $amd_found = test_function($prefix,'SparseSuiteAMD','amd','amd_postorder',$platform_opts);
    if ($amd_found) {
	$platform_opts->{'libs'} = "-lamd $platform_opts->{'libs'}";
    }
    my $umfpack_found = test_function($prefix,'SparseSuiteUMFPACK','umfpack',
				      'umfpack_zl_solve',$platform_opts);
    if (!$amd_found || !$umfpack_found) {
	fetch_url('http://www.cise.ufl.edu/research/sparse/SuiteSparse/SuiteSparse-2.3.1.tar.gz',
		  'files/SuiteSparse-2.3.1.tar.gz','52d5088aaae7231b8c540657ccaf3625');
	unpack_tar_ball('files/SuiteSparse-2.3.1.tar.gz','build');
	make_package('build/SuiteSparse/AMD/Source',$prefix,$platform_opts,'');
	make_package('build/SuiteSparse/UMFPACK/Source',$prefix,$platform_opts,'');
	copy_file('build/SuiteSparse/AMD/Lib/libamd.a',"$prefix/lib/libamd.a");
	copy_file('build/SuiteSparse/UMFPACK/Lib/libumfpack.a',"$prefix/lib/libumfpack.a");
	copy_file('build/SuiteSparse/AMD/Include/amd.h',"$prefix/include/amd.h");
	copy_files('build/SuiteSparse/UMFPACK/Include/*.h',"$prefix/include");
	copy_file('build/SuiteSparse/UFconfig/UFconfig.h',"$prefix/include/UFconfig.h");
	test_function($prefix,'SparseSuiteAMD','amd','amd_postorder',$platform_opts) or
	    die "Installation of AMD package from sparse suite failed!\n";
	$platform_opts->{'libs'} = "-lamd $platform_opts->{'libs'}";
	test_function($prefix,'SparseSuiteUMFPACK','umfpack','umfpack_zl_solve',$platform_opts) or
	    die "Installation of UMFPACK package from sparse suite package failed!\n";
    }

    print "************************************************************\n";
    print "    Starting FreeMat Installation\n";
    print "************************************************************\n";

    fetch_url('http://downloads.sf.net/freemat/FreeMat-3.2.tar.gz',
	      'files/FreeMat-3.2.tar.gz','61c99ce56fcc244a4108b26b3ecb6d9b');
    $platform_opts->{'configure opts'} = $platform_opts->{'configure opts'} . 
	" CFLAGS=-I$prefix/include LDFLAGS=-L$prefix/lib";
    unpack_tar_ball('files/FreeMat-3.2.tar.gz','build');
    configure_make_install('build/FreeMat-3.2',$prefix,'build',$platform_opts);
}

sub job_win_freemat {
    my $prefix = shift;
    my $platform_opts;

    $platform_opts->{'configure opts'} = '';
    $platform_opts->{'make opts'} = '';
    $platform_opts->{'compiler'} = 'i686-mingw32-gcc';
    $platform_opts->{'libs'} = "-lopengl32 -lglu32 -lgdi32 -luser32 -lwsock32 -lwinmm";
    $platform_opts->{'ldflags'} = "-L$prefix/lib";
    $platform_opts->{'cflags'} = "-I$prefix/include";
    $platform_opts->{'archiver'} = 'i686-mingw32-ar';
    $platform_opts->{'ranlib'} = 'i686-mingw32-ranlib';
    $platform_opts->{'opts'} = '-O2';
    $platform_opts->{'arflags'} = 'crv';
    $platform_opts->{'fc'} = 'i686-mingw32-g77';
    $platform_opts->{'preconfigure opts'} = 'PKG_CONFIG_PATH=$PKG_CONFIG_PATH'. ":$prefix/lib:$prefix/lib/pkgconfig  ";


# TODO: LAPACK, ZLIB

    setup_common($prefix);

    my $need_qt4 = 0;
    my $rcc;
    my $moc;
    my $uic;
    eval {
	$rcc = find_program('RCC','rcc4','rcc-qt4','rcc');
	$moc = find_program('MOC','moc4','moc-qt4','moc');
	$uic = find_program('UIC','uic4','uic-qt4','uic');
    };

    if ($@) {
	print "One or more of rcc, moc, or uic was not found - will need to build Qt4.\n";
	print "rcc - $rcc, moc - $moc, uic - $uic\n";
	$need_qt4 = 1;
    }

    if ($need_qt4) {
	die "Win version of QT cannot be installed in the win_freemat job - use the setup-mingw-cross job.";
    }
    
    autopackage_check($prefix,'pcre','pcre','pcre_compile','pcre.h',
		      $platform_opts,
		      'ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-7.0.tar.gz',
		      'files/pcre-7.0.tar.gz','a34681744d97d8eb41c576de71c97150',
		      'build','pcre-7.0','--host=i686-mingw32 --build=i686-pc-linux-gnu --disable-shared','cross');

    autopackage_check($prefix,'portaudio','portaudio','Pa_OpenStream','portaudio.h',
		      $platform_opts,
		      'http://www.portaudio.com/archives/pa_stable_v19_061121.tar.gz',
		      'files/pa_stable_v19_061121.tar.gz','f2ceca92b3bfc206abccfb439c169a3c',
		      'build','portaudio','--host=i686-mingw32 --build=i686-pc-linux-gnu --disable-shared','cross');

    autopackage_check($prefix,'fftw-float','fftw3f','fftwf_malloc','fftw3.h',
		      $platform_opts,
		      'http://www.fftw.org/fftw-3.1.2.tar.gz',
		      'files/fftw-3.1.2.tar.gz','08f2e21c9fd02f4be2bd53a62592afa4',
		      'build_single','fftw-3.1.2','--host=i686-mingw32 --build=i686-pc-linux-gnu --enable-single','cross');

    autopackage_check($prefix,'fftw-double','fftw3','fftw_malloc','fftw3.h',
		      $platform_opts,
		      'http://www.fftw.org/fftw-3.1.2.tar.gz',
		      'files/fftw-3.1.2.tar.gz','08f2e21c9fd02f4be2bd53a62592afa4',
		      'build_double','fftw-3.1.2','--host=i686-mingw32 --build=i686-pc-linux-gnu','cross');

    autopackage_check($prefix,'ffcall','avcall','__structcpy','avcall.h',
		      $platform_opts,
		      'ftp://ftp.santafe.edu/pub/gnu/ffcall-1.10.tar.gz',
		      'files/ffcall-1.10.tar.gz','2db95007e901f3bc2ae7e5a9fe9ebea4',
		      'build','ffcall-1.10','--host=i686-mingw32 --build=i686-pc-linux-gnu RANLIB=i686-mingw32-ranlib','cross');

    

    print "************************************************************\n";
    print "    Handling package ARPACK\n";
    print "************************************************************\n";


}


my $prefix = shift;
my $job = shift;

if (not defined $job or not defined $prefix) {
  die "Usage: buildtool <prefix> <task>\n" . " where <task> is one of: \n" . 
      "    native-freemat    - build freemat for this platform\n" . 
      "    setup-mingw-cross - setup the win32 cross compiler\n" .
      "    win-freemat       - build win32 freemat\n";     
}

if ($job =~ "native-freemat") {
    job_native_freemat($prefix);
}

if ($job =~ "setup-mingw-cross") {
    job_setup_mingw_cross($prefix);
}

if ($job =~ "win-freemat") {
    job_win_freemat($prefix);
}
